

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Aug 26 07:14:09 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F627
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    51                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    52                           	dabs	1,0x7E,2
    53     0000                     
    54                           ; Generated 22/03/2023 GMT
    55                           ; 
    56                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution. Publication is not required when
    70                           ;        this file is used in an embedded application.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F627 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88     0000                     	;# 
    89     0001                     	;# 
    90     0002                     	;# 
    91     0003                     	;# 
    92     0004                     	;# 
    93     0005                     	;# 
    94     0006                     	;# 
    95     000A                     	;# 
    96     000B                     	;# 
    97     000C                     	;# 
    98     000E                     	;# 
    99     000E                     	;# 
   100     000F                     	;# 
   101     0010                     	;# 
   102     0011                     	;# 
   103     0012                     	;# 
   104     0015                     	;# 
   105     0015                     	;# 
   106     0016                     	;# 
   107     0017                     	;# 
   108     0018                     	;# 
   109     0019                     	;# 
   110     001A                     	;# 
   111     001F                     	;# 
   112     0081                     	;# 
   113     0085                     	;# 
   114     0086                     	;# 
   115     008C                     	;# 
   116     008E                     	;# 
   117     0092                     	;# 
   118     0098                     	;# 
   119     0099                     	;# 
   120     009A                     	;# 
   121     009B                     	;# 
   122     009C                     	;# 
   123     009D                     	;# 
   124     009F                     	;# 
   125     0000                     	;# 
   126     0001                     	;# 
   127     0002                     	;# 
   128     0003                     	;# 
   129     0004                     	;# 
   130     0005                     	;# 
   131     0006                     	;# 
   132     000A                     	;# 
   133     000B                     	;# 
   134     000C                     	;# 
   135     000E                     	;# 
   136     000E                     	;# 
   137     000F                     	;# 
   138     0010                     	;# 
   139     0011                     	;# 
   140     0012                     	;# 
   141     0015                     	;# 
   142     0015                     	;# 
   143     0016                     	;# 
   144     0017                     	;# 
   145     0018                     	;# 
   146     0019                     	;# 
   147     001A                     	;# 
   148     001F                     	;# 
   149     0081                     	;# 
   150     0085                     	;# 
   151     0086                     	;# 
   152     008C                     	;# 
   153     008E                     	;# 
   154     0092                     	;# 
   155     0098                     	;# 
   156     0099                     	;# 
   157     009A                     	;# 
   158     009B                     	;# 
   159     009C                     	;# 
   160     009D                     	;# 
   161     009F                     	;# 
   162     0000                     	;# 
   163     0001                     	;# 
   164     0002                     	;# 
   165     0003                     	;# 
   166     0004                     	;# 
   167     0005                     	;# 
   168     0006                     	;# 
   169     000A                     	;# 
   170     000B                     	;# 
   171     000C                     	;# 
   172     000E                     	;# 
   173     000E                     	;# 
   174     000F                     	;# 
   175     0010                     	;# 
   176     0011                     	;# 
   177     0012                     	;# 
   178     0015                     	;# 
   179     0015                     	;# 
   180     0016                     	;# 
   181     0017                     	;# 
   182     0018                     	;# 
   183     0019                     	;# 
   184     001A                     	;# 
   185     001F                     	;# 
   186     0081                     	;# 
   187     0085                     	;# 
   188     0086                     	;# 
   189     008C                     	;# 
   190     008E                     	;# 
   191     0092                     	;# 
   192     0098                     	;# 
   193     0099                     	;# 
   194     009A                     	;# 
   195     009B                     	;# 
   196     009C                     	;# 
   197     009D                     	;# 
   198     009F                     	;# 
   199     0000                     	;# 
   200     0001                     	;# 
   201     0002                     	;# 
   202     0003                     	;# 
   203     0004                     	;# 
   204     0005                     	;# 
   205     0006                     	;# 
   206     000A                     	;# 
   207     000B                     	;# 
   208     000C                     	;# 
   209     000E                     	;# 
   210     000E                     	;# 
   211     000F                     	;# 
   212     0010                     	;# 
   213     0011                     	;# 
   214     0012                     	;# 
   215     0015                     	;# 
   216     0015                     	;# 
   217     0016                     	;# 
   218     0017                     	;# 
   219     0018                     	;# 
   220     0019                     	;# 
   221     001A                     	;# 
   222     001F                     	;# 
   223     0081                     	;# 
   224     0085                     	;# 
   225     0086                     	;# 
   226     008C                     	;# 
   227     008E                     	;# 
   228     0092                     	;# 
   229     0098                     	;# 
   230     0099                     	;# 
   231     009A                     	;# 
   232     009B                     	;# 
   233     009C                     	;# 
   234     009D                     	;# 
   235     009F                     	;# 
   236                           
   237                           	psect	idataEEDATA
   238     0000                     __pidataEEDATA:
   239     0000                     _eeprom_cgram_data:	
   240                           ;initializer for _eeprom_cgram_data
   241                           
   242     0000  0007               	db	7
   243     0001  0005               	db	5
   244     0002  000D               	db	13
   245     0003  0009               	db	9
   246     0004  001B               	db	27
   247     0005  001F               	db	31
   248     0006  001D               	db	29
   249     0007  0002               	db	2
   250     0008  001F               	db	31
   251     0009  0015               	db	21
   252     000A  000A               	db	10
   253     000B  0015               	db	21
   254     000C  000A               	db	10
   255     000D  001F               	db	31
   256     000E  0017               	db	23
   257     000F  0008               	db	8
   258     0010  001C               	db	28
   259     0011  000A               	db	10
   260     0012  0019               	db	25
   261     0013  000D               	db	13
   262     0014  001F               	db	31
   263     0015  001F               	db	31
   264     0016  001B               	db	27
   265     0017  0004               	db	4
   266     0018                     _eeprom_keys:	
   267                           ;initializer for _eeprom_keys
   268                           
   269     0018  0031               	db	49
   270     0019  0032               	db	50
   271     001A  0033               	db	51
   272     001B  0041               	db	65
   273     001C  0034               	db	52
   274     001D  0035               	db	53
   275     001E  0036               	db	54
   276     001F  0042               	db	66
   277     0020  0037               	db	55
   278     0021  0038               	db	56
   279     0022  0039               	db	57
   280     0023  0043               	db	67
   281     0024  002A               	db	42
   282     0025  0030               	db	48
   283     0026  0023               	db	35
   284     0027  0044               	db	68
   285     0028  0000               	db	0
   286     0029                     _tiles:	
   287                           ;initializer for _tiles
   288                           
   289     0029  0020               	db	32
   290     002A  0020               	db	32
   291     002B  0020               	db	32
   292     002C  0020               	db	32
   293     002D  0020               	db	32
   294     002E  0020               	db	32
   295     002F  0020               	db	32
   296     0030  0020               	db	32
   297     0031  0020               	db	32
   298     0032  0020               	db	32
   299     0033  0023               	db	35
   300     0034  0023               	db	35
   301     0035  0024               	db	36
   302     0036  0059               	db	89
   303     0037  0023               	db	35
   304     0038  0023               	db	35
   305     0005                     _PORTA	set	5
   306     0005                     _PORTAbits	set	5
   307     0012                     _T2CON	set	18
   308     0017                     _CCP1CON	set	23
   309     001F                     _CMCON	set	31
   310     0011                     _TMR2	set	17
   311     0001                     _TMR0	set	1
   312     0015                     _CCPR1L	set	21
   313     0006                     _PORTB	set	6
   314     000B                     _INTCON	set	11
   315     005A                     _T0IF	set	90
   316     009A                     _EEDATA	set	154
   317     009C                     _EECON1	set	156
   318     009B                     _EEADR	set	155
   319     009C                     _EECON1bits	set	156
   320     0092                     _PR2	set	146
   321     0081                     _OPTION_REG	set	129
   322     0086                     _TRISB	set	134
   323     0085                     _TRISA	set	133
   324     008E                     _PCONbits	set	142
   325                           
   326                           	psect	strings
   327     0236                     __pstrings:
   328     0236                     stringtab:
   329     0236                     __stringtab:
   330                           
   331                           ;	String table - string pointers are 1 byte each
   332     0236  1BFF               	btfsc	btemp+1,7
   333     0237  2A40               	ljmp	stringcode
   334     0238  1383               	bcf	3,7
   335     0239  187F               	btfsc	btemp+1,0
   336     023A  1783               	bsf	3,7
   337     023B  0800               	movf	0,w
   338     023C  0A84               	incf	4,f
   339     023D  1903               	skipnz
   340     023E  0AFF               	incf	btemp+1,f
   341     023F  0008               	return
   342     0240                     stringcode:
   343     0240                     stringdir:
   344     0240  3002               	movlw	high stringdir
   345     0241  008A               	movwf	10
   346     0242  0804               	movf	4,w
   347     0243  0A84               	incf	4,f
   348     0244  0782               	addwf	2,f
   349     0245                     __stringbase:
   350     0245  3400               	retlw	0
   351     0246                     __end_of__stringtab:
   352     0246                     STR_1:
   353     0246  3456               	retlw	86	;'V'
   354     0247  3461               	retlw	97	;'a'
   355     0248  346C               	retlw	108	;'l'
   356     0249  3461               	retlw	97	;'a'
   357     024A  3473               	retlw	115	;'s'
   358     024B  3473               	retlw	115	;'s'
   359     024C  347A               	retlw	122	;'z'
   360     024D  3420               	retlw	32	;' '
   361     024E  346A               	retlw	106	;'j'
   362     024F  3461               	retlw	97	;'a'
   363     0250  3474               	retlw	116	;'t'
   364     0251  3465               	retlw	101	;'e'
   365     0252  346B               	retlw	107	;'k'
   366     0253  346F               	retlw	111	;'o'
   367     0254  3474               	retlw	116	;'t'
   368     0255  3421               	retlw	33	;'!'
   369     0256  3400               	retlw	0
   370     0257  3400               	retlw	0
   371     0258                     STR_2:
   372     0258  3441               	retlw	65	;'A'
   373     0259  3420               	retlw	32	;' '
   374     025A  342F               	retlw	47	;'/'
   375     025B  3420               	retlw	32	;' '
   376     025C  3442               	retlw	66	;'B'
   377     025D  3400               	retlw	0
   378     025E  3400               	retlw	0
   379                           
   380                           	psect	cinit
   381     000F                     start_initialization:	
   382                           ; #config settings
   383                           
   384     000F                     __initialization:
   385                           
   386                           ; Clear objects allocated to BANK1
   387     000F  1383               	bcf	3,7	;select IRP bank0
   388     0010  30A0               	movlw	low __pbssBANK1
   389     0011  0084               	movwf	4
   390     0012  30B0               	movlw	low (__pbssBANK1+16)
   391     0013  23AA               	fcall	clear_ram0
   392                           
   393                           ; Clear objects allocated to BANK0
   394     0014  3020               	movlw	low __pbssBANK0
   395     0015  0084               	movwf	4
   396     0016  304D               	movlw	low (__pbssBANK0+45)
   397     0017  23AA               	fcall	clear_ram0
   398                           
   399                           ; Clear objects allocated to COMMON
   400     0018  01FD               	clrf	__pbssCOMMON& (0+127)
   401     0019                     end_of_initialization:	
   402                           ;End of C runtime variable initialization code
   403                           
   404     0019                     __end_of__initialization:
   405     0019  0183               	clrf	3
   406     001A  2987               	ljmp	_main	;jump to C main() function
   407                           
   408                           	psect	dataEEDATA
   409     0000                     __pdataEEDATA:
   410                           
   411                           	psect	bssCOMMON
   412     007D                     __pbssCOMMON:
   413     007D                     _beep_timer:
   414     007D                     	ds	1
   415                           
   416                           	psect	bssBANK0
   417     0020                     __pbssBANK0:
   418     0020                     _gameB_spd:
   419     0020                     	ds	2
   420     0022                     _LCD:
   421     0022                     	ds	2
   422     0024                     psrand@psrand_seed:
   423     0024                     	ds	1
   424     0025                     _gameB_truckpos:
   425     0025                     	ds	1
   426     0026                     _gameB_active:
   427     0026                     	ds	1
   428     0027                     _kbd_skip_t0_cyc:
   429     0027                     	ds	1
   430     0028                     _key_col_select:
   431     0028                     	ds	1
   432     0029                     _prev_key:
   433     0029                     	ds	1
   434     002A                     _key:
   435     002A                     	ds	1
   436     002B                     _gameB_track:
   437     002B                     	ds	34
   438                           
   439                           	psect	bssBANK1
   440     00A0                     __pbssBANK1:
   441     00A0                     _keys:
   442     00A0                     	ds	16
   443                           
   444                           	psect	inittext
   445     0359                     init_fetch0:	
   446                           ;	Called with low address in FSR and high address in W
   447                           
   448     0359  087E               	movf	126,w
   449     035A  008A               	movwf	10
   450     035B  087F               	movf	127,w
   451     035C  0082               	movwf	2
   452     035D                     init_ram0:	
   453                           ;Called with:
   454                           ;	high address of idata address in btemp 
   455                           ;	low address of idata address in btemp+1 
   456                           ;	low address of data in FSR
   457                           ;	high address + 1 of data in btemp-1
   458                           
   459     035D  2359               	fcall	init_fetch0
   460     035E  0080               	movwf	0
   461     035F  0A84               	incf	4,f
   462     0360  0804               	movf	4,w
   463     0361  067D               	xorwf	125,w
   464     0362  1903               	btfsc	3,2
   465     0363  3400               	retlw	0
   466     0364  0AFF               	incf	127,f
   467     0365  1903               	btfsc	3,2
   468     0366  0AFE               	incf	126,f
   469     0367  2B5D               	goto	init_ram0
   470                           
   471                           	psect	clrtext
   472     03AA                     clear_ram0:	
   473                           ;	Called with FSR containing the base address, and
   474                           ;	W with the last address+1
   475                           
   476     03AA  0064               	clrwdt	;clear the watchdog before getting into this loop
   477     03AB                     clrloop0:
   478     03AB  0180               	clrf	0	;clear RAM location pointed to by FSR
   479     03AC  0A84               	incf	4,f	;increment pointer
   480     03AD  0604               	xorwf	4,w	;XOR with final address
   481     03AE  1903               	btfsc	3,2	;have we reached the end yet?
   482     03AF  3400               	retlw	0	;all done for this memory range, return
   483     03B0  0604               	xorwf	4,w	;XOR again to restore value
   484     03B1  2BAB               	goto	clrloop0	;do the next byte
   485                           
   486                           	psect	cstackCOMMON
   487     0070                     __pcstackCOMMON:
   488     0070                     ?_init:
   489     0070                     ?_LCDInit:	
   490                           ; 1 bytes @ 0x0
   491                           
   492     0070                     ?_LCDDisplayControl:	
   493                           ; 1 bytes @ 0x0
   494                           
   495     0070                     ?_game_menu:	
   496                           ; 1 bytes @ 0x0
   497                           
   498     0070                     ?_LCDPutRS0Cmd:	
   499                           ; 1 bytes @ 0x0
   500                           
   501     0070                     ?_kbd_eval:	
   502                           ; 1 bytes @ 0x0
   503                           
   504     0070                     ?__beep:	
   505                           ; 1 bytes @ 0x0
   506                           
   507     0070                     ??__beep:	
   508                           ; 1 bytes @ 0x0
   509                           
   510     0070                     ?_beep_isr:	
   511                           ; 1 bytes @ 0x0
   512                           
   513     0070                     ??_beep_isr:	
   514                           ; 1 bytes @ 0x0
   515                           
   516     0070                     ?_gameB_isr:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0070                     ?_gameA:	
   520                           ; 1 bytes @ 0x0
   521                           
   522     0070                     ?_gameB:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0070                     ?_LCDPutChar:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0070                     ?_gameB_redraw:	
   529                           ; 1 bytes @ 0x0
   530                           
   531     0070                     ?_LCDWaitNotBusy:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0070                     ?_clearstr:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0070                     ?_main:	
   538                           ; 1 bytes @ 0x0
   539                           
   540     0070                     ?_isr:	
   541                           ; 1 bytes @ 0x0
   542                           
   543     0070                     ?__getkey:	
   544                           ; 1 bytes @ 0x0
   545                           
   546     0070                     ?_psrand:	
   547                           ; 1 bytes @ 0x0
   548                           
   549     0070                     ?_LCDPut:	
   550                           ; 1 bytes @ 0x0
   551                           
   552     0070                     ?_LCDEntryModeSet:	
   553                           ; 1 bytes @ 0x0
   554                           
   555     0070                     ?_LCDSetCGRAMAddress:	
   556                           ; 1 bytes @ 0x0
   557                           
   558     0070                     ?___eetoc:	
   559                           ; 1 bytes @ 0x0
   560                           
   561     0070                     ?i1_gameB_redraw:	
   562                           ; 1 bytes @ 0x0
   563                           
   564     0070                     ?i1_LCDPut:	
   565                           ; 1 bytes @ 0x0
   566                           
   567     0070                     ?i1_LCDWaitNotBusy:	
   568                           ; 1 bytes @ 0x0
   569                           
   570     0070                     ??i1_LCDWaitNotBusy:	
   571                           ; 1 bytes @ 0x0
   572                           
   573     0070                     ?i1_LCDPutRS0Cmd:	
   574                           ; 1 bytes @ 0x0
   575                           
   576     0070                     ?i1_LCDPutChar:	
   577                           ; 1 bytes @ 0x0
   578                           
   579     0070                     __beep@length:	
   580                           ; 1 bytes @ 0x0
   581                           
   582     0070                     kbd_eval@col:	
   583                           ; 1 bytes @ 0x0
   584                           
   585                           
   586                           ; 1 bytes @ 0x0
   587     0070                     	ds	1
   588     0071                     ??_kbd_eval:
   589     0071                     kbd_eval@key_ptr:	
   590                           ; 1 bytes @ 0x1
   591                           
   592     0071                     i1LCDWaitNotBusy@busy:	
   593                           ; 1 bytes @ 0x1
   594                           
   595                           
   596                           ; 1 bytes @ 0x1
   597     0071                     	ds	1
   598     0072                     ??i1_LCDPut:
   599     0072                     kbd_eval@row:	
   600                           ; 1 bytes @ 0x2
   601                           
   602                           
   603                           ; 1 bytes @ 0x2
   604     0072                     	ds	1
   605     0073                     i1LCDPut@data:
   606                           
   607                           ; 1 bytes @ 0x3
   608     0073                     	ds	1
   609     0074                     ??i1_LCDPutRS0Cmd:
   610     0074                     ??i1_LCDPutChar:	
   611                           ; 1 bytes @ 0x4
   612                           
   613     0074                     i1LCDPutRS0Cmd@cmd:	
   614                           ; 1 bytes @ 0x4
   615                           
   616     0074                     i1LCDPutChar@chr:	
   617                           ; 1 bytes @ 0x4
   618                           
   619                           
   620                           ; 1 bytes @ 0x4
   621     0074                     	ds	1
   622     0075                     ?i1_LCDSetCursorPos:
   623     0075                     ?i1_LCDWriteString:	
   624                           ; 1 bytes @ 0x5
   625                           
   626     0075                     i1LCDSetCursorPos@y:	
   627                           ; 1 bytes @ 0x5
   628                           
   629     0075                     i1LCDWriteString@str:	
   630                           ; 1 bytes @ 0x5
   631                           
   632                           
   633                           ; 2 bytes @ 0x5
   634     0075                     	ds	1
   635     0076                     ??i1_LCDSetCursorPos:
   636                           
   637                           ; 1 bytes @ 0x6
   638     0076                     	ds	1
   639     0077                     ??i1_LCDWriteString:
   640     0077                     i1LCDSetCursorPos@x:	
   641                           ; 1 bytes @ 0x7
   642                           
   643                           
   644                           ; 1 bytes @ 0x7
   645     0077                     	ds	1
   646     0078                     ??_gameB_isr:
   647     0078                     ??_isr:	
   648                           ; 1 bytes @ 0x8
   649                           
   650     0078                     ??i1_gameB_redraw:	
   651                           ; 1 bytes @ 0x8
   652                           
   653                           
   654                           ; 1 bytes @ 0x8
   655     0078                     	ds	5
   656                           
   657                           	psect	cstackBANK0
   658     004D                     __pcstackBANK0:
   659     004D                     isr@_col:
   660                           
   661                           ; 1 bytes @ 0x0
   662     004D                     	ds	1
   663     004E                     isr@_row:
   664                           
   665                           ; 1 bytes @ 0x1
   666     004E                     	ds	1
   667     004F                     isr@_key:
   668                           
   669                           ; 1 bytes @ 0x2
   670     004F                     	ds	1
   671     0050                     ??_init:
   672     0050                     ??_LCDWaitNotBusy:	
   673                           ; 1 bytes @ 0x3
   674                           
   675     0050                     ??_clearstr:	
   676                           ; 1 bytes @ 0x3
   677                           
   678     0050                     ??__getkey:	
   679                           ; 1 bytes @ 0x3
   680                           
   681     0050                     ??_psrand:	
   682                           ; 1 bytes @ 0x3
   683                           
   684     0050                     ?___eecpymem:	
   685                           ; 1 bytes @ 0x3
   686                           
   687     0050                     clearstr@str:	
   688                           ; 1 bytes @ 0x3
   689                           
   690     0050                     psrand@res:	
   691                           ; 1 bytes @ 0x3
   692                           
   693     0050                     ___eecpymem@from:	
   694                           ; 1 bytes @ 0x3
   695                           
   696                           
   697                           ; 1 bytes @ 0x3
   698     0050                     	ds	1
   699     0051                     LCDWaitNotBusy@busy:
   700     0051                     ___eecpymem@size:	
   701                           ; 1 bytes @ 0x4
   702                           
   703                           
   704                           ; 1 bytes @ 0x4
   705     0051                     	ds	1
   706     0052                     ??_LCDPut:
   707     0052                     ??___eecpymem:	
   708                           ; 1 bytes @ 0x5
   709                           
   710     0052                     ___eecpymem@cp:	
   711                           ; 1 bytes @ 0x5
   712                           
   713                           
   714                           ; 1 bytes @ 0x5
   715     0052                     	ds	1
   716     0053                     LCDPut@data:
   717     0053                     ___eecpymem@to:	
   718                           ; 1 bytes @ 0x6
   719                           
   720                           
   721                           ; 1 bytes @ 0x6
   722     0053                     	ds	1
   723     0054                     ??_LCDPutRS0Cmd:
   724     0054                     ??_LCDPutChar:	
   725                           ; 1 bytes @ 0x7
   726                           
   727     0054                     ??___eetoc:	
   728                           ; 1 bytes @ 0x7
   729                           
   730     0054                     LCDPutRS0Cmd@cmd:	
   731                           ; 1 bytes @ 0x7
   732                           
   733     0054                     LCDPutChar@chr:	
   734                           ; 1 bytes @ 0x7
   735                           
   736     0054                     ___eetoc@addr:	
   737                           ; 1 bytes @ 0x7
   738                           
   739                           
   740                           ; 1 bytes @ 0x7
   741     0054                     	ds	1
   742     0055                     ??_LCDInit:
   743     0055                     ??_LCDDisplayControl:	
   744                           ; 1 bytes @ 0x8
   745                           
   746     0055                     ?_LCDSetCursorPos:	
   747                           ; 1 bytes @ 0x8
   748                           
   749     0055                     ?_LCDWriteString:	
   750                           ; 1 bytes @ 0x8
   751                           
   752     0055                     ??_LCDEntryModeSet:	
   753                           ; 1 bytes @ 0x8
   754                           
   755     0055                     ??_LCDSetCGRAMAddress:	
   756                           ; 1 bytes @ 0x8
   757                           
   758     0055                     LCDSetCGRAMAddress@addr:	
   759                           ; 1 bytes @ 0x8
   760                           
   761     0055                     LCDSetCursorPos@y:	
   762                           ; 1 bytes @ 0x8
   763                           
   764     0055                     ___eetoc@data:	
   765                           ; 1 bytes @ 0x8
   766                           
   767     0055                     LCDWriteString@str:	
   768                           ; 1 bytes @ 0x8
   769                           
   770                           
   771                           ; 2 bytes @ 0x8
   772     0055                     	ds	1
   773     0056                     ?_LCDStoreCustom5x8Character:
   774     0056                     ??_LCDSetCursorPos:	
   775                           ; 1 bytes @ 0x9
   776                           
   777     0056                     LCDStoreCustom5x8Character@dataarr:	
   778                           ; 1 bytes @ 0x9
   779                           
   780                           
   781                           ; 1 bytes @ 0x9
   782     0056                     	ds	1
   783     0057                     ??_LCDStoreCustom5x8Character:
   784     0057                     ??_LCDWriteString:	
   785                           ; 1 bytes @ 0xA
   786                           
   787     0057                     LCDSetCursorPos@x:	
   788                           ; 1 bytes @ 0xA
   789                           
   790     0057                     LCDInit@i:	
   791                           ; 1 bytes @ 0xA
   792                           
   793                           
   794                           ; 1 bytes @ 0xA
   795     0057                     	ds	1
   796     0058                     ??_gameA:
   797     0058                     ??_gameB:	
   798                           ; 1 bytes @ 0xB
   799                           
   800     0058                     ??_gameB_redraw:	
   801                           ; 1 bytes @ 0xB
   802                           
   803     0058                     LCDStoreCustom5x8Character@code:	
   804                           ; 1 bytes @ 0xB
   805                           
   806     0058                     gameB@i:	
   807                           ; 1 bytes @ 0xB
   808                           
   809     0058                     gameA@second_line:	
   810                           ; 2 bytes @ 0xB
   811                           
   812                           
   813                           ; 17 bytes @ 0xB
   814     0058                     	ds	1
   815     0059                     LCDStoreCustom5x8Character@cnt:
   816                           
   817                           ; 1 bytes @ 0xC
   818     0059                     	ds	1
   819     005A                     gameB@j:
   820                           
   821                           ; 1 bytes @ 0xD
   822     005A                     	ds	1
   823     005B                     gameB@i_203:
   824                           
   825                           ; 1 bytes @ 0xE
   826     005B                     	ds	14
   827     0069                     gameA@xpos:
   828                           
   829                           ; 1 bytes @ 0x1C
   830     0069                     	ds	1
   831     006A                     gameA@ypos:
   832                           
   833                           ; 1 bytes @ 0x1D
   834     006A                     	ds	1
   835     006B                     ??_game_menu:
   836     006B                     ??_main:	
   837                           ; 1 bytes @ 0x1E
   838                           
   839     006B                     main@i:	
   840                           ; 1 bytes @ 0x1E
   841                           
   842                           
   843                           ; 1 bytes @ 0x1E
   844     006B                     	ds	1
   845                           
   846                           	psect	maintext
   847     0187                     __pmaintext:	
   848 ;;
   849 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   850 ;;
   851 ;; *************** function _main *****************
   852 ;; Defined at:
   853 ;;		line 80 in file "main.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  i               1   30[BANK0 ] unsigned char 
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   862 ;; Tracked objects:
   863 ;;		On entry : B00/0
   864 ;;		On exit  : 300/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   867 ;;      Params:         0       0       0       0
   868 ;;      Locals:         0       1       0       0
   869 ;;      Temps:          0       0       0       0
   870 ;;      Totals:         0       1       0       0
   871 ;;Total ram usage:        1 bytes
   872 ;; Hardware stack levels required when called: 14
   873 ;; This function calls:
   874 ;;		_LCDDisplayControl
   875 ;;		_LCDInit
   876 ;;		_LCDPutRS0Cmd
   877 ;;		_LCDStoreCustom5x8Character
   878 ;;		___eetoc
   879 ;;		_game_menu
   880 ;;		_init
   881 ;; This function is called by:
   882 ;;		Startup code after reset
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886     0187                     _main:	
   887                           ;psect for function _main
   888                           
   889                           
   890                           ;main.c: 83: init();
   891                           
   892                           ;incstack = 0
   893 ;; hardware stack exceeded
   894                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   895     0187  230A               	fcall	_init
   896                           
   897                           ;main.c: 85: for (uint8_t i = 15; i; i--) {
   898     0188  300F               	movlw	15
   899     0189  00EB               	movwf	main@i
   900     018A                     l1815:
   901     018A  086B               	movf	main@i,w
   902     018B  1903               	btfsc	3,2
   903     018C  299A               	goto	l1817
   904                           
   905                           ;main.c: 86: keys[i] = eeprom_keys[i];
   906     018D  086B               	movf	main@i,w
   907     018E  3E18               	addlw	low _eeprom_keys
   908     018F  2398               	fcall	___eetoc
   909     0190  00FF               	movwf	127
   910     0191  086B               	movf	main@i,w
   911     0192  3EA0               	addlw	(low (_keys| 0))& (0+255)
   912     0193  0084               	movwf	4
   913     0194  087F               	movf	127,w
   914     0195  1383               	bcf	3,7	;select IRP bank1
   915     0196  0080               	movwf	0
   916     0197  3001               	movlw	1
   917     0198  02EB               	subwf	main@i,f
   918     0199  298A               	goto	l1815
   919     019A                     l1817:
   920                           
   921                           ;main.c: 87: };main.c: 90: LCDInit();
   922     019A  20AA               	fcall	_LCDInit
   923                           
   924                           ;main.c: 93: LCDStoreCustom5x8Character(0, eeprom_cgram_data[0]);
   925     019B  3000               	movlw	(low _eeprom_cgram_data)& (0+255)
   926     019C  00D6               	movwf	LCDStoreCustom5x8Character@dataarr
   927     019D  3000               	movlw	0
   928     019E  22BC               	fcall	_LCDStoreCustom5x8Character
   929                           
   930                           ;main.c: 94: LCDStoreCustom5x8Character(1, eeprom_cgram_data[1]);
   931     019F  3008               	movlw	(low (_eeprom_cgram_data+8))& (0+255)
   932     01A0  00D6               	movwf	LCDStoreCustom5x8Character@dataarr
   933     01A1  3001               	movlw	1
   934     01A2  22BC               	fcall	_LCDStoreCustom5x8Character
   935                           
   936                           ;main.c: 95: LCDStoreCustom5x8Character(2, eeprom_cgram_data[2]);
   937     01A3  3010               	movlw	(low (_eeprom_cgram_data+16))& (0+255)
   938     01A4  00D6               	movwf	LCDStoreCustom5x8Character@dataarr
   939     01A5  3002               	movlw	2
   940     01A6  22BC               	fcall	_LCDStoreCustom5x8Character
   941                           
   942                           ;main.c: 97: LCD.DisplayControl |= (0b00000100);
   943     01A7  1523               	bsf	_LCD+1,2
   944                           
   945                           ;main.c: 98: LCDDisplayControl();
   946     01A8  23D6               	fcall	_LCDDisplayControl
   947                           
   948                           ;main.c: 101: INTCON = 0b10100000;
   949     01A9  30A0               	movlw	160
   950     01AA  008B               	movwf	11	;volatile
   951     01AB                     l1831:
   952                           
   953                           ;main.c: 105: game_menu();
   954     01AB  225F               	fcall	_game_menu
   955                           
   956                           ;main.c: 107: LCDPutRS0Cmd(0b00000001);
   957     01AC  3001               	movlw	1
   958     01AD  23C9               	fcall	_LCDPutRS0Cmd
   959                           
   960                           ;main.c: 108: LCD.DisplayControl &= (~(0b00000010)) & (~(0b00000001));
   961     01AE  30FC               	movlw	252
   962     01AF  00FF               	movwf	127
   963     01B0  087F               	movf	127,w
   964     01B1  05A3               	andwf	_LCD+1,f
   965                           
   966                           ;main.c: 109: LCDDisplayControl();
   967     01B2  23D6               	fcall	_LCDDisplayControl
   968     01B3  29AB               	goto	l1831
   969     01B4                     __end_of_main:
   970                           
   971                           	psect	text1
   972     030A                     __ptext1:	
   973 ;; *************** function _init *****************
   974 ;; Defined at:
   975 ;;		line 222 in file "main.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;		None
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, status,2
   984 ;; Tracked objects:
   985 ;;		On entry : B00/0
   986 ;;		On exit  : B00/0
   987 ;;		Unchanged: 800/0
   988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   989 ;;      Params:         0       0       0       0
   990 ;;      Locals:         0       0       0       0
   991 ;;      Temps:          0       0       0       0
   992 ;;      Totals:         0       0       0       0
   993 ;;Total ram usage:        0 bytes
   994 ;; Hardware stack levels used: 1
   995 ;; Hardware stack levels required when called: 7
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_main
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003     030A                     _init:	
  1004                           ;psect for function _init
  1005                           
  1006                           
  1007                           ;main.c: 225: PCONbits.OSCF = 1;
  1008                           
  1009                           ;incstack = 0
  1010                           ; Regs used in _init: [wreg+status,2]
  1011     030A  1683               	bsf	3,5	;RP0=1, select bank1
  1012     030B  158E               	bsf	14,3	;volatile
  1013                           
  1014                           ;main.c: 227: CMCON = 7;
  1015     030C  3007               	movlw	7
  1016     030D  1283               	bcf	3,5	;RP0=0, select bank0
  1017     030E  009F               	movwf	31	;volatile
  1018                           
  1019                           ;main.c: 230: TRISA = 0x0c;
  1020     030F  300C               	movlw	12
  1021     0310  1683               	bsf	3,5	;RP0=1, select bank1
  1022     0311  0085               	movwf	5	;volatile
  1023                           
  1024                           ;main.c: 234: TRISB = 0xf0;
  1025     0312  30F0               	movlw	240
  1026     0313  0086               	movwf	6	;volatile
  1027                           
  1028                           ;main.c: 238: OPTION_REG = 0x85;
  1029     0314  3085               	movlw	133
  1030     0315  0081               	movwf	1	;volatile
  1031                           
  1032                           ;main.c: 243: PR2 = 119;
  1033     0316  3077               	movlw	119
  1034     0317  0092               	movwf	18	;volatile
  1035                           
  1036                           ;main.c: 244: CCPR1L = 0;
  1037     0318  1283               	bcf	3,5	;RP0=0, select bank0
  1038     0319  0195               	clrf	21	;volatile
  1039                           
  1040                           ;main.c: 245: CCP1CON = 0x0C;
  1041     031A  300C               	movlw	12
  1042     031B  0097               	movwf	23	;volatile
  1043                           
  1044                           ;main.c: 246: T2CON = 0x07;
  1045     031C  3007               	movlw	7
  1046     031D  0092               	movwf	18	;volatile
  1047     031E  0008               	return
  1048     031F                     __end_of_init:
  1049                           
  1050                           	psect	text2
  1051     025F                     __ptext2:	
  1052 ;; *************** function _game_menu *****************
  1053 ;; Defined at:
  1054 ;;		line 252 in file "main.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 300/0
  1065 ;;		On exit  : 300/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1068 ;;      Params:         0       0       0       0
  1069 ;;      Locals:         0       0       0       0
  1070 ;;      Temps:          0       0       0       0
  1071 ;;      Totals:         0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels used: 1
  1074 ;; Hardware stack levels required when called: 13
  1075 ;; This function calls:
  1076 ;;		_LCDDisplayControl
  1077 ;;		_LCDPutRS0Cmd
  1078 ;;		_LCDSetCursorPos
  1079 ;;		_LCDWriteString
  1080 ;;		__getkey
  1081 ;;		_gameA
  1082 ;;		_gameB
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088     025F                     _game_menu:	
  1089                           ;psect for function _game_menu
  1090                           
  1091                           
  1092                           ;main.c: 254: LCDSetCursorPos(0, 0);
  1093                           
  1094                           ;incstack = 0
  1095 ;; hardware stack exceeded
  1096                           ; Regs used in _game_menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1097     025F  01D5               	clrf	LCDSetCursorPos@y
  1098     0260  3000               	movlw	0
  1099     0261  2368               	fcall	_LCDSetCursorPos
  1100                           
  1101                           ;main.c: 255: LCDWriteString("Valassz jatekot!\0");
  1102     0262  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1103     0263  00D5               	movwf	LCDWriteString@str
  1104     0264  3080               	movlw	128
  1105     0265  00D6               	movwf	LCDWriteString@str+1
  1106     0266  231F               	fcall	_LCDWriteString
  1107                           
  1108                           ;main.c: 256: LCDSetCursorPos(0, 1);
  1109     0267  01D5               	clrf	LCDSetCursorPos@y
  1110     0268  0AD5               	incf	LCDSetCursorPos@y,f
  1111     0269  3000               	movlw	0
  1112     026A  2368               	fcall	_LCDSetCursorPos
  1113                           
  1114                           ;main.c: 257: LCDWriteString("A / B\0");
  1115     026B  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1116     026C  00D5               	movwf	LCDWriteString@str
  1117     026D  3080               	movlw	128
  1118     026E  00D6               	movwf	LCDWriteString@str+1
  1119     026F  231F               	fcall	_LCDWriteString
  1120     0270  2A7B               	goto	l1753
  1121     0271                     l1741:
  1122                           
  1123                           ;main.c: 263: LCDPutRS0Cmd(0b00000001);
  1124     0271  3001               	movlw	1
  1125     0272  23C9               	fcall	_LCDPutRS0Cmd
  1126                           
  1127                           ;main.c: 264: LCD.DisplayControl |= (0b00000001);
  1128     0273  1423               	bsf	_LCD+1,0
  1129                           
  1130                           ;main.c: 265: LCDDisplayControl();
  1131     0274  23D6               	fcall	_LCDDisplayControl
  1132                           
  1133                           ;main.c: 267: gameA();
  1134     0275  20E9               	fcall	_gameA
  1135                           
  1136                           ;main.c: 268: break;
  1137     0276  0008               	return
  1138     0277                     l1747:
  1139                           
  1140                           ;main.c: 271: LCDPutRS0Cmd(0b00000001);
  1141     0277  3001               	movlw	1
  1142     0278  23C9               	fcall	_LCDPutRS0Cmd
  1143                           
  1144                           ;main.c: 273: gameB();
  1145     0279  201B               	fcall	_gameB
  1146                           
  1147                           ;main.c: 274: break;
  1148     027A  0008               	return
  1149     027B                     l1753:
  1150     027B  23B9               	fcall	__getkey
  1151                           
  1152                           ; Switch size 1, requested type "simple"
  1153                           ; Number of cases is 2, Range of values is 65 to 66
  1154                           ; switch strategies available:
  1155                           ; Name         Instructions Cycles
  1156                           ; simple_byte            7     4 (average)
  1157                           ; direct_byte           11     9 (fixed)
  1158                           ; jumptable            263     9 (fixed)
  1159                           ;	Chosen strategy is simple_byte
  1160     027C  3A41               	xorlw	65	; case 65
  1161     027D  1903               	skipnz
  1162     027E  2A71               	goto	l1741
  1163     027F  3A03               	xorlw	3	; case 66
  1164     0280  1903               	skipnz
  1165     0281  2A77               	goto	l1747
  1166     0282  2A7B               	goto	l1753
  1167     0283  0008               	return
  1168     0284                     __end_of_game_menu:
  1169                           
  1170                           	psect	text3
  1171     001B                     __ptext3:	
  1172 ;; *************** function _gameB *****************
  1173 ;; Defined at:
  1174 ;;		line 329 in file "main.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;		None
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  j               1   13[BANK0 ] unsigned char 
  1179 ;;  i               1   14[BANK0 ] unsigned char 
  1180 ;;  i               2   11[BANK0 ] unsigned int 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 300/0
  1187 ;;		On exit  : 300/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1190 ;;      Params:         0       0       0       0
  1191 ;;      Locals:         0       4       0       0
  1192 ;;      Temps:          0       0       0       0
  1193 ;;      Totals:         0       4       0       0
  1194 ;;Total ram usage:        4 bytes
  1195 ;; Hardware stack levels used: 1
  1196 ;; Hardware stack levels required when called: 12
  1197 ;; This function calls:
  1198 ;;		___eetoc
  1199 ;;		_clearstr
  1200 ;;		_gameB_redraw
  1201 ;;		_psrand
  1202 ;; This function is called by:
  1203 ;;		_game_menu
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207     001B                     _gameB:	
  1208                           ;psect for function _gameB
  1209                           
  1210                           
  1211                           ;main.c: 330: gameB_track[0][16] = 0;
  1212                           
  1213                           ;incstack = 0
  1214 ;; hardware stack exceeded
  1215                           ; Regs used in _gameB: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1216     001B  01BB               	clrf	_gameB_track+16
  1217                           
  1218                           ;main.c: 331: gameB_track[1][16] = 0;
  1219     001C  01CC               	clrf	_gameB_track+33
  1220                           
  1221                           ;main.c: 333: clearstr(gameB_track[0]);
  1222     001D  302B               	movlw	(low (_gameB_track| 0))& (0+255)
  1223     001E  2349               	fcall	_clearstr
  1224                           
  1225                           ;main.c: 334: clearstr(gameB_track[1]);
  1226     001F  303C               	movlw	(low ((_gameB_track| 0+17)))& (0+255)
  1227     0020  2349               	fcall	_clearstr
  1228                           
  1229                           ;main.c: 336: gameB_active = 1;
  1230     0021  01A6               	clrf	_gameB_active
  1231     0022  0AA6               	incf	_gameB_active,f
  1232                           
  1233                           ;main.c: 337: gameB_spd = 1000;
  1234     0023  30E8               	movlw	232
  1235     0024  00A0               	movwf	_gameB_spd
  1236     0025  3003               	movlw	3
  1237     0026  00A1               	movwf	_gameB_spd+1
  1238     0027                     l1649:	
  1239                           ;main.c: 341: while (gameB_active) {
  1240                           
  1241     0027  0826               	movf	_gameB_active,w
  1242     0028  1903               	btfsc	3,2
  1243     0029  0008               	return
  1244                           
  1245                           ;main.c: 342: for (uint16_t i = gameB_spd; i && gameB_active; i--) {
  1246     002A  0821               	movf	_gameB_spd+1,w
  1247     002B  00D9               	movwf	gameB@i+1
  1248     002C  0820               	movf	_gameB_spd,w
  1249     002D  00D8               	movwf	gameB@i
  1250     002E  2838               	goto	l1629
  1251     002F                     l1631:
  1252     002F  0826               	movf	_gameB_active,w
  1253     0030  1903               	btfsc	3,2
  1254     0031  283C               	goto	l172
  1255     0032  3001               	movlw	1
  1256     0033  02D8               	subwf	gameB@i,f
  1257     0034  3000               	movlw	0
  1258     0035  1C03               	skipc
  1259     0036  03D9               	decf	gameB@i+1,f
  1260     0037  02D9               	subwf	gameB@i+1,f
  1261     0038                     l1629:
  1262     0038  0858               	movf	gameB@i,w
  1263     0039  0459               	iorwf	gameB@i+1,w
  1264     003A  1D03               	btfss	3,2
  1265     003B  282F               	goto	l1631
  1266     003C                     l172:
  1267                           
  1268                           ;main.c: 343: };main.c: 346: for (uint8_t i = 1; i < 16; i++) {
  1269     003C  01DB               	clrf	gameB@i_203
  1270     003D  0ADB               	incf	gameB@i_203,f
  1271     003E                     l1637:
  1272                           
  1273                           ;main.c: 347: uint8_t j = i - 1;
  1274     003E  085B               	movf	gameB@i_203,w
  1275     003F  3EFF               	addlw	255
  1276     0040  00DA               	movwf	gameB@j
  1277                           
  1278                           ;main.c: 348: gameB_track[0][j] = gameB_track[0][i];
  1279     0041  085B               	movf	gameB@i_203,w
  1280     0042  3E2B               	addlw	(low (_gameB_track| 0))& (0+255)
  1281     0043  0084               	movwf	4
  1282     0044  1383               	bcf	3,7	;select IRP bank0
  1283     0045  0800               	movf	0,w
  1284     0046  00FF               	movwf	127
  1285     0047  085A               	movf	gameB@j,w
  1286     0048  3E2B               	addlw	(low (_gameB_track| 0))& (0+255)
  1287     0049  0084               	movwf	4
  1288     004A  087F               	movf	127,w
  1289     004B  0080               	movwf	0
  1290                           
  1291                           ;main.c: 349: gameB_track[1][j] = gameB_track[1][i];
  1292     004C  085B               	movf	gameB@i_203,w
  1293     004D  3E3C               	addlw	(low ((_gameB_track| 0+17)))& (0+255)
  1294     004E  0084               	movwf	4
  1295     004F  0800               	movf	0,w
  1296     0050  00FF               	movwf	127
  1297     0051  085A               	movf	gameB@j,w
  1298     0052  3E3C               	addlw	(low ((_gameB_track| 0+17)))& (0+255)
  1299     0053  0084               	movwf	4
  1300     0054  087F               	movf	127,w
  1301     0055  0080               	movwf	0
  1302     0056  3001               	movlw	1
  1303     0057  00FF               	movwf	127
  1304     0058  087F               	movf	127,w
  1305     0059  07DB               	addwf	gameB@i_203,f
  1306     005A  3010               	movlw	16
  1307     005B  025B               	subwf	gameB@i_203,w
  1308     005C  1C03               	skipc
  1309     005D  283E               	goto	l1637
  1310                           
  1311                           ;main.c: 350: };main.c: 356: gameB_track[0][15] = tiles[psrand()];
  1312     005E  238F               	fcall	_psrand
  1313     005F  3E29               	addlw	low _tiles
  1314     0060  2398               	fcall	___eetoc
  1315     0061  00BA               	movwf	_gameB_track+15
  1316                           
  1317                           ;main.c: 357: gameB_track[1][15] = tiles[psrand()];
  1318     0062  238F               	fcall	_psrand
  1319     0063  3E29               	addlw	low _tiles
  1320     0064  2398               	fcall	___eetoc
  1321     0065  00CB               	movwf	_gameB_track+32
  1322                           
  1323                           ;main.c: 359: gameB_redraw();
  1324     0066  2284               	fcall	_gameB_redraw
  1325     0067  2827               	goto	l1649
  1326     0068                     __end_of_gameB:
  1327                           
  1328                           	psect	text4
  1329     038F                     __ptext4:	
  1330 ;; *************** function _psrand *****************
  1331 ;; Defined at:
  1332 ;;		line 209 in file "main.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;  res             1    3[BANK0 ] unsigned char 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      unsigned char 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0
  1341 ;; Tracked objects:
  1342 ;;		On entry : 300/0
  1343 ;;		On exit  : 300/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1346 ;;      Params:         0       0       0       0
  1347 ;;      Locals:         0       1       0       0
  1348 ;;      Temps:          0       0       0       0
  1349 ;;      Totals:         0       1       0       0
  1350 ;;Total ram usage:        1 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 7
  1353 ;; This function calls:
  1354 ;;		Nothing
  1355 ;; This function is called by:
  1356 ;;		_gameB
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360     038F                     _psrand:	
  1361                           ;psect for function _psrand
  1362                           
  1363                           
  1364                           ;main.c: 211: static uint8_t psrand_seed;;main.c: 212: uint8_t res = (TMR0 ^ TMR2 ^ psra
      +                          nd_seed) & 0x0f;
  1365                           
  1366                           ;incstack = 0
  1367 ;; hardware stack exceeded
  1368                           ; Regs used in _psrand: [wreg+status,2+status,0]
  1369     038F  0801               	movf	1,w	;volatile
  1370     0390  0611               	xorwf	17,w	;volatile
  1371     0391  0624               	xorwf	psrand@psrand_seed,w
  1372     0392  390F               	andlw	15
  1373     0393  00D0               	movwf	psrand@res
  1374                           
  1375                           ;main.c: 214: psrand_seed = res;
  1376     0394  0850               	movf	psrand@res,w
  1377     0395  00A4               	movwf	psrand@psrand_seed
  1378                           
  1379                           ;main.c: 216: return res;
  1380     0396  0850               	movf	psrand@res,w
  1381     0397  0008               	return
  1382     0398                     __end_of_psrand:
  1383                           
  1384                           	psect	text5
  1385     0284                     __ptext5:	
  1386 ;; *************** function _gameB_redraw *****************
  1387 ;; Defined at:
  1388 ;;		line 387 in file "main.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;		None
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 300/0
  1399 ;;		On exit  : 300/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1402 ;;      Params:         0       0       0       0
  1403 ;;      Locals:         0       0       0       0
  1404 ;;      Temps:          0       0       0       0
  1405 ;;      Totals:         0       0       0       0
  1406 ;;Total ram usage:        0 bytes
  1407 ;; Hardware stack levels used: 1
  1408 ;; Hardware stack levels required when called: 11
  1409 ;; This function calls:
  1410 ;;		_LCDPutChar
  1411 ;;		_LCDSetCursorPos
  1412 ;;		_LCDWriteString
  1413 ;; This function is called by:
  1414 ;;		_gameB
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418     0284                     _gameB_redraw:	
  1419                           ;psect for function _gameB_redraw
  1420                           
  1421                           
  1422                           ;main.c: 388: LCDSetCursorPos(0, 0);
  1423                           
  1424                           ;incstack = 0
  1425 ;; hardware stack exceeded
  1426                           ; Regs used in _gameB_redraw: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1427     0284  01D5               	clrf	LCDSetCursorPos@y
  1428     0285  3000               	movlw	0
  1429     0286  2368               	fcall	_LCDSetCursorPos
  1430                           
  1431                           ;main.c: 389: LCDWriteString(gameB_track[0]);
  1432     0287  302B               	movlw	(low (_gameB_track| 0))& (0+255)
  1433     0288  00D5               	movwf	LCDWriteString@str
  1434     0289  3000               	movlw	0
  1435     028A  00D6               	movwf	LCDWriteString@str+1
  1436     028B  231F               	fcall	_LCDWriteString
  1437                           
  1438                           ;main.c: 390: LCDSetCursorPos(0, 1);
  1439     028C  01D5               	clrf	LCDSetCursorPos@y
  1440     028D  0AD5               	incf	LCDSetCursorPos@y,f
  1441     028E  3000               	movlw	0
  1442     028F  2368               	fcall	_LCDSetCursorPos
  1443                           
  1444                           ;main.c: 391: LCDWriteString(gameB_track[1]);
  1445     0290  303C               	movlw	(low ((_gameB_track| 0+17)))& (0+255)
  1446     0291  00D5               	movwf	LCDWriteString@str
  1447     0292  3000               	movlw	0
  1448     0293  00D6               	movwf	LCDWriteString@str+1
  1449     0294  231F               	fcall	_LCDWriteString
  1450                           
  1451                           ;main.c: 393: LCDSetCursorPos(0, gameB_truckpos);
  1452     0295  0825               	movf	_gameB_truckpos,w
  1453     0296  00D5               	movwf	LCDSetCursorPos@y
  1454     0297  3000               	movlw	0
  1455     0298  2368               	fcall	_LCDSetCursorPos
  1456                           
  1457                           ;main.c: 394: LCDPutChar(0);
  1458     0299  3000               	movlw	0
  1459     029A  23C4               	fcall	_LCDPutChar
  1460                           
  1461                           ;main.c: 395: LCDPutChar(1);
  1462     029B  3001               	movlw	1
  1463     029C  23C4               	fcall	_LCDPutChar
  1464                           
  1465                           ;main.c: 396: LCDPutChar(2);
  1466     029D  3002               	movlw	2
  1467     029E  23C4               	fcall	_LCDPutChar
  1468     029F  0008               	return
  1469     02A0                     __end_of_gameB_redraw:
  1470                           
  1471                           	psect	text6
  1472     00E9                     __ptext6:	
  1473 ;; *************** function _gameA *****************
  1474 ;; Defined at:
  1475 ;;		line 286 in file "main.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  second_line    17   11[BANK0 ] unsigned char [17]
  1480 ;;  ypos            1   29[BANK0 ] unsigned char 
  1481 ;;  xpos            1   28[BANK0 ] unsigned char 
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 300/0
  1488 ;;		On exit  : 300/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1491 ;;      Params:         0       0       0       0
  1492 ;;      Locals:         0      19       0       0
  1493 ;;      Temps:          0       0       0       0
  1494 ;;      Totals:         0      19       0       0
  1495 ;;Total ram usage:       19 bytes
  1496 ;; Hardware stack levels used: 1
  1497 ;; Hardware stack levels required when called: 11
  1498 ;; This function calls:
  1499 ;;		_LCDPutChar
  1500 ;;		_LCDPutRS0Cmd
  1501 ;;		_LCDSetCursorPos
  1502 ;;		_LCDWriteString
  1503 ;;		__getkey
  1504 ;;		_clearstr
  1505 ;; This function is called by:
  1506 ;;		_game_menu
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510     00E9                     _gameA:	
  1511                           ;psect for function _gameA
  1512                           
  1513                           
  1514                           ;main.c: 287: uint8_t xpos = 0, ypos = 0;
  1515                           
  1516                           ;incstack = 0
  1517 ;; hardware stack exceeded
  1518                           ; Regs used in _gameA: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1519     00E9  01E9               	clrf	gameA@xpos
  1520     00EA  01EA               	clrf	gameA@ypos
  1521                           
  1522                           ;main.c: 288: char second_line[16 + 1];;main.c: 289: second_line[16] = 0;
  1523     00EB  01E8               	clrf	gameA@second_line+16
  1524     00EC  291E               	goto	l1613
  1525     00ED                     l1591:
  1526                           
  1527                           ;main.c: 298: xpos = 0;
  1528     00ED  01E9               	clrf	gameA@xpos
  1529                           
  1530                           ;main.c: 299: if (!ypos) {
  1531     00EE  086A               	movf	gameA@ypos,w
  1532     00EF  1D03               	btfss	3,2
  1533     00F0  28FA               	goto	l1597
  1534                           
  1535                           ;main.c: 300: LCDSetCursorPos(0, ++ypos);
  1536     00F1  3001               	movlw	1
  1537     00F2  00FF               	movwf	127
  1538     00F3  087F               	movf	127,w
  1539     00F4  07EA               	addwf	gameA@ypos,f
  1540     00F5  086A               	movf	gameA@ypos,w
  1541     00F6  00D5               	movwf	LCDSetCursorPos@y
  1542     00F7  3000               	movlw	0
  1543     00F8  2368               	fcall	_LCDSetCursorPos
  1544                           
  1545                           ;main.c: 301: } else {
  1546     00F9  291E               	goto	l1613
  1547     00FA                     l1597:
  1548                           
  1549                           ;main.c: 302: LCDPutRS0Cmd(0b00000001);
  1550     00FA  3001               	movlw	1
  1551     00FB  23C9               	fcall	_LCDPutRS0Cmd
  1552                           
  1553                           ;main.c: 303: LCDSetCursorPos(0, 0);
  1554     00FC  01D5               	clrf	LCDSetCursorPos@y
  1555     00FD  3000               	movlw	0
  1556     00FE  2368               	fcall	_LCDSetCursorPos
  1557                           
  1558                           ;main.c: 304: LCDWriteString(second_line);
  1559     00FF  3058               	movlw	(low (gameA@second_line| 0))& (0+255)
  1560     0100  00D5               	movwf	LCDWriteString@str
  1561     0101  3000               	movlw	0
  1562     0102  00D6               	movwf	LCDWriteString@str+1
  1563     0103  231F               	fcall	_LCDWriteString
  1564                           
  1565                           ;main.c: 305: LCDSetCursorPos(0, 1);
  1566     0104  01D5               	clrf	LCDSetCursorPos@y
  1567     0105  0AD5               	incf	LCDSetCursorPos@y,f
  1568     0106  3000               	movlw	0
  1569     0107  2368               	fcall	_LCDSetCursorPos
  1570                           
  1571                           ;main.c: 307: clearstr(second_line);
  1572     0108  3058               	movlw	(low (gameA@second_line| 0))& (0+255)
  1573     0109  2349               	fcall	_clearstr
  1574     010A  291E               	goto	l1613
  1575     010B                     l1603:
  1576                           
  1577                           ;main.c: 311: if (xpos < (16 - 1)) {
  1578     010B  300F               	movlw	15
  1579     010C  0269               	subwf	gameA@xpos,w
  1580     010D  1803               	skipnc
  1581     010E  291E               	goto	l1613
  1582                           
  1583                           ;main.c: 312: LCDPutChar(key);
  1584     010F  082A               	movf	_key,w
  1585     0110  23C4               	fcall	_LCDPutChar
  1586                           
  1587                           ;main.c: 314: if (ypos) {
  1588     0111  086A               	movf	gameA@ypos,w
  1589     0112  1903               	btfsc	3,2
  1590     0113  291A               	goto	l1611
  1591                           
  1592                           ;main.c: 315: second_line[xpos] = key;
  1593     0114  0869               	movf	gameA@xpos,w
  1594     0115  3E58               	addlw	(low (gameA@second_line| 0))& (0+255)
  1595     0116  0084               	movwf	4
  1596     0117  082A               	movf	_key,w
  1597     0118  1383               	bcf	3,7	;select IRP bank0
  1598     0119  0080               	movwf	0
  1599     011A                     l1611:
  1600                           
  1601                           ;main.c: 316: };main.c: 318: xpos++;
  1602     011A  3001               	movlw	1
  1603     011B  00FF               	movwf	127
  1604     011C  087F               	movf	127,w
  1605     011D  07E9               	addwf	gameA@xpos,f
  1606     011E                     l1613:
  1607     011E  23B9               	fcall	__getkey
  1608                           
  1609                           ; Switch size 1, requested type "simple"
  1610                           ; Number of cases is 2, Range of values is 35 to 42
  1611                           ; switch strategies available:
  1612                           ; Name         Instructions Cycles
  1613                           ; simple_byte            7     4 (average)
  1614                           ; direct_byte           17     9 (fixed)
  1615                           ; jumptable            263     9 (fixed)
  1616                           ;	Chosen strategy is simple_byte
  1617     011F  3A23               	xorlw	35	; case 35
  1618     0120  1903               	skipnz
  1619     0121  28ED               	goto	l1591
  1620     0122  3A09               	xorlw	9	; case 42
  1621     0123  1903               	skipnz
  1622     0124  2926               	goto	l154
  1623     0125  290B               	goto	l1603
  1624     0126                     l154:
  1625     0126  0008               	return
  1626     0127                     __end_of_gameA:
  1627                           
  1628                           	psect	text7
  1629     0349                     __ptext7:	
  1630 ;; *************** function _clearstr *****************
  1631 ;; Defined at:
  1632 ;;		line 70 in file "main.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;  str             1    wreg     PTR unsigned char 
  1635 ;;		 -> gameB_track(34), gameA@second_line(17), 
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;  str             1    3[BANK0 ] PTR unsigned char 
  1638 ;;		 -> gameB_track(34), gameA@second_line(17), 
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1643 ;; Tracked objects:
  1644 ;;		On entry : 300/0
  1645 ;;		On exit  : B00/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1648 ;;      Params:         0       0       0       0
  1649 ;;      Locals:         0       1       0       0
  1650 ;;      Temps:          0       0       0       0
  1651 ;;      Totals:         0       1       0       0
  1652 ;;Total ram usage:        1 bytes
  1653 ;; Hardware stack levels used: 1
  1654 ;; Hardware stack levels required when called: 7
  1655 ;; This function calls:
  1656 ;;		Nothing
  1657 ;; This function is called by:
  1658 ;;		_gameA
  1659 ;;		_gameB
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663     0349                     _clearstr:	
  1664                           ;psect for function _clearstr
  1665                           
  1666                           
  1667                           ;incstack = 0
  1668 ;; hardware stack exceeded
  1669                           ; Regs used in _clearstr: [wreg-fsr0h+status,2+status,0+btemp+1]
  1670                           ;clearstr@str stored from wreg
  1671     0349  00D0               	movwf	clearstr@str
  1672     034A                     l1539:	
  1673                           ;main.c: 71: while (*str) {
  1674                           
  1675     034A  0850               	movf	clearstr@str,w
  1676     034B  0084               	movwf	4
  1677     034C  1383               	bcf	3,7	;select IRP bank0
  1678     034D  0800               	movf	0,w
  1679     034E  1903               	btfsc	3,2
  1680     034F  0008               	return
  1681                           
  1682                           ;main.c: 72: *str = ' ';
  1683     0350  0850               	movf	clearstr@str,w
  1684     0351  0084               	movwf	4
  1685     0352  3020               	movlw	32
  1686     0353  0080               	movwf	0
  1687                           
  1688                           ;main.c: 73: str++;
  1689     0354  3001               	movlw	1
  1690     0355  00FF               	movwf	127
  1691     0356  087F               	movf	127,w
  1692     0357  07D0               	addwf	clearstr@str,f
  1693     0358  2B4A               	goto	l1539
  1694     0359                     __end_of_clearstr:
  1695                           
  1696                           	psect	text8
  1697     03B9                     __ptext8:	
  1698 ;; *************** function __getkey *****************
  1699 ;; Defined at:
  1700 ;;		line 196 in file "main.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      unsigned char 
  1707 ;; Registers used:
  1708 ;;		wreg, status,2, status,0
  1709 ;; Tracked objects:
  1710 ;;		On entry : 300/0
  1711 ;;		On exit  : 300/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1714 ;;      Params:         0       0       0       0
  1715 ;;      Locals:         0       0       0       0
  1716 ;;      Temps:          0       0       0       0
  1717 ;;      Totals:         0       0       0       0
  1718 ;;Total ram usage:        0 bytes
  1719 ;; Hardware stack levels used: 1
  1720 ;; Hardware stack levels required when called: 7
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_game_menu
  1725 ;;		_gameA
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729     03B9                     __getkey:	
  1730                           ;psect for function __getkey
  1731                           
  1732                           
  1733                           ;main.c: 197: key = '\0';
  1734                           
  1735                           ;incstack = 0
  1736 ;; hardware stack exceeded
  1737                           ; Regs used in __getkey: [wreg+status,2+status,0]
  1738     03B9  01AA               	clrf	_key
  1739     03BA                     l1543:	
  1740                           ;main.c: 199: while (!key) { }
  1741                           
  1742     03BA  082A               	movf	_key,w
  1743     03BB  1903               	btfsc	3,2
  1744     03BC  2BBA               	goto	l1543
  1745                           
  1746                           ;main.c: 201: return key;
  1747     03BD  082A               	movf	_key,w
  1748     03BE  0008               	return
  1749     03BF                     __end_of__getkey:
  1750                           
  1751                           	psect	text9
  1752     031F                     __ptext9:	
  1753 ;; *************** function _LCDWriteString *****************
  1754 ;; Defined at:
  1755 ;;		line 162 in file "lcd_hd44780.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;  str             2    8[BANK0 ] PTR const unsigned char 
  1758 ;;		 -> gameB_track(34), gameA@second_line(17), STR_2(7), STR_1(18), 
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1765 ;; Tracked objects:
  1766 ;;		On entry : 300/0
  1767 ;;		On exit  : 300/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1770 ;;      Params:         0       2       0       0
  1771 ;;      Locals:         0       0       0       0
  1772 ;;      Temps:          0       0       0       0
  1773 ;;      Totals:         0       2       0       0
  1774 ;;Total ram usage:        2 bytes
  1775 ;; Hardware stack levels used: 1
  1776 ;; Hardware stack levels required when called: 10
  1777 ;; This function calls:
  1778 ;;		_LCDPutChar
  1779 ;; This function is called by:
  1780 ;;		_game_menu
  1781 ;;		_gameA
  1782 ;;		_gameB_redraw
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786     031F                     _LCDWriteString:	
  1787                           ;psect for function _LCDWriteString
  1788                           
  1789     031F                     l1507:	
  1790                           ;lcd_hd44780.c: 163: while (*str) {
  1791                           
  1792                           ;incstack = 0
  1793 ;; hardware stack exceeded
  1794                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1795                           
  1796     031F  0856               	movf	LCDWriteString@str+1,w
  1797     0320  00FF               	movwf	127
  1798     0321  0855               	movf	LCDWriteString@str,w
  1799     0322  0084               	movwf	4
  1800     0323  2236               	fcall	stringtab
  1801     0324  3A00               	xorlw	0
  1802     0325  1903               	btfsc	3,2
  1803     0326  0008               	return
  1804                           
  1805                           ;lcd_hd44780.c: 164: LCDPutChar(*str++);
  1806     0327  0856               	movf	LCDWriteString@str+1,w
  1807     0328  00FF               	movwf	127
  1808     0329  0855               	movf	LCDWriteString@str,w
  1809     032A  0084               	movwf	4
  1810     032B  2236               	fcall	stringtab
  1811     032C  23C4               	fcall	_LCDPutChar
  1812     032D  3001               	movlw	1
  1813     032E  07D5               	addwf	LCDWriteString@str,f
  1814     032F  1803               	skipnc
  1815     0330  0AD6               	incf	LCDWriteString@str+1,f
  1816     0331  3000               	movlw	0
  1817     0332  07D6               	addwf	LCDWriteString@str+1,f
  1818     0333  2B1F               	goto	l1507
  1819     0334                     __end_of_LCDWriteString:
  1820                           
  1821                           	psect	text10
  1822     0368                     __ptext10:	
  1823 ;; *************** function _LCDSetCursorPos *****************
  1824 ;; Defined at:
  1825 ;;		line 153 in file "lcd_hd44780.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;  x               1    wreg     unsigned char 
  1828 ;;  y               1    8[BANK0 ] unsigned char 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  x               1   10[BANK0 ] unsigned char 
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 300/0
  1837 ;;		On exit  : 300/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1840 ;;      Params:         0       1       0       0
  1841 ;;      Locals:         0       1       0       0
  1842 ;;      Temps:          0       1       0       0
  1843 ;;      Totals:         0       3       0       0
  1844 ;;Total ram usage:        3 bytes
  1845 ;; Hardware stack levels used: 1
  1846 ;; Hardware stack levels required when called: 10
  1847 ;; This function calls:
  1848 ;;		_LCDPutRS0Cmd
  1849 ;; This function is called by:
  1850 ;;		_game_menu
  1851 ;;		_gameA
  1852 ;;		_gameB_redraw
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856     0368                     _LCDSetCursorPos:	
  1857                           ;psect for function _LCDSetCursorPos
  1858                           
  1859                           
  1860                           ;incstack = 0
  1861 ;; hardware stack exceeded
  1862                           ; Regs used in _LCDSetCursorPos: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1863                           ;LCDSetCursorPos@x stored from wreg
  1864     0368  00D7               	movwf	LCDSetCursorPos@x
  1865                           
  1866                           ;lcd_hd44780.c: 154: LCDPutRS0Cmd(0b10000000 | (uint8_t) y * 0x40 + x);
  1867     0369  0855               	movf	LCDSetCursorPos@y,w
  1868     036A  00D6               	movwf	??_LCDSetCursorPos
  1869     036B  3006               	movlw	6
  1870     036C                     u425:
  1871     036C  1003               	clrc
  1872     036D  0DD6               	rlf	??_LCDSetCursorPos,f
  1873     036E  3EFF               	addlw	-1
  1874     036F  1D03               	skipz
  1875     0370  2B6C               	goto	u425
  1876     0371  0857               	movf	LCDSetCursorPos@x,w
  1877     0372  0756               	addwf	??_LCDSetCursorPos,w
  1878     0373  3880               	iorlw	128
  1879     0374  23C9               	fcall	_LCDPutRS0Cmd
  1880     0375  0008               	return
  1881     0376                     __end_of_LCDSetCursorPos:
  1882                           
  1883                           	psect	text11
  1884     02BC                     __ptext11:	
  1885 ;; *************** function _LCDStoreCustom5x8Character *****************
  1886 ;; Defined at:
  1887 ;;		line 184 in file "lcd_hd44780.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  code            1    wreg     unsigned char 
  1890 ;;  dataarr         1    9[BANK0 ] PTR const unsigned char 
  1891 ;;		 -> eeprom_cgram_data(24), 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  code            1   11[BANK0 ] unsigned char 
  1894 ;;  cnt             1   12[BANK0 ] unsigned char 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      void 
  1897 ;; Registers used:
  1898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1899 ;; Tracked objects:
  1900 ;;		On entry : 300/0
  1901 ;;		On exit  : 300/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1904 ;;      Params:         0       1       0       0
  1905 ;;      Locals:         0       2       0       0
  1906 ;;      Temps:          0       1       0       0
  1907 ;;      Totals:         0       4       0       0
  1908 ;;Total ram usage:        4 bytes
  1909 ;; Hardware stack levels used: 1
  1910 ;; Hardware stack levels required when called: 11
  1911 ;; This function calls:
  1912 ;;		_LCDPutChar
  1913 ;;		_LCDSetCGRAMAddress
  1914 ;;		___eetoc
  1915 ;; This function is called by:
  1916 ;;		_main
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920     02BC                     _LCDStoreCustom5x8Character:	
  1921                           ;psect for function _LCDStoreCustom5x8Character
  1922                           
  1923                           
  1924                           ;incstack = 0
  1925 ;; hardware stack exceeded
  1926                           ; Regs used in _LCDStoreCustom5x8Character: [wreg-fsr0h+status,2+status,0+btemp+1+pclath
      +                          +cstack]
  1927                           ;LCDStoreCustom5x8Character@code stored from wreg
  1928     02BC  00D8               	movwf	LCDStoreCustom5x8Character@code
  1929                           
  1930                           ;lcd_hd44780.c: 185: LCDSetCGRAMAddress(code << 3);
  1931     02BD  0858               	movf	LCDStoreCustom5x8Character@code,w
  1932     02BE  00D7               	movwf	??_LCDStoreCustom5x8Character
  1933     02BF  3002               	movlw	2
  1934     02C0                     u595:
  1935     02C0  1003               	clrc
  1936     02C1  0DD7               	rlf	??_LCDStoreCustom5x8Character,f
  1937     02C2  3EFF               	addlw	-1
  1938     02C3  1D03               	skipz
  1939     02C4  2AC0               	goto	u595
  1940     02C5  1003               	clrc
  1941     02C6  0D57               	rlf	??_LCDStoreCustom5x8Character,w
  1942     02C7  23BF               	fcall	_LCDSetCGRAMAddress
  1943                           
  1944                           ;lcd_hd44780.c: 187: uint8_t cnt = 8;
  1945     02C8  3008               	movlw	8
  1946     02C9  00D9               	movwf	LCDStoreCustom5x8Character@cnt
  1947     02CA                     l1733:	
  1948                           ;lcd_hd44780.c: 188: while (cnt) {
  1949                           
  1950     02CA  0859               	movf	LCDStoreCustom5x8Character@cnt,w
  1951     02CB  1903               	btfsc	3,2
  1952     02CC  0008               	return
  1953                           
  1954                           ;lcd_hd44780.c: 189: cnt--;
  1955     02CD  3001               	movlw	1
  1956     02CE  02D9               	subwf	LCDStoreCustom5x8Character@cnt,f
  1957                           
  1958                           ;lcd_hd44780.c: 190: LCDPutChar(*dataarr++);
  1959     02CF  0856               	movf	LCDStoreCustom5x8Character@dataarr,w
  1960     02D0  2398               	fcall	___eetoc
  1961     02D1  23C4               	fcall	_LCDPutChar
  1962     02D2  3001               	movlw	1
  1963     02D3  00FF               	movwf	127
  1964     02D4  087F               	movf	127,w
  1965     02D5  07D6               	addwf	LCDStoreCustom5x8Character@dataarr,f
  1966     02D6  2ACA               	goto	l1733
  1967     02D7                     __end_of_LCDStoreCustom5x8Character:
  1968                           
  1969                           	psect	text12
  1970     0398                     __ptext12:	
  1971 ;; *************** function ___eetoc *****************
  1972 ;; Defined at:
  1973 ;;		line 104 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\pic\__eeprom.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  addr            1    wreg     PTR eeprom void 
  1976 ;;		 -> tiles(16), eeprom_cgram_data(24), eeprom_keys(17), 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  addr            1    7[BANK0 ] PTR eeprom void 
  1979 ;;		 -> tiles(16), eeprom_cgram_data(24), eeprom_keys(17), 
  1980 ;;  data            1    8[BANK0 ] unsigned char 
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  1    wreg      unsigned char 
  1983 ;; Registers used:
  1984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 300/0
  1987 ;;		On exit  : 300/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1990 ;;      Params:         0       0       0       0
  1991 ;;      Locals:         0       2       0       0
  1992 ;;      Temps:          0       0       0       0
  1993 ;;      Totals:         0       2       0       0
  1994 ;;Total ram usage:        2 bytes
  1995 ;; Hardware stack levels used: 1
  1996 ;; Hardware stack levels required when called: 8
  1997 ;; This function calls:
  1998 ;;		___eecpymem
  1999 ;; This function is called by:
  2000 ;;		_main
  2001 ;;		_gameB
  2002 ;;		_LCDStoreCustom5x8Character
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006     0398                     ___eetoc:	
  2007                           ;psect for function ___eetoc
  2008                           
  2009                           
  2010                           ;incstack = 0
  2011 ;; hardware stack exceeded
  2012                           ; Regs used in ___eetoc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2013                           ;___eetoc@addr stored from wreg
  2014     0398  00D4               	movwf	___eetoc@addr
  2015                           
  2016                           ;__eeprom.c: 106: unsigned char data;;__eeprom.c: 107: __eecpymem((unsigned char *) &dat
      +                          a,addr,1);
  2017     0399  0854               	movf	___eetoc@addr,w
  2018     039A  00D0               	movwf	___eecpymem@from
  2019     039B  01D1               	clrf	___eecpymem@size
  2020     039C  0AD1               	incf	___eecpymem@size,f
  2021     039D  3055               	movlw	(low (___eetoc@data| 0))& (0+255)
  2022     039E  220C               	fcall	___eecpymem
  2023                           
  2024                           ;__eeprom.c: 108: return data;
  2025     039F  0855               	movf	___eetoc@data,w
  2026     03A0  0008               	return
  2027     03A1                     __end_of___eetoc:
  2028                           
  2029                           	psect	text13
  2030     020C                     __ptext13:	
  2031 ;; *************** function ___eecpymem *****************
  2032 ;; Defined at:
  2033 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\pic\__eeprom.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  to              1    wreg     PTR volatile unsigned ch
  2036 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  2037 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  2038 ;;  from            1    3[BANK0 ] PTR eeprom unsigned char
  2039 ;;		 -> tiles(16), eeprom_cgram_data(24), eeprom_keys(17), 
  2040 ;;  size            1    4[BANK0 ] unsigned char 
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  to              1    6[BANK0 ] PTR volatile unsigned ch
  2043 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  2044 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  2045 ;;  cp              1    5[BANK0 ] PTR volatile unsigned ch
  2046 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  2047 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2052 ;; Tracked objects:
  2053 ;;		On entry : 300/0
  2054 ;;		On exit  : 300/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2057 ;;      Params:         0       2       0       0
  2058 ;;      Locals:         0       2       0       0
  2059 ;;      Temps:          0       0       0       0
  2060 ;;      Totals:         0       4       0       0
  2061 ;;Total ram usage:        4 bytes
  2062 ;; Hardware stack levels used: 1
  2063 ;; Hardware stack levels required when called: 7
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		___eetoc
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071     020C                     ___eecpymem:	
  2072                           ;psect for function ___eecpymem
  2073                           
  2074                           
  2075                           ;incstack = 0
  2076 ;; hardware stack exceeded
  2077                           ; Regs used in ___eecpymem: [wreg-fsr0h+status,2+status,0+btemp+1]
  2078                           ;___eecpymem@to stored from wreg
  2079     020C  00D3               	movwf	___eecpymem@to
  2080                           
  2081                           ;__eeprom.c: 8: volatile unsigned char *cp = to;
  2082     020D  0853               	movf	___eecpymem@to,w
  2083     020E  00D2               	movwf	___eecpymem@cp
  2084     020F                     l278:	
  2085                           ;__eeprom.c: 10: while (EECON1bits.WR) continue;
  2086                           
  2087     020F  1683               	bsf	3,5	;RP0=1, select bank1
  2088     0210  189C               	btfsc	28,1	;volsfr
  2089     0211  2A0F               	goto	l278
  2090                           
  2091                           ;__eeprom.c: 11: EEADR = (unsigned char)from;
  2092     0212  1283               	bcf	3,5	;RP0=0, select bank0
  2093     0213  0850               	movf	___eecpymem@from,w
  2094     0214  1683               	bsf	3,5	;RP0=1, select bank1
  2095     0215  009B               	movwf	27	;volatile
  2096     0216                     l1523:	
  2097                           ;__eeprom.c: 12: while(size--) {
  2098                           
  2099     0216  3001               	movlw	1
  2100     0217  1283               	bcf	3,5	;RP0=0, select bank0
  2101     0218  02D1               	subwf	___eecpymem@size,f
  2102     0219  0A51               	incf	___eecpymem@size,w
  2103     021A  1903               	btfsc	3,2
  2104     021B  0008               	return
  2105     021C                     l283:
  2106     021C  1683               	bsf	3,5	;RP0=1, select bank1
  2107     021D  189C               	btfsc	28,1	;volsfr
  2108     021E  2A1C               	goto	l283
  2109                           
  2110                           ;__eeprom.c: 15: EECON1 &= 0x7F;
  2111     021F  307F               	movlw	127
  2112     0220  00FF               	movwf	127
  2113     0221  087F               	movf	127,w
  2114     0222  059C               	andwf	28,f	;volsfr
  2115                           
  2116                           ;__eeprom.c: 17: EECON1bits.RD = 1;
  2117     0223  141C               	bsf	28,0	;volsfr
  2118                           
  2119                           ;__eeprom.c: 18: *cp++ = EEDATA;
  2120     0224  1283               	bcf	3,5	;RP0=0, select bank0
  2121     0225  0852               	movf	___eecpymem@cp,w
  2122     0226  0084               	movwf	4
  2123     0227  1683               	bsf	3,5	;RP0=1, select bank1
  2124     0228  081A               	movf	26,w	;volatile
  2125     0229  1383               	bcf	3,7	;select IRP bank0
  2126     022A  0080               	movwf	0
  2127     022B  3001               	movlw	1
  2128     022C  00FF               	movwf	127
  2129     022D  087F               	movf	127,w
  2130     022E  1283               	bcf	3,5	;RP0=0, select bank0
  2131     022F  07D2               	addwf	___eecpymem@cp,f
  2132                           
  2133                           ;__eeprom.c: 19: ++EEADR;
  2134     0230  3001               	movlw	1
  2135     0231  00FF               	movwf	127
  2136     0232  087F               	movf	127,w
  2137     0233  1683               	bsf	3,5	;RP0=1, select bank1
  2138     0234  079B               	addwf	27,f	;volatile
  2139     0235  2A16               	goto	l1523
  2140     0236                     __end_of___eecpymem:
  2141                           
  2142                           	psect	text14
  2143     03BF                     __ptext14:	
  2144 ;; *************** function _LCDSetCGRAMAddress *****************
  2145 ;; Defined at:
  2146 ;;		line 142 in file "lcd_hd44780.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  addr            1    wreg     unsigned char 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  addr            1    8[BANK0 ] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      void 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2155 ;; Tracked objects:
  2156 ;;		On entry : 300/0
  2157 ;;		On exit  : 300/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2160 ;;      Params:         0       0       0       0
  2161 ;;      Locals:         0       1       0       0
  2162 ;;      Temps:          0       0       0       0
  2163 ;;      Totals:         0       1       0       0
  2164 ;;Total ram usage:        1 bytes
  2165 ;; Hardware stack levels used: 1
  2166 ;; Hardware stack levels required when called: 10
  2167 ;; This function calls:
  2168 ;;		_LCDPutRS0Cmd
  2169 ;; This function is called by:
  2170 ;;		_LCDStoreCustom5x8Character
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174     03BF                     _LCDSetCGRAMAddress:	
  2175                           ;psect for function _LCDSetCGRAMAddress
  2176                           
  2177                           
  2178                           ;incstack = 0
  2179 ;; hardware stack exceeded
  2180                           ; Regs used in _LCDSetCGRAMAddress: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2181                           ;LCDSetCGRAMAddress@addr stored from wreg
  2182     03BF  00D5               	movwf	LCDSetCGRAMAddress@addr
  2183                           
  2184                           ;lcd_hd44780.c: 143: LCDPutRS0Cmd(0b01000000 | addr);
  2185     03C0  0855               	movf	LCDSetCGRAMAddress@addr,w
  2186     03C1  3840               	iorlw	64
  2187     03C2  23C9               	fcall	_LCDPutRS0Cmd
  2188     03C3  0008               	return
  2189     03C4                     __end_of_LCDSetCGRAMAddress:
  2190                           
  2191                           	psect	text15
  2192     03C4                     __ptext15:	
  2193 ;; *************** function _LCDPutChar *****************
  2194 ;; Defined at:
  2195 ;;		line 173 in file "lcd_hd44780.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  chr             1    wreg     unsigned char 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  chr             1    7[BANK0 ] unsigned char 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 300/0
  2206 ;;		On exit  : 300/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2209 ;;      Params:         0       0       0       0
  2210 ;;      Locals:         0       1       0       0
  2211 ;;      Temps:          0       0       0       0
  2212 ;;      Totals:         0       1       0       0
  2213 ;;Total ram usage:        1 bytes
  2214 ;; Hardware stack levels used: 1
  2215 ;; Hardware stack levels required when called: 9
  2216 ;; This function calls:
  2217 ;;		_LCDPut
  2218 ;; This function is called by:
  2219 ;;		_gameA
  2220 ;;		_gameB_redraw
  2221 ;;		_LCDWriteString
  2222 ;;		_LCDStoreCustom5x8Character
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226     03C4                     _LCDPutChar:	
  2227                           ;psect for function _LCDPutChar
  2228                           
  2229                           
  2230                           ;incstack = 0
  2231 ;; hardware stack exceeded
  2232                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2233                           ;LCDPutChar@chr stored from wreg
  2234     03C4  00D4               	movwf	LCDPutChar@chr
  2235                           
  2236                           ;lcd_hd44780.c: 174: PORTAbits.RA4 = 1;
  2237     03C5  1605               	bsf	5,4	;volatile
  2238                           
  2239                           ;lcd_hd44780.c: 175: LCDPut(chr);
  2240     03C6  0854               	movf	LCDPutChar@chr,w
  2241     03C7  2127               	fcall	_LCDPut
  2242     03C8  0008               	return
  2243     03C9                     __end_of_LCDPutChar:
  2244                           
  2245                           	psect	text16
  2246     00AA                     __ptext16:	
  2247 ;; *************** function _LCDInit *****************
  2248 ;; Defined at:
  2249 ;;		line 197 in file "lcd_hd44780.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;		None
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;  i               1   10[BANK0 ] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2258 ;; Tracked objects:
  2259 ;;		On entry : B00/0
  2260 ;;		On exit  : 300/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2263 ;;      Params:         0       0       0       0
  2264 ;;      Locals:         0       1       0       0
  2265 ;;      Temps:          0       2       0       0
  2266 ;;      Totals:         0       3       0       0
  2267 ;;Total ram usage:        3 bytes
  2268 ;; Hardware stack levels used: 1
  2269 ;; Hardware stack levels required when called: 11
  2270 ;; This function calls:
  2271 ;;		_LCDDisplayControl
  2272 ;;		_LCDEntryModeSet
  2273 ;;		_LCDPutRS0Cmd
  2274 ;;		_LCDWaitNotBusy
  2275 ;; This function is called by:
  2276 ;;		_main
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280     00AA                     _LCDInit:	
  2281                           ;psect for function _LCDInit
  2282                           
  2283                           
  2284                           ;lcd_hd44780.c: 199: LCD.DisplayControl = 0b00001000;
  2285                           
  2286                           ;incstack = 0
  2287 ;; hardware stack exceeded
  2288                           ; Regs used in _LCDInit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2289     00AA  3008               	movlw	8
  2290     00AB  00A3               	movwf	_LCD+1
  2291                           
  2292                           ;lcd_hd44780.c: 207: TRISA &= 0xF0;
  2293     00AC  30F0               	movlw	240
  2294     00AD  00FF               	movwf	127
  2295     00AE  087F               	movf	127,w
  2296     00AF  1683               	bsf	3,5	;RP0=1, select bank1
  2297     00B0  0585               	andwf	5,f	;volatile
  2298                           
  2299                           ;lcd_hd44780.c: 208: PORTAbits.RA4 = 0;
  2300     00B1  1283               	bcf	3,5	;RP0=0, select bank0
  2301     00B2  1205               	bcf	5,4	;volatile
  2302                           
  2303                           ;lcd_hd44780.c: 210: for (uint8_t i = 3; i; i--) {
  2304     00B3  3003               	movlw	3
  2305     00B4  00D7               	movwf	LCDInit@i
  2306     00B5                     l1701:
  2307     00B5  0857               	movf	LCDInit@i,w
  2308     00B6  1903               	btfsc	3,2
  2309     00B7  28D1               	goto	l248
  2310                           
  2311                           ;lcd_hd44780.c: 211: _delay((unsigned long)((50)*(4000000/4000.0)));
  2312     00B8  3041               	movlw	65
  2313     00B9  1283               	bcf	3,5	;RP0=0, select bank0
  2314     00BA  1303               	bcf	3,6	;RP1=0, select bank0
  2315     00BB  00D6               	movwf	??_LCDInit+1
  2316     00BC  30EE               	movlw	238
  2317     00BD  00D5               	movwf	??_LCDInit
  2318     00BE                     u757:
  2319     00BE  0BD5               	decfsz	??_LCDInit,f
  2320     00BF  28BE               	goto	u757
  2321     00C0  0BD6               	decfsz	??_LCDInit+1,f
  2322     00C1  28BE               	goto	u757
  2323                           
  2324                           ;lcd_hd44780.c: 213: PORTAbits.RA6 = 1;
  2325     00C2  1283               	bcf	3,5	;RP0=0, select bank0
  2326     00C3  1303               	bcf	3,6	;RP1=0, select bank0
  2327     00C4  1705               	bsf	5,6	;volatile
  2328                           
  2329                           ;lcd_hd44780.c: 214: PORTA = (PORTA & 0xf0) | 0x03;
  2330     00C5  0805               	movf	5,w	;volatile
  2331     00C6  39F0               	andlw	240
  2332     00C7  3803               	iorlw	3
  2333     00C8  0085               	movwf	5	;volatile
  2334                           
  2335                           ;lcd_hd44780.c: 215: __nop();
  2336     00C9  0000               	nop
  2337                           
  2338                           ;lcd_hd44780.c: 216: __nop();
  2339     00CA  0000               	nop
  2340                           
  2341                           ;lcd_hd44780.c: 217: PORTAbits.RA6 = 0;
  2342     00CB  1283               	bcf	3,5	;RP0=0, select bank0
  2343     00CC  1303               	bcf	3,6	;RP1=0, select bank0
  2344     00CD  1305               	bcf	5,6	;volatile
  2345     00CE  3001               	movlw	1
  2346     00CF  02D7               	subwf	LCDInit@i,f
  2347     00D0  28B5               	goto	l1701
  2348     00D1                     l248:
  2349                           
  2350                           ;lcd_hd44780.c: 218: };lcd_hd44780.c: 220: __nop();
  2351     00D1  0000               	nop
  2352                           
  2353                           ;lcd_hd44780.c: 221: __nop();
  2354     00D2  0000               	nop
  2355                           
  2356                           ;lcd_hd44780.c: 225: PORTAbits.RA6 = 1;
  2357     00D3  1283               	bcf	3,5	;RP0=0, select bank0
  2358     00D4  1303               	bcf	3,6	;RP1=0, select bank0
  2359     00D5  1705               	bsf	5,6	;volatile
  2360                           
  2361                           ;lcd_hd44780.c: 226: PORTA = (PORTA & 0xf0) | 0x02;
  2362     00D6  0805               	movf	5,w	;volatile
  2363     00D7  39F0               	andlw	240
  2364     00D8  3802               	iorlw	2
  2365     00D9  0085               	movwf	5	;volatile
  2366                           
  2367                           ;lcd_hd44780.c: 227: __nop();
  2368     00DA  0000               	nop
  2369                           
  2370                           ;lcd_hd44780.c: 228: __nop();
  2371     00DB  0000               	nop
  2372                           
  2373                           ;lcd_hd44780.c: 229: PORTAbits.RA6 = 0;
  2374     00DC  1283               	bcf	3,5	;RP0=0, select bank0
  2375     00DD  1303               	bcf	3,6	;RP1=0, select bank0
  2376     00DE  1305               	bcf	5,6	;volatile
  2377                           
  2378                           ;lcd_hd44780.c: 231: LCDWaitNotBusy();
  2379     00DF  21B4               	fcall	_LCDWaitNotBusy
  2380                           
  2381                           ;lcd_hd44780.c: 251: LCDPutRS0Cmd(0b00100000 | (uint8_t) 0b00001000 | 0b00000000);
  2382     00E0  3028               	movlw	40
  2383     00E1  23C9               	fcall	_LCDPutRS0Cmd
  2384                           
  2385                           ;lcd_hd44780.c: 255: LCDDisplayControl();
  2386     00E2  23D6               	fcall	_LCDDisplayControl
  2387                           
  2388                           ;lcd_hd44780.c: 256: LCDPutRS0Cmd(0b00000001);
  2389     00E3  3001               	movlw	1
  2390     00E4  23C9               	fcall	_LCDPutRS0Cmd
  2391                           
  2392                           ;lcd_hd44780.c: 258: LCD.EntryMode = 0b00000100 | 0b00000010 | 0b00000000;
  2393     00E5  3006               	movlw	6
  2394     00E6  00A2               	movwf	_LCD
  2395                           
  2396                           ;lcd_hd44780.c: 259: LCDEntryModeSet();
  2397     00E7  23D3               	fcall	_LCDEntryModeSet
  2398     00E8  0008               	return
  2399     00E9                     __end_of_LCDInit:
  2400                           
  2401                           	psect	text17
  2402     03D3                     __ptext17:	
  2403 ;; *************** function _LCDEntryModeSet *****************
  2404 ;; Defined at:
  2405 ;;		line 124 in file "lcd_hd44780.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;		None
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;		None
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 300/0
  2416 ;;		On exit  : 300/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2419 ;;      Params:         0       0       0       0
  2420 ;;      Locals:         0       0       0       0
  2421 ;;      Temps:          0       0       0       0
  2422 ;;      Totals:         0       0       0       0
  2423 ;;Total ram usage:        0 bytes
  2424 ;; Hardware stack levels used: 1
  2425 ;; Hardware stack levels required when called: 10
  2426 ;; This function calls:
  2427 ;;		_LCDPutRS0Cmd
  2428 ;; This function is called by:
  2429 ;;		_LCDInit
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433     03D3                     _LCDEntryModeSet:	
  2434                           ;psect for function _LCDEntryModeSet
  2435                           
  2436                           
  2437                           ;lcd_hd44780.c: 125: LCDPutRS0Cmd(LCD.EntryMode);
  2438                           
  2439                           ;incstack = 0
  2440 ;; hardware stack exceeded
  2441                           ; Regs used in _LCDEntryModeSet: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2442     03D3  0822               	movf	_LCD,w
  2443     03D4  23C9               	fcall	_LCDPutRS0Cmd
  2444     03D5  0008               	return
  2445     03D6                     __end_of_LCDEntryModeSet:
  2446                           
  2447                           	psect	text18
  2448     03D6                     __ptext18:	
  2449 ;; *************** function _LCDDisplayControl *****************
  2450 ;; Defined at:
  2451 ;;		line 133 in file "lcd_hd44780.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 300/0
  2462 ;;		On exit  : 300/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2465 ;;      Params:         0       0       0       0
  2466 ;;      Locals:         0       0       0       0
  2467 ;;      Temps:          0       0       0       0
  2468 ;;      Totals:         0       0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used: 1
  2471 ;; Hardware stack levels required when called: 10
  2472 ;; This function calls:
  2473 ;;		_LCDPutRS0Cmd
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;;		_game_menu
  2477 ;;		_LCDInit
  2478 ;; This function uses a non-reentrant model
  2479 ;;
  2480                           
  2481     03D6                     _LCDDisplayControl:	
  2482                           ;psect for function _LCDDisplayControl
  2483                           
  2484                           
  2485                           ;lcd_hd44780.c: 134: LCDPutRS0Cmd(LCD.DisplayControl);
  2486                           
  2487                           ;incstack = 0
  2488 ;; hardware stack exceeded
  2489                           ; Regs used in _LCDDisplayControl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2490     03D6  0823               	movf	_LCD+1,w
  2491     03D7  23C9               	fcall	_LCDPutRS0Cmd
  2492     03D8  0008               	return
  2493     03D9                     __end_of_LCDDisplayControl:
  2494                           
  2495                           	psect	text19
  2496     03C9                     __ptext19:	
  2497 ;; *************** function _LCDPutRS0Cmd *****************
  2498 ;; Defined at:
  2499 ;;		line 114 in file "lcd_hd44780.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  cmd             1    wreg     unsigned char 
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;  cmd             1    7[BANK0 ] unsigned char 
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      void 
  2506 ;; Registers used:
  2507 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2508 ;; Tracked objects:
  2509 ;;		On entry : 300/0
  2510 ;;		On exit  : 300/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2513 ;;      Params:         0       0       0       0
  2514 ;;      Locals:         0       1       0       0
  2515 ;;      Temps:          0       0       0       0
  2516 ;;      Totals:         0       1       0       0
  2517 ;;Total ram usage:        1 bytes
  2518 ;; Hardware stack levels used: 1
  2519 ;; Hardware stack levels required when called: 9
  2520 ;; This function calls:
  2521 ;;		_LCDPut
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;;		_game_menu
  2525 ;;		_gameA
  2526 ;;		_LCDEntryModeSet
  2527 ;;		_LCDDisplayControl
  2528 ;;		_LCDSetCGRAMAddress
  2529 ;;		_LCDSetCursorPos
  2530 ;;		_LCDInit
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534     03C9                     _LCDPutRS0Cmd:	
  2535                           ;psect for function _LCDPutRS0Cmd
  2536                           
  2537                           
  2538                           ;incstack = 0
  2539 ;; hardware stack exceeded
  2540                           ; Regs used in _LCDPutRS0Cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2541                           ;LCDPutRS0Cmd@cmd stored from wreg
  2542     03C9  00D4               	movwf	LCDPutRS0Cmd@cmd
  2543                           
  2544                           ;lcd_hd44780.c: 115: PORTAbits.RA4 = 0;
  2545     03CA  1205               	bcf	5,4	;volatile
  2546                           
  2547                           ;lcd_hd44780.c: 116: LCDPut(cmd);
  2548     03CB  0854               	movf	LCDPutRS0Cmd@cmd,w
  2549     03CC  2127               	fcall	_LCDPut
  2550     03CD  0008               	return
  2551     03CE                     __end_of_LCDPutRS0Cmd:
  2552                           
  2553                           	psect	text20
  2554     0127                     __ptext20:	
  2555 ;; *************** function _LCDPut *****************
  2556 ;; Defined at:
  2557 ;;		line 27 in file "lcd_hd44780.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  data            1    wreg     unsigned char 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  data            1    6[BANK0 ] unsigned char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  1    wreg      void 
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 300/0
  2568 ;;		On exit  : 300/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2571 ;;      Params:         0       0       0       0
  2572 ;;      Locals:         0       1       0       0
  2573 ;;      Temps:          0       1       0       0
  2574 ;;      Totals:         0       2       0       0
  2575 ;;Total ram usage:        2 bytes
  2576 ;; Hardware stack levels used: 1
  2577 ;; Hardware stack levels required when called: 8
  2578 ;; This function calls:
  2579 ;;		_LCDWaitNotBusy
  2580 ;; This function is called by:
  2581 ;;		_LCDPutRS0Cmd
  2582 ;;		_LCDPutChar
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586     0127                     _LCDPut:	
  2587                           ;psect for function _LCDPut
  2588                           
  2589                           
  2590                           ;incstack = 0
  2591 ;; hardware stack exceeded
  2592                           ; Regs used in _LCDPut: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2593                           ;LCDPut@data stored from wreg
  2594     0127  00D3               	movwf	LCDPut@data
  2595                           
  2596                           ;lcd_hd44780.c: 41: TRISA &= 0xF0;
  2597     0128  30F0               	movlw	240
  2598     0129  00FF               	movwf	127
  2599     012A  087F               	movf	127,w
  2600     012B  1683               	bsf	3,5	;RP0=1, select bank1
  2601     012C  0585               	andwf	5,f	;volatile
  2602                           
  2603                           ;lcd_hd44780.c: 44: PORTAbits.RA6 = 1;
  2604     012D  1283               	bcf	3,5	;RP0=0, select bank0
  2605     012E  1705               	bsf	5,6	;volatile
  2606                           
  2607                           ;lcd_hd44780.c: 45: __nop();
  2608     012F  0000               	nop
  2609                           
  2610                           ;lcd_hd44780.c: 46: PORTA = (PORTA & 0xF0) | data >> 4;
  2611     0130  1283               	bcf	3,5	;RP0=0, select bank0
  2612     0131  1303               	bcf	3,6	;RP1=0, select bank0
  2613     0132  0853               	movf	LCDPut@data,w
  2614     0133  00D2               	movwf	??_LCDPut
  2615     0134  3004               	movlw	4
  2616     0135                     u395:
  2617     0135  1003               	clrc
  2618     0136  0CD2               	rrf	??_LCDPut,f
  2619     0137  3EFF               	addlw	-1
  2620     0138  1D03               	skipz
  2621     0139  2935               	goto	u395
  2622     013A  0805               	movf	5,w	;volatile
  2623     013B  39F0               	andlw	240
  2624     013C  0452               	iorwf	??_LCDPut,w
  2625     013D  0085               	movwf	5	;volatile
  2626                           
  2627                           ;lcd_hd44780.c: 47: __nop();
  2628     013E  0000               	nop
  2629                           
  2630                           ;lcd_hd44780.c: 48: PORTAbits.RA6 = 0;
  2631     013F  1283               	bcf	3,5	;RP0=0, select bank0
  2632     0140  1303               	bcf	3,6	;RP1=0, select bank0
  2633     0141  1305               	bcf	5,6	;volatile
  2634                           
  2635                           ;lcd_hd44780.c: 50: __nop();
  2636     0142  0000               	nop
  2637                           
  2638                           ;lcd_hd44780.c: 51: __nop();
  2639     0143  0000               	nop
  2640                           
  2641                           ;lcd_hd44780.c: 54: PORTAbits.RA6 = 1;
  2642     0144  1283               	bcf	3,5	;RP0=0, select bank0
  2643     0145  1303               	bcf	3,6	;RP1=0, select bank0
  2644     0146  1705               	bsf	5,6	;volatile
  2645                           
  2646                           ;lcd_hd44780.c: 55: __nop();
  2647     0147  0000               	nop
  2648                           
  2649                           ;lcd_hd44780.c: 56: PORTA = (PORTA & 0xF0) | (data & 0x0f);
  2650     0148  300F               	movlw	15
  2651     0149  1283               	bcf	3,5	;RP0=0, select bank0
  2652     014A  1303               	bcf	3,6	;RP1=0, select bank0
  2653     014B  0553               	andwf	LCDPut@data,w
  2654     014C  00D2               	movwf	??_LCDPut
  2655     014D  0805               	movf	5,w	;volatile
  2656     014E  39F0               	andlw	240
  2657     014F  0452               	iorwf	??_LCDPut,w
  2658     0150  0085               	movwf	5	;volatile
  2659                           
  2660                           ;lcd_hd44780.c: 57: __nop();
  2661     0151  0000               	nop
  2662                           
  2663                           ;lcd_hd44780.c: 58: PORTAbits.RA6 = 0;
  2664     0152  1283               	bcf	3,5	;RP0=0, select bank0
  2665     0153  1303               	bcf	3,6	;RP1=0, select bank0
  2666     0154  1305               	bcf	5,6	;volatile
  2667                           
  2668                           ;lcd_hd44780.c: 60: LCDWaitNotBusy();
  2669     0155  21B4               	fcall	_LCDWaitNotBusy
  2670     0156  0008               	return
  2671     0157                     __end_of_LCDPut:
  2672                           
  2673                           	psect	text21
  2674     01B4                     __ptext21:	
  2675 ;; *************** function _LCDWaitNotBusy *****************
  2676 ;; Defined at:
  2677 ;;		line 64 in file "lcd_hd44780.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;		None
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  busy            1    4[BANK0 ] unsigned char 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		wreg, status,2, status,0, btemp+1
  2686 ;; Tracked objects:
  2687 ;;		On entry : 300/0
  2688 ;;		On exit  : 300/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2691 ;;      Params:         0       0       0       0
  2692 ;;      Locals:         0       1       0       0
  2693 ;;      Temps:          0       1       0       0
  2694 ;;      Totals:         0       2       0       0
  2695 ;;Total ram usage:        2 bytes
  2696 ;; Hardware stack levels used: 1
  2697 ;; Hardware stack levels required when called: 7
  2698 ;; This function calls:
  2699 ;;		Nothing
  2700 ;; This function is called by:
  2701 ;;		_LCDPut
  2702 ;;		_LCDInit
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706     01B4                     _LCDWaitNotBusy:	
  2707                           ;psect for function _LCDWaitNotBusy
  2708                           
  2709                           
  2710                           ;lcd_hd44780.c: 65: bool busy;;lcd_hd44780.c: 67: _delay((unsigned long)((50)*(4000000/4
      +                          000000.0)));
  2711                           
  2712                           ;incstack = 0
  2713 ;; hardware stack exceeded
  2714                           ; Regs used in _LCDWaitNotBusy: [wreg+status,2+status,0+btemp+1]
  2715     01B4  3010               	movlw	16
  2716     01B5  1283               	bcf	3,5	;RP0=0, select bank0
  2717     01B6  1303               	bcf	3,6	;RP1=0, select bank0
  2718     01B7  00D0               	movwf	??_LCDWaitNotBusy
  2719     01B8                     u767:
  2720     01B8  0BD0               	decfsz	??_LCDWaitNotBusy,f
  2721     01B9  29B8               	goto	u767
  2722                           
  2723                           ;lcd_hd44780.c: 68: PORTAbits.RA4 = 0;
  2724     01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2725     01BB  1303               	bcf	3,6	;RP1=0, select bank0
  2726     01BC  1205               	bcf	5,4	;volatile
  2727                           
  2728                           ;lcd_hd44780.c: 69: PORTAbits.RA7 = 1;
  2729     01BD  1785               	bsf	5,7	;volatile
  2730                           
  2731                           ;lcd_hd44780.c: 89: TRISA |= 0x0f;
  2732     01BE  300F               	movlw	15
  2733     01BF  00FF               	movwf	127
  2734     01C0  087F               	movf	127,w
  2735     01C1  1683               	bsf	3,5	;RP0=1, select bank1
  2736     01C2  0485               	iorwf	5,f	;volatile
  2737     01C3                     l1371:
  2738                           
  2739                           ;lcd_hd44780.c: 92: PORTAbits.RA6 = 1;
  2740     01C3  1283               	bcf	3,5	;RP0=0, select bank0
  2741     01C4  1705               	bsf	5,6	;volatile
  2742                           
  2743                           ;lcd_hd44780.c: 93: __nop();
  2744     01C5  0000               	nop
  2745                           
  2746                           ;lcd_hd44780.c: 94: __nop();
  2747     01C6  0000               	nop
  2748                           
  2749                           ;lcd_hd44780.c: 96: busy = PORTA & 0x08;
  2750     01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2751     01C8  1303               	bcf	3,6	;RP1=0, select bank0
  2752     01C9  0805               	movf	5,w	;volatile
  2753     01CA  3908               	andlw	8
  2754     01CB  00D1               	movwf	LCDWaitNotBusy@busy
  2755                           
  2756                           ;lcd_hd44780.c: 98: PORTAbits.RA6 = 0;
  2757     01CC  1305               	bcf	5,6	;volatile
  2758                           
  2759                           ;lcd_hd44780.c: 99: __nop();
  2760     01CD  0000               	nop
  2761                           
  2762                           ;lcd_hd44780.c: 100: __nop();
  2763     01CE  0000               	nop
  2764                           
  2765                           ;lcd_hd44780.c: 102: PORTAbits.RA6 = 1;
  2766     01CF  1283               	bcf	3,5	;RP0=0, select bank0
  2767     01D0  1303               	bcf	3,6	;RP1=0, select bank0
  2768     01D1  1705               	bsf	5,6	;volatile
  2769                           
  2770                           ;lcd_hd44780.c: 103: __nop();
  2771     01D2  0000               	nop
  2772                           
  2773                           ;lcd_hd44780.c: 104: __nop();
  2774     01D3  0000               	nop
  2775                           
  2776                           ;lcd_hd44780.c: 105: PORTAbits.RA6 = 0;
  2777     01D4  1283               	bcf	3,5	;RP0=0, select bank0
  2778     01D5  1303               	bcf	3,6	;RP1=0, select bank0
  2779     01D6  1305               	bcf	5,6	;volatile
  2780                           
  2781                           ;lcd_hd44780.c: 106: __nop();
  2782     01D7  0000               	nop
  2783                           
  2784                           ;lcd_hd44780.c: 107: __nop();
  2785     01D8  0000               	nop
  2786                           
  2787                           ;lcd_hd44780.c: 108: } while (busy);
  2788     01D9  1283               	bcf	3,5	;RP0=0, select bank0
  2789     01DA  1303               	bcf	3,6	;RP1=0, select bank0
  2790     01DB  0851               	movf	LCDWaitNotBusy@busy,w
  2791     01DC  1D03               	btfss	3,2
  2792     01DD  29C3               	goto	l1371
  2793                           
  2794                           ;lcd_hd44780.c: 111: PORTAbits.RA7 = 0;
  2795     01DE  1385               	bcf	5,7	;volatile
  2796     01DF  0008               	return
  2797     01E0                     __end_of_LCDWaitNotBusy:
  2798                           
  2799                           	psect	text22
  2800     0068                     __ptext22:	
  2801 ;; *************** function _isr *****************
  2802 ;; Defined at:
  2803 ;;		line 116 in file "main.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  _key            1    2[BANK0 ] unsigned char 
  2808 ;;  _col            1    0[BANK0 ] unsigned char 
  2809 ;;  _row            1    1[BANK0 ] unsigned char 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 300/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2819 ;;      Params:         0       0       0       0
  2820 ;;      Locals:         0       3       0       0
  2821 ;;      Temps:          5       0       0       0
  2822 ;;      Totals:         5       3       0       0
  2823 ;;Total ram usage:        8 bytes
  2824 ;; Hardware stack levels used: 1
  2825 ;; Hardware stack levels required when called: 6
  2826 ;; This function calls:
  2827 ;;		__beep
  2828 ;;		_beep_isr
  2829 ;;		_gameB_isr
  2830 ;;		_kbd_eval
  2831 ;; This function is called by:
  2832 ;;		Interrupt level 1
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836     0068                     _isr:	
  2837                           ;psect for function _isr
  2838                           
  2839                           
  2840                           ;main.c: 121: if (T0IF) {
  2841     0068  1D0B               	btfss	11,2	;volatile
  2842     0069  289E               	goto	i1l1871
  2843                           
  2844                           ;main.c: 122: T0IF = 0;
  2845     006A  110B               	bcf	11,2	;volatile
  2846                           
  2847                           ;main.c: 125: uint8_t _row = (PORTB);
  2848     006B  1283               	bcf	3,5	;RP0=0, select bank0
  2849     006C  1303               	bcf	3,6	;RP1=0, select bank0
  2850     006D  0806               	movf	6,w	;volatile
  2851     006E  00CE               	movwf	isr@_row
  2852                           
  2853                           ;main.c: 129: if (kbd_skip_t0_cyc) {
  2854     006F  0827               	movf	_kbd_skip_t0_cyc,w
  2855     0070  1903               	btfsc	3,2
  2856     0071  2874               	goto	i1l1849
  2857                           
  2858                           ;main.c: 130: kbd_skip_t0_cyc--;
  2859     0072  3001               	movlw	1
  2860     0073  02A7               	subwf	_kbd_skip_t0_cyc,f
  2861     0074                     i1l1849:
  2862                           
  2863                           ;main.c: 131: };main.c: 133: if (_row & 0xf0 && !key) {
  2864     0074  084E               	movf	isr@_row,w
  2865     0075  39F0               	andlw	240
  2866     0076  1903               	btfsc	3,2
  2867     0077  2892               	goto	i1l1865
  2868     0078  082A               	movf	_key,w
  2869     0079  1D03               	btfss	3,2
  2870     007A  2892               	goto	i1l1865
  2871                           
  2872                           ;main.c: 134: uint8_t _col = key_col_select & 0x03;
  2873     007B  0828               	movf	_key_col_select,w
  2874     007C  3903               	andlw	3
  2875     007D  00CD               	movwf	isr@_col
  2876                           
  2877                           ;main.c: 135: uint8_t _key;;main.c: 137: _key = kbd_eval(_row, _col);
  2878     007E  084D               	movf	isr@_col,w
  2879     007F  00F0               	movwf	kbd_eval@col
  2880     0080  084E               	movf	isr@_row,w
  2881     0081  22F2               	fcall	_kbd_eval
  2882     0082  00CF               	movwf	isr@_key
  2883                           
  2884                           ;main.c: 140: if (_key != prev_key || !kbd_skip_t0_cyc) {
  2885     0083  084F               	movf	isr@_key,w
  2886     0084  0629               	xorwf	_prev_key,w
  2887     0085  1D03               	skipz
  2888     0086  288A               	goto	i1l1861
  2889     0087  0827               	movf	_kbd_skip_t0_cyc,w
  2890     0088  1D03               	btfss	3,2
  2891     0089  2892               	goto	i1l1865
  2892     008A                     i1l1861:
  2893                           
  2894                           ;main.c: 141: kbd_skip_t0_cyc = 12;
  2895     008A  300C               	movlw	12
  2896     008B  00A7               	movwf	_kbd_skip_t0_cyc
  2897                           
  2898                           ;main.c: 142: key = _key;
  2899     008C  084F               	movf	isr@_key,w
  2900     008D  00AA               	movwf	_key
  2901                           
  2902                           ;main.c: 143: prev_key = _key;
  2903     008E  084F               	movf	isr@_key,w
  2904     008F  00A9               	movwf	_prev_key
  2905                           
  2906                           ;main.c: 144: _beep((6));
  2907     0090  3006               	movlw	6
  2908     0091  23A1               	fcall	__beep
  2909     0092                     i1l1865:
  2910                           
  2911                           ;main.c: 145: };main.c: 146: };main.c: 149: key_col_select++;
  2912     0092  3001               	movlw	1
  2913     0093  00FF               	movwf	127
  2914     0094  087F               	movf	127,w
  2915     0095  07A8               	addwf	_key_col_select,f
  2916                           
  2917                           ;main.c: 150: (PORTB) = ((PORTB) & 0xFC) | (key_col_select & 0x03);
  2918     0096  3003               	movlw	3
  2919     0097  0528               	andwf	_key_col_select,w
  2920     0098  00F8               	movwf	??_isr
  2921     0099  0806               	movf	6,w	;volatile
  2922     009A  39FC               	andlw	252
  2923     009B  0478               	iorwf	??_isr,w
  2924     009C  0086               	movwf	6	;volatile
  2925                           
  2926                           ;main.c: 153: beep_isr();
  2927     009D  2384               	fcall	_beep_isr
  2928     009E                     i1l1871:
  2929                           
  2930                           ;main.c: 154: };main.c: 156: gameB_isr();
  2931     009E  22D7               	fcall	_gameB_isr
  2932     009F  087C               	movf	??_isr+4,w
  2933     00A0  00FF               	movwf	127
  2934     00A1  087B               	movf	??_isr+3,w
  2935     00A2  008A               	movwf	10
  2936     00A3  087A               	movf	??_isr+2,w
  2937     00A4  0084               	movwf	4
  2938     00A5  0E79               	swapf	??_isr+1,w
  2939     00A6  0083               	movwf	3
  2940     00A7  0EFE               	swapf	126,f
  2941     00A8  0E7E               	swapf	126,w
  2942     00A9  0009               	retfie
  2943     00AA                     __end_of_isr:
  2944                           
  2945                           	psect	intentry
  2946     0004                     __pintentry:	
  2947                           ;incstack = 0
  2948 ;; hardware stack exceeded
  2949                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2950                           
  2951     0004                     interrupt_function:
  2952     007E                     saved_w	set	btemp
  2953     0004  00FE               	movwf	btemp
  2954     0005  0E03               	swapf	3,w
  2955     0006  00F9               	movwf	??_isr+1
  2956     0007  0804               	movf	4,w
  2957     0008  00FA               	movwf	??_isr+2
  2958     0009  080A               	movf	10,w
  2959     000A  00FB               	movwf	??_isr+3
  2960     000B  087F               	movf	btemp+1,w
  2961     000C  00FC               	movwf	??_isr+4
  2962     000D  2868               	ljmp	_isr
  2963                           
  2964                           	psect	text23
  2965     02F2                     __ptext23:	
  2966 ;; *************** function _kbd_eval *****************
  2967 ;; Defined at:
  2968 ;;		line 17 in file "keybrd.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  row             1    wreg     unsigned char 
  2971 ;;  col             1    0[COMMON] unsigned char 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  row             1    2[COMMON] unsigned char 
  2974 ;;  key_ptr         1    1[COMMON] unsigned char 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      unsigned char 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2979 ;; Tracked objects:
  2980 ;;		On entry : 300/0
  2981 ;;		On exit  : B00/0
  2982 ;;		Unchanged: 300/0
  2983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2984 ;;      Params:         1       0       0       0
  2985 ;;      Locals:         2       0       0       0
  2986 ;;      Temps:          0       0       0       0
  2987 ;;      Totals:         3       0       0       0
  2988 ;;Total ram usage:        3 bytes
  2989 ;; Hardware stack levels used: 1
  2990 ;; This function calls:
  2991 ;;		Nothing
  2992 ;; This function is called by:
  2993 ;;		_isr
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997     02F2                     _kbd_eval:	
  2998                           ;psect for function _kbd_eval
  2999                           
  3000                           
  3001                           ;incstack = 0
  3002 ;; hardware stack exceeded
  3003                           ; Regs used in _kbd_eval: [wreg-fsr0h+status,2+status,0+btemp+1]
  3004                           ;kbd_eval@row stored from wreg
  3005     02F2  00F2               	movwf	kbd_eval@row
  3006                           
  3007                           ;keybrd.c: 20: uint8_t key_ptr = 0x00;
  3008     02F3  01F1               	clrf	kbd_eval@key_ptr
  3009                           
  3010                           ;keybrd.c: 22: if (row & 0x20) {
  3011     02F4  1EF2               	btfss	kbd_eval@row,5
  3012     02F5  2AF8               	goto	i1l256
  3013                           
  3014                           ;keybrd.c: 23: key_ptr = 4;
  3015     02F6  3004               	movlw	4
  3016     02F7  2AFF               	goto	L1
  3017     02F8                     i1l256:	
  3018                           ;keybrd.c: 24: } else if (row & 0x40) {
  3019                           
  3020     02F8  1F72               	btfss	kbd_eval@row,6
  3021     02F9  2AFC               	goto	i1l258
  3022                           
  3023                           ;keybrd.c: 25: key_ptr = 8;
  3024     02FA  3008               	movlw	8
  3025     02FB  2AFF               	goto	L1
  3026     02FC                     i1l258:	
  3027                           ;keybrd.c: 26: } else if (row & 0x80) {
  3028                           
  3029     02FC  1FF2               	btfss	kbd_eval@row,7
  3030     02FD  2B00               	goto	i1l1765
  3031                           
  3032                           ;keybrd.c: 27: key_ptr = 12;
  3033     02FE  300C               	movlw	12
  3034     02FF                     L1:
  3035     02FF  00F1               	movwf	kbd_eval@key_ptr
  3036     0300                     i1l1765:
  3037                           
  3038                           ;keybrd.c: 28: };keybrd.c: 32: key_ptr |= col;
  3039     0300  0870               	movf	kbd_eval@col,w
  3040     0301  00FF               	movwf	127
  3041     0302  087F               	movf	127,w
  3042     0303  04F1               	iorwf	kbd_eval@key_ptr,f
  3043                           
  3044                           ;keybrd.c: 34: return keys[key_ptr];
  3045     0304  0871               	movf	kbd_eval@key_ptr,w
  3046     0305  3EA0               	addlw	(low (_keys| 0))& (0+255)
  3047     0306  0084               	movwf	4
  3048     0307  1383               	bcf	3,7	;select IRP bank1
  3049     0308  0800               	movf	0,w
  3050     0309  0008               	return
  3051     030A                     __end_of_kbd_eval:
  3052                           
  3053                           	psect	text24
  3054     02D7                     __ptext24:	
  3055 ;; *************** function _gameB_isr *****************
  3056 ;; Defined at:
  3057 ;;		line 364 in file "main.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;		None
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;		None
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 300/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3071 ;;      Params:         0       0       0       0
  3072 ;;      Locals:         0       0       0       0
  3073 ;;      Temps:          0       0       0       0
  3074 ;;      Totals:         0       0       0       0
  3075 ;;Total ram usage:        0 bytes
  3076 ;; Hardware stack levels used: 1
  3077 ;; Hardware stack levels required when called: 5
  3078 ;; This function calls:
  3079 ;;		i1_gameB_redraw
  3080 ;; This function is called by:
  3081 ;;		_isr
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085     02D7                     _gameB_isr:	
  3086                           ;psect for function _gameB_isr
  3087                           
  3088                           
  3089                           ;main.c: 365: if (!gameB_active) return;
  3090                           
  3091                           ;incstack = 0
  3092 ;; hardware stack exceeded
  3093                           ; Regs used in _gameB_isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3094     02D7  1283               	bcf	3,5	;RP0=0, select bank0
  3095     02D8  1303               	bcf	3,6	;RP1=0, select bank0
  3096     02D9  0826               	movf	_gameB_active,w
  3097     02DA  1903               	btfsc	3,2
  3098     02DB  0008               	return
  3099     02DC  2AE5               	goto	i1l1803
  3100     02DD                     i1l1793:
  3101                           
  3102                           ;main.c: 370: gameB_active = 0;
  3103     02DD  01A6               	clrf	_gameB_active
  3104                           
  3105                           ;main.c: 371: break;
  3106     02DE  2AF0               	goto	i1l1805
  3107     02DF                     i1l1795:
  3108                           
  3109                           ;main.c: 373: gameB_truckpos = 0;
  3110     02DF  01A5               	clrf	_gameB_truckpos
  3111     02E0                     i1l1797:
  3112                           
  3113                           ;main.c: 374: gameB_redraw();
  3114     02E0  22A0               	fcall	i1_gameB_redraw
  3115                           
  3116                           ;main.c: 375: break;
  3117     02E1  2AF0               	goto	i1l1805
  3118     02E2                     i1l185:	
  3119                           ;main.c: 376: case 'B':
  3120                           
  3121                           
  3122                           ;main.c: 377: gameB_truckpos = 1;
  3123     02E2  01A5               	clrf	_gameB_truckpos
  3124     02E3  0AA5               	incf	_gameB_truckpos,f
  3125     02E4  2AE0               	goto	i1l1797
  3126     02E5                     i1l1803:
  3127     02E5  082A               	movf	_key,w
  3128                           
  3129                           ; Switch size 1, requested type "simple"
  3130                           ; Number of cases is 3, Range of values is 35 to 66
  3131                           ; switch strategies available:
  3132                           ; Name         Instructions Cycles
  3133                           ; simple_byte           10     6 (average)
  3134                           ; direct_byte           41     9 (fixed)
  3135                           ; jumptable            263     9 (fixed)
  3136                           ;	Chosen strategy is simple_byte
  3137     02E6  3A23               	xorlw	35	; case 35
  3138     02E7  1903               	skipnz
  3139     02E8  2ADD               	goto	i1l1793
  3140     02E9  3A62               	xorlw	98	; case 65
  3141     02EA  1903               	skipnz
  3142     02EB  2ADF               	goto	i1l1795
  3143     02EC  3A03               	xorlw	3	; case 66
  3144     02ED  1903               	skipnz
  3145     02EE  2AE2               	goto	i1l185
  3146     02EF  2AF0               	goto	i1l1805
  3147     02F0                     i1l1805:
  3148                           
  3149                           ;main.c: 384: key = '\0';
  3150     02F0  01AA               	clrf	_key
  3151     02F1  0008               	return
  3152     02F2                     __end_of_gameB_isr:
  3153                           
  3154                           	psect	text25
  3155     02A0                     __ptext25:	
  3156 ;; *************** function i1_gameB_redraw *****************
  3157 ;; Defined at:
  3158 ;;		line 387 in file "main.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;		None
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      void 
  3165 ;; Registers used:
  3166 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 300/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3172 ;;      Params:         0       0       0       0
  3173 ;;      Locals:         0       0       0       0
  3174 ;;      Temps:          0       0       0       0
  3175 ;;      Totals:         0       0       0       0
  3176 ;;Total ram usage:        0 bytes
  3177 ;; Hardware stack levels used: 1
  3178 ;; Hardware stack levels required when called: 4
  3179 ;; This function calls:
  3180 ;;		i1_LCDPutChar
  3181 ;;		i1_LCDSetCursorPos
  3182 ;;		i1_LCDWriteString
  3183 ;; This function is called by:
  3184 ;;		_gameB_isr
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188     02A0                     i1_gameB_redraw:	
  3189                           ;psect for function i1_gameB_redraw
  3190                           
  3191                           
  3192                           ;main.c: 388: LCDSetCursorPos(0, 0);
  3193                           
  3194                           ;incstack = 0
  3195 ;; hardware stack exceeded
  3196                           ; Regs used in i1_gameB_redraw: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3197     02A0  01F5               	clrf	i1LCDSetCursorPos@y
  3198     02A1  3000               	movlw	0
  3199     02A2  2376               	fcall	i1_LCDSetCursorPos
  3200                           
  3201                           ;main.c: 389: LCDWriteString(gameB_track[0]);
  3202     02A3  302B               	movlw	(low (_gameB_track| 0))& (0+255)
  3203     02A4  00F5               	movwf	i1LCDWriteString@str
  3204     02A5  3000               	movlw	0
  3205     02A6  00F6               	movwf	i1LCDWriteString@str+1
  3206     02A7  2334               	fcall	i1_LCDWriteString
  3207                           
  3208                           ;main.c: 390: LCDSetCursorPos(0, 1);
  3209     02A8  01F5               	clrf	i1LCDSetCursorPos@y
  3210     02A9  0AF5               	incf	i1LCDSetCursorPos@y,f
  3211     02AA  3000               	movlw	0
  3212     02AB  2376               	fcall	i1_LCDSetCursorPos
  3213                           
  3214                           ;main.c: 391: LCDWriteString(gameB_track[1]);
  3215     02AC  303C               	movlw	(low ((_gameB_track| 0+17)))& (0+255)
  3216     02AD  00F5               	movwf	i1LCDWriteString@str
  3217     02AE  3000               	movlw	0
  3218     02AF  00F6               	movwf	i1LCDWriteString@str+1
  3219     02B0  2334               	fcall	i1_LCDWriteString
  3220                           
  3221                           ;main.c: 393: LCDSetCursorPos(0, gameB_truckpos);
  3222     02B1  0825               	movf	_gameB_truckpos,w
  3223     02B2  00F5               	movwf	i1LCDSetCursorPos@y
  3224     02B3  3000               	movlw	0
  3225     02B4  2376               	fcall	i1_LCDSetCursorPos
  3226                           
  3227                           ;main.c: 394: LCDPutChar(0);
  3228     02B5  3000               	movlw	0
  3229     02B6  23CE               	fcall	i1_LCDPutChar
  3230                           
  3231                           ;main.c: 395: LCDPutChar(1);
  3232     02B7  3001               	movlw	1
  3233     02B8  23CE               	fcall	i1_LCDPutChar
  3234                           
  3235                           ;main.c: 396: LCDPutChar(2);
  3236     02B9  3002               	movlw	2
  3237     02BA  23CE               	fcall	i1_LCDPutChar
  3238     02BB  0008               	return
  3239     02BC                     __end_ofi1_gameB_redraw:
  3240                           
  3241                           	psect	text26
  3242     0334                     __ptext26:	
  3243 ;; *************** function i1_LCDWriteString *****************
  3244 ;; Defined at:
  3245 ;;		line 162 in file "lcd_hd44780.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  str             2    5[COMMON] PTR const unsigned char 
  3248 ;;		 -> gameB_track(34), gameA@second_line(17), STR_2(7), STR_1(18), 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 300/0
  3257 ;;		On exit  : 300/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3260 ;;      Params:         2       0       0       0
  3261 ;;      Locals:         0       0       0       0
  3262 ;;      Temps:          0       0       0       0
  3263 ;;      Totals:         2       0       0       0
  3264 ;;Total ram usage:        2 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; Hardware stack levels required when called: 3
  3267 ;; This function calls:
  3268 ;;		i1_LCDPutChar
  3269 ;; This function is called by:
  3270 ;;		i1_gameB_redraw
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274     0334                     i1_LCDWriteString:	
  3275                           ;psect for function i1_LCDWriteString
  3276                           
  3277     0334                     i1l1585:	
  3278                           ;lcd_hd44780.c: 163: while (*str) {
  3279                           
  3280                           ;incstack = 0
  3281 ;; hardware stack exceeded
  3282                           ; Regs used in i1_LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3283                           
  3284     0334  0876               	movf	i1LCDWriteString@str+1,w
  3285     0335  00FF               	movwf	127
  3286     0336  0875               	movf	i1LCDWriteString@str,w
  3287     0337  0084               	movwf	4
  3288     0338  2236               	fcall	stringtab
  3289     0339  3A00               	xorlw	0
  3290     033A  1903               	btfsc	3,2
  3291     033B  0008               	return
  3292                           
  3293                           ;lcd_hd44780.c: 164: LCDPutChar(*str++);
  3294     033C  0876               	movf	i1LCDWriteString@str+1,w
  3295     033D  00FF               	movwf	127
  3296     033E  0875               	movf	i1LCDWriteString@str,w
  3297     033F  0084               	movwf	4
  3298     0340  2236               	fcall	stringtab
  3299     0341  23CE               	fcall	i1_LCDPutChar
  3300     0342  3001               	movlw	1
  3301     0343  07F5               	addwf	i1LCDWriteString@str,f
  3302     0344  1803               	skipnc
  3303     0345  0AF6               	incf	i1LCDWriteString@str+1,f
  3304     0346  3000               	movlw	0
  3305     0347  07F6               	addwf	i1LCDWriteString@str+1,f
  3306     0348  2B34               	goto	i1l1585
  3307     0349                     __end_ofi1_LCDWriteString:
  3308                           
  3309                           	psect	text27
  3310     03CE                     __ptext27:	
  3311 ;; *************** function i1_LCDPutChar *****************
  3312 ;; Defined at:
  3313 ;;		line 173 in file "lcd_hd44780.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  chr             1    wreg     unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  chr             1    4[COMMON] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3322 ;; Tracked objects:
  3323 ;;		On entry : 300/0
  3324 ;;		On exit  : 300/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3327 ;;      Params:         0       0       0       0
  3328 ;;      Locals:         1       0       0       0
  3329 ;;      Temps:          0       0       0       0
  3330 ;;      Totals:         1       0       0       0
  3331 ;;Total ram usage:        1 bytes
  3332 ;; Hardware stack levels used: 1
  3333 ;; Hardware stack levels required when called: 2
  3334 ;; This function calls:
  3335 ;;		i1_LCDPut
  3336 ;; This function is called by:
  3337 ;;		i1_gameB_redraw
  3338 ;;		i1_LCDWriteString
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342     03CE                     i1_LCDPutChar:	
  3343                           ;psect for function i1_LCDPutChar
  3344                           
  3345                           
  3346                           ;incstack = 0
  3347 ;; hardware stack exceeded
  3348                           ; Regs used in i1_LCDPutChar: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3349                           ;i1LCDPutChar@chr stored from wreg
  3350     03CE  00F4               	movwf	i1LCDPutChar@chr
  3351                           
  3352                           ;lcd_hd44780.c: 174: PORTAbits.RA4 = 1;
  3353     03CF  1605               	bsf	5,4	;volatile
  3354                           
  3355                           ;lcd_hd44780.c: 175: LCDPut(chr);
  3356     03D0  0874               	movf	i1LCDPutChar@chr,w
  3357     03D1  2157               	fcall	i1_LCDPut
  3358     03D2  0008               	return
  3359     03D3                     __end_ofi1_LCDPutChar:
  3360                           
  3361                           	psect	text28
  3362     0376                     __ptext28:	
  3363 ;; *************** function i1_LCDSetCursorPos *****************
  3364 ;; Defined at:
  3365 ;;		line 153 in file "lcd_hd44780.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  x               1    wreg     unsigned char 
  3368 ;;  y               1    5[COMMON] unsigned char 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;  x               1    7[COMMON] unsigned char 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 300/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3380 ;;      Params:         1       0       0       0
  3381 ;;      Locals:         1       0       0       0
  3382 ;;      Temps:          1       0       0       0
  3383 ;;      Totals:         3       0       0       0
  3384 ;;Total ram usage:        3 bytes
  3385 ;; Hardware stack levels used: 1
  3386 ;; Hardware stack levels required when called: 3
  3387 ;; This function calls:
  3388 ;;		i1_LCDPutRS0Cmd
  3389 ;; This function is called by:
  3390 ;;		i1_gameB_redraw
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394     0376                     i1_LCDSetCursorPos:	
  3395                           ;psect for function i1_LCDSetCursorPos
  3396                           
  3397                           
  3398                           ;incstack = 0
  3399 ;; hardware stack exceeded
  3400                           ; Regs used in i1_LCDSetCursorPos: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3401                           ;i1LCDSetCursorPos@x stored from wreg
  3402     0376  00F7               	movwf	i1LCDSetCursorPos@x
  3403                           
  3404                           ;lcd_hd44780.c: 154: LCDPutRS0Cmd(0b10000000 | (uint8_t) y * 0x40 + x);
  3405     0377  0875               	movf	i1LCDSetCursorPos@y,w
  3406     0378  00F6               	movwf	??i1_LCDSetCursorPos
  3407     0379  3006               	movlw	6
  3408     037A                     u49_25:
  3409     037A  1003               	clrc
  3410     037B  0DF6               	rlf	??i1_LCDSetCursorPos,f
  3411     037C  3EFF               	addlw	-1
  3412     037D  1D03               	skipz
  3413     037E  2B7A               	goto	u49_25
  3414     037F  0877               	movf	i1LCDSetCursorPos@x,w
  3415     0380  0776               	addwf	??i1_LCDSetCursorPos,w
  3416     0381  3880               	iorlw	128
  3417     0382  23B2               	fcall	i1_LCDPutRS0Cmd
  3418     0383  0008               	return
  3419     0384                     __end_ofi1_LCDSetCursorPos:
  3420                           
  3421                           	psect	text29
  3422     03B2                     __ptext29:	
  3423 ;; *************** function i1_LCDPutRS0Cmd *****************
  3424 ;; Defined at:
  3425 ;;		line 114 in file "lcd_hd44780.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  cmd             1    wreg     unsigned char 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  cmd             1    4[COMMON] unsigned char 
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 300/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3439 ;;      Params:         0       0       0       0
  3440 ;;      Locals:         1       0       0       0
  3441 ;;      Temps:          0       0       0       0
  3442 ;;      Totals:         1       0       0       0
  3443 ;;Total ram usage:        1 bytes
  3444 ;; Hardware stack levels used: 1
  3445 ;; Hardware stack levels required when called: 2
  3446 ;; This function calls:
  3447 ;;		i1_LCDPut
  3448 ;; This function is called by:
  3449 ;;		i1_LCDSetCursorPos
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453     03B2                     i1_LCDPutRS0Cmd:	
  3454                           ;psect for function i1_LCDPutRS0Cmd
  3455                           
  3456                           
  3457                           ;incstack = 0
  3458 ;; hardware stack exceeded
  3459                           ; Regs used in i1_LCDPutRS0Cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3460                           ;i1LCDPutRS0Cmd@cmd stored from wreg
  3461     03B2  00F4               	movwf	i1LCDPutRS0Cmd@cmd
  3462                           
  3463                           ;lcd_hd44780.c: 115: PORTAbits.RA4 = 0;
  3464     03B3  1283               	bcf	3,5	;RP0=0, select bank0
  3465     03B4  1303               	bcf	3,6	;RP1=0, select bank0
  3466     03B5  1205               	bcf	5,4	;volatile
  3467                           
  3468                           ;lcd_hd44780.c: 116: LCDPut(cmd);
  3469     03B6  0874               	movf	i1LCDPutRS0Cmd@cmd,w
  3470     03B7  2157               	fcall	i1_LCDPut
  3471     03B8  0008               	return
  3472     03B9                     __end_ofi1_LCDPutRS0Cmd:
  3473                           
  3474                           	psect	text30
  3475     0157                     __ptext30:	
  3476 ;; *************** function i1_LCDPut *****************
  3477 ;; Defined at:
  3478 ;;		line 27 in file "lcd_hd44780.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  data            1    wreg     unsigned char 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  data            1    3[COMMON] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  1    wreg      void 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3487 ;; Tracked objects:
  3488 ;;		On entry : 300/0
  3489 ;;		On exit  : 300/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3492 ;;      Params:         0       0       0       0
  3493 ;;      Locals:         1       0       0       0
  3494 ;;      Temps:          1       0       0       0
  3495 ;;      Totals:         2       0       0       0
  3496 ;;Total ram usage:        2 bytes
  3497 ;; Hardware stack levels used: 1
  3498 ;; Hardware stack levels required when called: 1
  3499 ;; This function calls:
  3500 ;;		i1_LCDWaitNotBusy
  3501 ;; This function is called by:
  3502 ;;		i1_LCDPutRS0Cmd
  3503 ;;		i1_LCDPutChar
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507     0157                     i1_LCDPut:	
  3508                           ;psect for function i1_LCDPut
  3509                           
  3510                           
  3511                           ;incstack = 0
  3512 ;; hardware stack exceeded
  3513                           ; Regs used in i1_LCDPut: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3514                           ;i1LCDPut@data stored from wreg
  3515     0157  00F3               	movwf	i1LCDPut@data
  3516                           
  3517                           ;lcd_hd44780.c: 41: TRISA &= 0xF0;
  3518     0158  30F0               	movlw	240
  3519     0159  00FF               	movwf	127
  3520     015A  087F               	movf	127,w
  3521     015B  1683               	bsf	3,5	;RP0=1, select bank1
  3522     015C  0585               	andwf	5,f	;volatile
  3523                           
  3524                           ;lcd_hd44780.c: 44: PORTAbits.RA6 = 1;
  3525     015D  1283               	bcf	3,5	;RP0=0, select bank0
  3526     015E  1705               	bsf	5,6	;volatile
  3527                           
  3528                           ;lcd_hd44780.c: 45: __nop();
  3529     015F  0000               	nop
  3530                           
  3531                           ;lcd_hd44780.c: 46: PORTA = (PORTA & 0xF0) | data >> 4;
  3532     0160  0873               	movf	i1LCDPut@data,w
  3533     0161  00F2               	movwf	??i1_LCDPut
  3534     0162  3004               	movlw	4
  3535     0163                     u41_25:
  3536     0163  1003               	clrc
  3537     0164  0CF2               	rrf	??i1_LCDPut,f
  3538     0165  3EFF               	addlw	-1
  3539     0166  1D03               	skipz
  3540     0167  2963               	goto	u41_25
  3541     0168  1283               	bcf	3,5	;RP0=0, select bank0
  3542     0169  1303               	bcf	3,6	;RP1=0, select bank0
  3543     016A  0805               	movf	5,w	;volatile
  3544     016B  39F0               	andlw	240
  3545     016C  0472               	iorwf	??i1_LCDPut,w
  3546     016D  0085               	movwf	5	;volatile
  3547                           
  3548                           ;lcd_hd44780.c: 47: __nop();
  3549     016E  0000               	nop
  3550                           
  3551                           ;lcd_hd44780.c: 48: PORTAbits.RA6 = 0;
  3552     016F  1283               	bcf	3,5	;RP0=0, select bank0
  3553     0170  1303               	bcf	3,6	;RP1=0, select bank0
  3554     0171  1305               	bcf	5,6	;volatile
  3555                           
  3556                           ;lcd_hd44780.c: 50: __nop();
  3557     0172  0000               	nop
  3558                           
  3559                           ;lcd_hd44780.c: 51: __nop();
  3560     0173  0000               	nop
  3561                           
  3562                           ;lcd_hd44780.c: 54: PORTAbits.RA6 = 1;
  3563     0174  1283               	bcf	3,5	;RP0=0, select bank0
  3564     0175  1303               	bcf	3,6	;RP1=0, select bank0
  3565     0176  1705               	bsf	5,6	;volatile
  3566                           
  3567                           ;lcd_hd44780.c: 55: __nop();
  3568     0177  0000               	nop
  3569                           
  3570                           ;lcd_hd44780.c: 56: PORTA = (PORTA & 0xF0) | (data & 0x0f);
  3571     0178  300F               	movlw	15
  3572     0179  0573               	andwf	i1LCDPut@data,w
  3573     017A  00F2               	movwf	??i1_LCDPut
  3574     017B  1283               	bcf	3,5	;RP0=0, select bank0
  3575     017C  1303               	bcf	3,6	;RP1=0, select bank0
  3576     017D  0805               	movf	5,w	;volatile
  3577     017E  39F0               	andlw	240
  3578     017F  0472               	iorwf	??i1_LCDPut,w
  3579     0180  0085               	movwf	5	;volatile
  3580                           
  3581                           ;lcd_hd44780.c: 57: __nop();
  3582     0181  0000               	nop
  3583                           
  3584                           ;lcd_hd44780.c: 58: PORTAbits.RA6 = 0;
  3585     0182  1283               	bcf	3,5	;RP0=0, select bank0
  3586     0183  1303               	bcf	3,6	;RP1=0, select bank0
  3587     0184  1305               	bcf	5,6	;volatile
  3588                           
  3589                           ;lcd_hd44780.c: 60: LCDWaitNotBusy();
  3590     0185  21E0               	fcall	i1_LCDWaitNotBusy
  3591     0186  0008               	return
  3592     0187                     __end_ofi1_LCDPut:
  3593                           
  3594                           	psect	text31
  3595     01E0                     __ptext31:	
  3596 ;; *************** function i1_LCDWaitNotBusy *****************
  3597 ;; Defined at:
  3598 ;;		line 64 in file "lcd_hd44780.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  busy            1    1[COMMON] unsigned char 
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2, status,0, btemp+1
  3607 ;; Tracked objects:
  3608 ;;		On entry : 300/0
  3609 ;;		On exit  : 300/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3612 ;;      Params:         0       0       0       0
  3613 ;;      Locals:         1       0       0       0
  3614 ;;      Temps:          1       0       0       0
  3615 ;;      Totals:         2       0       0       0
  3616 ;;Total ram usage:        2 bytes
  3617 ;; Hardware stack levels used: 1
  3618 ;; This function calls:
  3619 ;;		Nothing
  3620 ;; This function is called by:
  3621 ;;		i1_LCDPut
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625     01E0                     i1_LCDWaitNotBusy:	
  3626                           ;psect for function i1_LCDWaitNotBusy
  3627                           
  3628                           
  3629                           ;lcd_hd44780.c: 65: bool busy;;lcd_hd44780.c: 67: _delay((unsigned long)((50)*(4000000/4
      +                          000000.0)));
  3630                           
  3631                           ;incstack = 0
  3632 ;; hardware stack exceeded
  3633                           ; Regs used in i1_LCDWaitNotBusy: [wreg+status,2+status,0+btemp+1]
  3634     01E0  3010               	movlw	16
  3635     01E1  00F0               	movwf	??i1_LCDWaitNotBusy
  3636     01E2                     u77_27:
  3637     01E2  0BF0               	decfsz	??i1_LCDWaitNotBusy,f
  3638     01E3  29E2               	goto	u77_27
  3639     01E4  0000               	nop
  3640                           
  3641                           ;lcd_hd44780.c: 68: PORTAbits.RA4 = 0;
  3642     01E5  1283               	bcf	3,5	;RP0=0, select bank0
  3643     01E6  1303               	bcf	3,6	;RP1=0, select bank0
  3644     01E7  1205               	bcf	5,4	;volatile
  3645                           
  3646                           ;lcd_hd44780.c: 69: PORTAbits.RA7 = 1;
  3647     01E8  1785               	bsf	5,7	;volatile
  3648                           
  3649                           ;lcd_hd44780.c: 89: TRISA |= 0x0f;
  3650     01E9  300F               	movlw	15
  3651     01EA  00FF               	movwf	127
  3652     01EB  087F               	movf	127,w
  3653     01EC  1683               	bsf	3,5	;RP0=1, select bank1
  3654     01ED  0485               	iorwf	5,f	;volatile
  3655     01EE                     i1l1435:
  3656                           
  3657                           ;lcd_hd44780.c: 92: PORTAbits.RA6 = 1;
  3658     01EE  1283               	bcf	3,5	;RP0=0, select bank0
  3659     01EF  1303               	bcf	3,6	;RP1=0, select bank0
  3660     01F0  1705               	bsf	5,6	;volatile
  3661                           
  3662                           ;lcd_hd44780.c: 93: __nop();
  3663     01F1  0000               	nop
  3664                           
  3665                           ;lcd_hd44780.c: 94: __nop();
  3666     01F2  0000               	nop
  3667                           
  3668                           ;lcd_hd44780.c: 96: busy = PORTA & 0x08;
  3669     01F3  1283               	bcf	3,5	;RP0=0, select bank0
  3670     01F4  1303               	bcf	3,6	;RP1=0, select bank0
  3671     01F5  0805               	movf	5,w	;volatile
  3672     01F6  3908               	andlw	8
  3673     01F7  00F1               	movwf	i1LCDWaitNotBusy@busy
  3674                           
  3675                           ;lcd_hd44780.c: 98: PORTAbits.RA6 = 0;
  3676     01F8  1305               	bcf	5,6	;volatile
  3677                           
  3678                           ;lcd_hd44780.c: 99: __nop();
  3679     01F9  0000               	nop
  3680                           
  3681                           ;lcd_hd44780.c: 100: __nop();
  3682     01FA  0000               	nop
  3683                           
  3684                           ;lcd_hd44780.c: 102: PORTAbits.RA6 = 1;
  3685     01FB  1283               	bcf	3,5	;RP0=0, select bank0
  3686     01FC  1303               	bcf	3,6	;RP1=0, select bank0
  3687     01FD  1705               	bsf	5,6	;volatile
  3688                           
  3689                           ;lcd_hd44780.c: 103: __nop();
  3690     01FE  0000               	nop
  3691                           
  3692                           ;lcd_hd44780.c: 104: __nop();
  3693     01FF  0000               	nop
  3694                           
  3695                           ;lcd_hd44780.c: 105: PORTAbits.RA6 = 0;
  3696     0200  1283               	bcf	3,5	;RP0=0, select bank0
  3697     0201  1303               	bcf	3,6	;RP1=0, select bank0
  3698     0202  1305               	bcf	5,6	;volatile
  3699                           
  3700                           ;lcd_hd44780.c: 106: __nop();
  3701     0203  0000               	nop
  3702                           
  3703                           ;lcd_hd44780.c: 107: __nop();
  3704     0204  0000               	nop
  3705                           
  3706                           ;lcd_hd44780.c: 108: } while (busy);
  3707     0205  0871               	movf	i1LCDWaitNotBusy@busy,w
  3708     0206  1D03               	btfss	3,2
  3709     0207  29EE               	goto	i1l1435
  3710                           
  3711                           ;lcd_hd44780.c: 111: PORTAbits.RA7 = 0;
  3712     0208  1283               	bcf	3,5	;RP0=0, select bank0
  3713     0209  1303               	bcf	3,6	;RP1=0, select bank0
  3714     020A  1385               	bcf	5,7	;volatile
  3715     020B  0008               	return
  3716     020C                     __end_ofi1_LCDWaitNotBusy:
  3717                           
  3718                           	psect	text32
  3719     0384                     __ptext32:	
  3720 ;; *************** function _beep_isr *****************
  3721 ;; Defined at:
  3722 ;;		line 162 in file "main.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0
  3731 ;; Tracked objects:
  3732 ;;		On entry : 300/0
  3733 ;;		On exit  : 300/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3736 ;;      Params:         0       0       0       0
  3737 ;;      Locals:         0       0       0       0
  3738 ;;      Temps:          0       0       0       0
  3739 ;;      Totals:         0       0       0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used: 1
  3742 ;; This function calls:
  3743 ;;		Nothing
  3744 ;; This function is called by:
  3745 ;;		_isr
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749     0384                     _beep_isr:	
  3750                           ;psect for function _beep_isr
  3751                           
  3752                           
  3753                           ;main.c: 164: if (!CCPR1L) return;
  3754                           
  3755                           ;incstack = 0
  3756 ;; hardware stack exceeded
  3757                           ; Regs used in _beep_isr: [wreg+status,2+status,0]
  3758     0384  0815               	movf	21,w	;volatile
  3759     0385  1903               	btfsc	3,2
  3760     0386  0008               	return
  3761                           
  3762                           ;main.c: 167: if (beep_timer) {
  3763     0387  087D               	movf	_beep_timer,w
  3764     0388  1903               	btfsc	3,2
  3765     0389  2B8D               	goto	i1l1787
  3766                           
  3767                           ;main.c: 168: beep_timer--;
  3768     038A  3001               	movlw	1
  3769     038B  02FD               	subwf	_beep_timer,f
  3770     038C  0008               	return
  3771     038D                     i1l1787:
  3772                           
  3773                           ;main.c: 170: };main.c: 173: CCPR1L = 0;
  3774     038D  0195               	clrf	21	;volatile
  3775     038E  0008               	return
  3776     038F                     __end_of_beep_isr:
  3777                           
  3778                           	psect	text33
  3779     03A1                     __ptext33:	
  3780 ;; *************** function __beep *****************
  3781 ;; Defined at:
  3782 ;;		line 181 in file "main.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  length          1    wreg     unsigned char 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  length          1    0[COMMON] unsigned char 
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg, status,2, status,0
  3791 ;; Tracked objects:
  3792 ;;		On entry : B00/0
  3793 ;;		On exit  : B00/0
  3794 ;;		Unchanged: 800/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3796 ;;      Params:         0       0       0       0
  3797 ;;      Locals:         1       0       0       0
  3798 ;;      Temps:          0       0       0       0
  3799 ;;      Totals:         1       0       0       0
  3800 ;;Total ram usage:        1 bytes
  3801 ;; Hardware stack levels used: 1
  3802 ;; This function calls:
  3803 ;;		Nothing
  3804 ;; This function is called by:
  3805 ;;		_isr
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809     03A1                     __beep:	
  3810                           ;psect for function __beep
  3811                           
  3812                           
  3813                           ;incstack = 0
  3814 ;; hardware stack exceeded
  3815                           ; Regs used in __beep: [wreg+status,2+status,0]
  3816                           ;__beep@length stored from wreg
  3817     03A1  00F0               	movwf	__beep@length
  3818                           
  3819                           ;main.c: 183: if (CCPR1L) return;
  3820     03A2  0815               	movf	21,w	;volatile
  3821     03A3  1D03               	btfss	3,2
  3822     03A4  0008               	return
  3823                           
  3824                           ;main.c: 185: beep_timer = length;
  3825     03A5  0870               	movf	__beep@length,w
  3826     03A6  00FD               	movwf	_beep_timer
  3827                           
  3828                           ;main.c: 188: CCPR1L = 60;
  3829     03A7  303C               	movlw	60
  3830     03A8  0095               	movwf	21	;volatile
  3831     03A9  0008               	return
  3832     03AA                     __end_of__beep:
  3833     007E                     btemp	set	126	;btemp
  3834     007E                     wtemp0	set	126
  3835                           
  3836                           	psect	idloc
  3837                           
  3838                           ;Config register IDLOC0 @ 0x2000
  3839                           ;	unspecified, using default values
  3840     2000                     	org	8192
  3841     2000  3FFF               	dw	16383
  3842                           
  3843                           ;Config register IDLOC1 @ 0x2001
  3844                           ;	unspecified, using default values
  3845     2001                     	org	8193
  3846     2001  3FFF               	dw	16383
  3847                           
  3848                           ;Config register IDLOC2 @ 0x2002
  3849                           ;	unspecified, using default values
  3850     2002                     	org	8194
  3851     2002  3FFF               	dw	16383
  3852                           
  3853                           ;Config register IDLOC3 @ 0x2003
  3854                           ;	unspecified, using default values
  3855     2003                     	org	8195
  3856     2003  3FFF               	dw	16383
  3857                           
  3858                           	psect	config
  3859                           
  3860                           ;Config register CONFIG @ 0x2007
  3861                           ;	Oscillator Selection bits
  3862                           ;	FOSC = INTOSCIO, INTRC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function o
      +                          n RA7/OSC1/CLKIN
  3863                           ;	Watchdog Timer Enable bit
  3864                           ;	WDTE = OFF, WDT disabled
  3865                           ;	Power-up Timer Enable bit
  3866                           ;	PWRTE = OFF, PWRT disabled
  3867                           ;	RA5/MCLR pin function select
  3868                           ;	MCLRE = OFF, RA5/MCLR pin function is digital input, MCLR internally tied to VDD
  3869                           ;	Brown-out Reset Enable bit
  3870                           ;	BOREN = ON, BOD Reset enabled
  3871                           ;	Low-Voltage Programming Enable bit
  3872                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  3873                           ;	Data Code Protection bit
  3874                           ;	CPD = OFF, Data memory code protection off
  3875                           ;	Code Protection bits
  3876                           ;	CP = OFF, Program memory code protection off
  3877     2007                     	org	8199
  3878     2007  3F58               	dw	16216

Data Sizes:
    Strings     25
    Constant    0
    Data        57
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     31      76
    BANK1            80      0      16
    BANK2            48      0       0

Pointer List with Targets:

    __eetoc@addr	PTR eeprom void  size(1) Largest target is 24
		 -> tiles(EEDATA[16]), eeprom_cgram_data(EEDATA[24]), eeprom_keys(EEDATA[17]), 

    __eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 24
		 -> tiles(EEDATA[16]), eeprom_cgram_data(EEDATA[24]), eeprom_keys(EEDATA[17]), 

    __eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(BANK0[1]), 

    __eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(BANK0[1]), 

    LCDStoreCustom5x8Character@dataarr	PTR const unsigned char  size(1) Largest target is 24
		 -> eeprom_cgram_data(EEDATA[24]), 

    LCDWriteString@str	PTR const unsigned char  size(2) Largest target is 34
		 -> gameB_track(BANK0[34]), gameA@second_line(BANK0[17]), STR_2(CODE[7]), STR_1(CODE[18]), 

    clearstr@str	PTR unsigned char  size(1) Largest target is 34
		 -> gameB_track(BANK0[34]), gameA@second_line(BANK0[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_gameB_redraw->i1_LCDSetCursorPos
    i1_LCDWriteString->i1_LCDPutChar
    i1_LCDPutChar->i1_LCDPut
    i1_LCDSetCursorPos->i1_LCDPutRS0Cmd
    i1_LCDPutRS0Cmd->i1_LCDPut
    i1_LCDPut->i1_LCDWaitNotBusy

Critical Paths under _main in BANK0

    _game_menu->_gameA
    _gameB_redraw->_LCDSetCursorPos
    _gameA->_LCDSetCursorPos
    _LCDWriteString->_LCDPutChar
    _LCDSetCursorPos->_LCDPutRS0Cmd
    _LCDStoreCustom5x8Character->_LCDSetCGRAMAddress
    _LCDStoreCustom5x8Character->___eetoc
    ___eetoc->___eecpymem
    _LCDSetCGRAMAddress->_LCDPutRS0Cmd
    _LCDPutChar->_LCDPut
    _LCDInit->_LCDPutRS0Cmd
    _LCDEntryModeSet->_LCDPutRS0Cmd
    _LCDDisplayControl->_LCDPutRS0Cmd
    _LCDPutRS0Cmd->_LCDPut
    _LCDPut->_LCDWaitNotBusy

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    9942
                                             30 BANK0      1     1      0
                  _LCDDisplayControl
                            _LCDInit
                       _LCDPutRS0Cmd
         _LCDStoreCustom5x8Character
                            ___eetoc
                          _game_menu
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _game_menu                                            0     0      0    6253
                  _LCDDisplayControl
                       _LCDPutRS0Cmd
                    _LCDSetCursorPos
                     _LCDWriteString
                            __getkey
                              _gameA
                              _gameB
 ---------------------------------------------------------------------------------
 (2) _gameB                                                4     4      0    3030
                                             11 BANK0      4     4      0
                            ___eetoc
                           _clearstr
                       _gameB_redraw
                             _psrand
 ---------------------------------------------------------------------------------
 (3) _psrand                                               1     1      0      45
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _gameB_redraw                                         0     0      0    1344
                         _LCDPutChar
                    _LCDSetCursorPos
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _gameA                                               19    19      0    1790
                                             11 BANK0     19    19      0
                         _LCDPutChar
                       _LCDPutRS0Cmd
                    _LCDSetCursorPos
                     _LCDWriteString
                            __getkey
                           _clearstr
 ---------------------------------------------------------------------------------
 (3) _clearstr                                             1     1      0     144
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) __getkey                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       2     0      2     514
                                              8 BANK0      2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (4) _LCDSetCursorPos                                      3     2      1     741
                                              8 BANK0      3     2      1
                       _LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (1) _LCDStoreCustom5x8Character                           4     3      1    1813
                                              9 BANK0      4     3      1
                         _LCDPutChar
                 _LCDSetCGRAMAddress
                            ___eetoc
 ---------------------------------------------------------------------------------
 (3) ___eetoc                                              2     2      0    1316
                                              7 BANK0      2     2      0
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (4) ___eecpymem                                           4     2      2    1229
                                              3 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _LCDSetCGRAMAddress                                   1     1      0     111
                                              8 BANK0      1     1      0
                       _LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (5) _LCDPutChar                                           1     1      0      89
                                              7 BANK0      1     1      0
                             _LCDPut
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0     314
                                              8 BANK0      3     3      0
                  _LCDDisplayControl
                    _LCDEntryModeSet
                       _LCDPutRS0Cmd
                     _LCDWaitNotBusy
 ---------------------------------------------------------------------------------
 (2) _LCDEntryModeSet                                      0     0      0      89
                       _LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (2) _LCDDisplayControl                                    0     0      0      89
                       _LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (5) _LCDPutRS0Cmd                                         1     1      0      89
                                              7 BANK0      1     1      0
                             _LCDPut
 ---------------------------------------------------------------------------------
 (6) _LCDPut                                               2     2      0      67
                                              5 BANK0      2     2      0
                     _LCDWaitNotBusy
 ---------------------------------------------------------------------------------
 (7) _LCDWaitNotBusy                                       2     2      0      23
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  8     8      0     834
                                              8 COMMON     5     5      0
                                              0 BANK0      3     3      0
                              __beep
                           _beep_isr
                          _gameB_isr
                           _kbd_eval
 ---------------------------------------------------------------------------------
 (9) _kbd_eval                                             3     2      1     191
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (9) _gameB_isr                                            0     0      0     486
                     i1_gameB_redraw
 ---------------------------------------------------------------------------------
 (10) i1_gameB_redraw                                      0     0      0     486
                       i1_LCDPutChar
                  i1_LCDSetCursorPos
                   i1_LCDWriteString
 ---------------------------------------------------------------------------------
 (11) i1_LCDWriteString                                    2     0      2     186
                                              5 COMMON     2     0      2
                       i1_LCDPutChar
 ---------------------------------------------------------------------------------
 (12) i1_LCDPutChar                                        1     1      0      89
                                              4 COMMON     1     1      0
                           i1_LCDPut
 ---------------------------------------------------------------------------------
 (11) i1_LCDSetCursorPos                                   3     2      1     211
                                              5 COMMON     3     2      1
                     i1_LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (12) i1_LCDPutRS0Cmd                                      1     1      0      89
                                              4 COMMON     1     1      0
                           i1_LCDPut
 ---------------------------------------------------------------------------------
 (13) i1_LCDPut                                            2     2      0      67
                                              2 COMMON     2     2      0
                   i1_LCDWaitNotBusy
 ---------------------------------------------------------------------------------
 (14) i1_LCDWaitNotBusy                                    2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _beep_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) __beep                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDDisplayControl
     _LCDPutRS0Cmd
       _LCDPut
         _LCDWaitNotBusy
   _LCDInit
     _LCDDisplayControl
     _LCDEntryModeSet
       _LCDPutRS0Cmd
     _LCDPutRS0Cmd
     _LCDWaitNotBusy
   _LCDPutRS0Cmd
   _LCDStoreCustom5x8Character
     _LCDPutChar
       _LCDPut
     _LCDSetCGRAMAddress
       _LCDPutRS0Cmd
     ___eetoc
       ___eecpymem
   ___eetoc
   _game_menu
     _LCDDisplayControl
     _LCDPutRS0Cmd
     _LCDSetCursorPos
       _LCDPutRS0Cmd
     _LCDWriteString
       _LCDPutChar
     __getkey
     _gameA
       _LCDPutChar
       _LCDPutRS0Cmd
       _LCDSetCursorPos
       _LCDWriteString
       __getkey
       _clearstr
     _gameB
       ___eetoc
       _clearstr
       _gameB_redraw
         _LCDPutChar
         _LCDSetCursorPos
         _LCDWriteString
       _psrand
   _init

 _isr (ROOT)
   __beep
   _beep_isr
   _gameB_isr
     i1_gameB_redraw
       i1_LCDPutChar
         i1_LCDPut
           i1_LCDWaitNotBusy
       i1_LCDSetCursorPos
         i1_LCDPutRS0Cmd
           i1_LCDPut
       i1_LCDWriteString
         i1_LCDPutChar
   _kbd_eval

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      10       7       20.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1F      4C       3       95.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6A      10        0.0%
ABS                  0      0      6A       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0      39       0       44.5%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Aug 26 07:14:09 2023

                ??i1_LCDWriteString 0077                        __beep@length 0070  
                                 pc 0002                         ?_LCDPutChar 0070  
                                fsr 0004                                 l154 0126  
                               l172 003C                                 l248 00D1  
                               l283 021C                                 l278 020F  
                               _LCD 0022                                 _PR2 0092  
                               u425 036C                                 u395 0135  
                               u595 02C0                                 u757 00BE  
                               u767 01B8                                 _key 002A  
                               _isr 0068                                 fsr0 0004  
                               indf 0000                __end_of_gameB_redraw 02A0  
                     ?_LCDPutRS0Cmd 0070                     __end_of_LCDInit 00E9  
                    _LCDWaitNotBusy 01B4                                l1371 01C3  
                              l1523 0216                                l1507 031F  
                              l1611 011A                                l1603 010B  
                              l1701 00B5                                l1613 011E  
                              l1543 03BA                                l1631 002F  
                              l1539 034A                                l1733 02CA  
                              l1637 003E                                l1629 0038  
                              l1741 0271                                l1591 00ED  
                              l1831 01AB                                l1815 018A  
                              l1649 0027                                l1753 027B  
                              l1817 019A                                l1747 0277  
                              l1597 00FA                                ?_isr 0070  
                              STR_1 0246                                STR_2 0258  
                              _T0IF 005A                                _TMR0 0001  
                              _TMR2 0011                                _main 0187  
                              _init 030A                                _keys 00A0  
                              btemp 007E                                start 000E  
                             ??_isr 0078                    ?_LCDEntryModeSet 0070  
                             ?_main 0070                     __end_of___eetoc 03A1  
                             ?_init 0070                               _EEADR 009B  
                             _CMCON 001F                    __end_ofi1_LCDPut 0187  
                             _T2CON 0012                      _gameB_truckpos 0025  
                             i1l256 02F8                               i1l185 02E2  
                             i1l258 02FC                     __end_of__getkey 03BF  
                             u41_25 0163                               _PORTA 0005  
                             _PORTB 0006                               _TRISA 0085  
                             _TRISB 0086                               u49_25 037A  
                             u77_27 01E2              __end_of_LCDWaitNotBusy 01E0  
                    ??_LCDPutRS0Cmd 0054                               __beep 03A1  
                             _gameA 00E9                               _gameB 001B  
                             _tiles 0029             __end_of_LCDSetCursorPos 0376  
                             main@i 006B                               pclath 000A  
                             status 0003                               wtemp0 007E  
                  LCDSetCursorPos@x 0057                    LCDSetCursorPos@y 0055  
                   __initialization 000F                        __end_of_main 01B4  
                      __end_of_init 031F                              ??_main 006B  
                            ??_init 0050                           ??_LCDInit 0055  
                   ?_LCDWaitNotBusy 0070                              ?__beep 0070  
                            ?_gameA 0070                              ?_gameB 0070  
                            _EEDATA 009A                              _CCPR1L 0015  
                            _EECON1 009C                       ?i1_LCDPutChar 0070  
                            i1l1435 01EE                              i1l1803 02E5  
                            i1l1805 02F0                              i1l1585 0334  
                            i1l1765 0300                              i1l1861 008A  
                            i1l1871 009E                              i1l1793 02DD  
                            i1l1865 0092                              i1l1849 0074  
                            i1l1787 038D                              i1l1795 02DF  
                            i1l1797 02E0                              _LCDPut 0127  
                            _INTCON 000B                    __end_of_beep_isr 038F  
                   LCDPutRS0Cmd@cmd 0054                    __end_of_clearstr 0359  
                  __end_of_kbd_eval 030A                      _LCDWriteString 031F  
                         ??___eetoc 0054                           ??__getkey 0050  
                            gameB@i 0058                              gameB@j 005A  
                            _psrand 038F                        __pdataEEDATA 0000  
            LCDSetCGRAMAddress@addr 0055                              saved_w 007E  
      ??_LCDStoreCustom5x8Character 0057                      ??i1_LCDPutChar 0074  
                  ?_LCDSetCursorPos 0055                          ___eecpymem 020C  
           __end_of__initialization 0019              __end_of_LCDWriteString 0334  
                      _gameB_active 0026                           ?i1_LCDPut 0070  
                      _gameB_redraw 0284          __end_of_LCDSetCGRAMAddress 03C4  
                    __pcstackCOMMON 0070                __end_of_LCDPutRS0Cmd 03CE  
                     __end_of__beep 03AA                       __end_of_gameA 0127  
                     __end_of_gameB 0068                        ??_LCDPutChar 0054  
                 _eeprom_cgram_data 0000                             ??__beep 0070  
                           ??_gameA 0058                             ??_gameB 0058  
                        _beep_timer 007D                        i1LCDPut@data 0073  
                i1LCDSetCursorPos@x 0077                  i1LCDSetCursorPos@y 0075  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                           ?_LCDPut 0070                  __end_of_LCDPutChar 03C9  
                     LCDPutChar@chr 0054                     ?_LCDWriteString 0055  
                        ??i1_LCDPut 0072                          __pmaintext 0187  
                  i1_LCDWaitNotBusy 01E0                      i1_gameB_redraw 02A0  
                        __pintentry 0004                             _CCP1CON 0017  
                           ?_psrand 0070                             _LCDInit 00AA  
                         ?_beep_isr 0070                           ?_clearstr 0070  
                         ?_kbd_eval 0070                          __stringtab 0236  
                 __end_of_gameB_isr 02F2                         ?___eecpymem 0050  
                 __end_of_game_menu 0284                          gameB@i_203 005B  
            __end_ofi1_gameB_redraw 02BC                             ___eetoc 0398  
 LCDStoreCustom5x8Character@dataarr 0056                __end_ofi1_LCDPutChar 03D3  
                           __getkey 03B9                    ??_LCDWaitNotBusy 0050  
                           __ptext1 030A                             __ptext2 025F  
                           __ptext3 001B                             __ptext4 038F  
                           __ptext5 0284                             __ptext6 00E9  
                           __ptext7 0349                             __ptext8 03B9  
                           __ptext9 031F                          ??_beep_isr 0070  
__end_of_LCDStoreCustom5x8Character 02D7          _LCDStoreCustom5x8Character 02BC  
                   _kbd_skip_t0_cyc 0027                          ??_clearstr 0050  
                        ??_kbd_eval 0071                             clrloop0 03AB  
              end_of_initialization 0019                             isr@_col 004D  
                           isr@_key 004F                             isr@_row 004E  
                   ?i1_gameB_redraw 0070                     i1LCDPutChar@chr 0074  
                         _PORTAbits 0005                   LCDWriteString@str 0055  
                  i1_LCDWriteString 0334                        _LCDPutRS0Cmd 03C9  
                    _key_col_select 0028                      __end_of_LCDPut 0157  
                   kbd_eval@key_ptr 0071                          LCDPut@data 0053  
                     __pidataEEDATA 0000                      __end_of_psrand 0398  
                _LCDSetCGRAMAddress 03BF                 start_initialization 000F  
                       __end_of_isr 00AA            __end_ofi1_LCDWaitNotBusy 020C  
                  gameA@second_line 0058                    ??_LCDWriteString 0057  
               ?_LCDSetCGRAMAddress 0070                            ??_LCDPut 0052  
                    i1_LCDPutRS0Cmd 03B2                   i1_LCDSetCursorPos 0376  
                 ??_LCDEntryModeSet 0055                  ?i1_LCDSetCursorPos 0075  
                        init_fetch0 0359                 ??i1_LCDSetCursorPos 0076  
              ??_LCDSetCGRAMAddress 0055                            ??_psrand 0050  
                          ?_LCDInit 0070                         __pbssCOMMON 007D  
                          LCDInit@i 0057                           ___latbits 0000  
                     __pcstackBANK0 004D                         _gameB_track 002B  
            __end_ofi1_LCDPutRS0Cmd 03B9           __end_ofi1_LCDSetCursorPos 0384  
                      ??___eecpymem 0052                i1LCDWaitNotBusy@busy 0071  
                      i1_LCDPutChar 03CE                           _gameB_isr 02D7  
                         _gameB_spd 0020                           _game_menu 025F  
     LCDStoreCustom5x8Character@cnt 0059                            ?___eetoc 0070  
                          ?__getkey 0070                           __pstrings 0236  
                __end_of___eecpymem 0236         ?_LCDStoreCustom5x8Character 0056  
                         gameA@xpos 0069                           gameA@ypos 006A  
                   ?i1_LCDPutRS0Cmd 0070                   interrupt_function 0004  
                  ??i1_gameB_redraw 0078                           clear_ram0 03AA  
                       _eeprom_keys 0018                          ?_gameB_isr 0070  
                          i1_LCDPut 0157            __end_ofi1_LCDWriteString 0349  
                          _PCONbits 008E                          ?_game_menu 0070  
                 ??_LCDSetCursorPos 0056                         __stringbase 0245  
                 _LCDDisplayControl 03D6                  ?_LCDDisplayControl 0070  
                 i1LCDPutRS0Cmd@cmd 0074                 ??_LCDDisplayControl 0055  
                        _EECON1bits 009C                       ?_gameB_redraw 0070  
                __end_of__stringtab 0246           __end_of_LCDDisplayControl 03D9  
                          _beep_isr 0384                     _LCDEntryModeSet 03D3  
                          _clearstr 0349                            __ptext10 0368  
                          __ptext11 02BC                            __ptext20 0127  
                          __ptext12 0398                            __ptext21 01B4  
                          __ptext13 020C                            __ptext30 0157  
                          __ptext22 0068                            __ptext14 03BF  
                          __ptext31 01E0                            __ptext23 02F2  
                          __ptext15 03C4                            __ptext32 0384  
                          __ptext24 02D7                            __ptext16 00AA  
                          __ptext33 03A1                            __ptext25 02A0  
                          __ptext17 03D3                            __ptext26 0334  
                          __ptext18 03D6                            __ptext27 03CE  
                          __ptext19 03C9                            __ptext28 0376  
                          __ptext29 03B2                            _kbd_eval 02F2  
                 ?i1_LCDWaitNotBusy 0070                  ??i1_LCDWaitNotBusy 0070  
                       ??_gameB_isr 0078                 i1LCDWriteString@str 0075  
                    ??_gameB_redraw 0058                         ??_game_menu 006B  
                          _prev_key 0029                          _LCDPutChar 03C4  
                         psrand@res 0050                     ___eecpymem@from 0050  
                   ___eecpymem@size 0051                   psrand@psrand_seed 0024  
                          init_ram0 035D                            intlevel1 0000  
                LCDWaitNotBusy@busy 0051                         clearstr@str 0050  
                         stringcode 0240      LCDStoreCustom5x8Character@code 0058  
           __end_of_LCDEntryModeSet 03D6                          _OPTION_REG 0081  
                  ??i1_LCDPutRS0Cmd 0074                            stringdir 0240  
                          stringtab 0236                         kbd_eval@col 0070  
                       kbd_eval@row 0072                       ___eecpymem@cp 0052  
                     ___eecpymem@to 0053                     _LCDSetCursorPos 0368  
                      ___eetoc@addr 0054                        ___eetoc@data 0055  
                 ?i1_LCDWriteString 0075  
