

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Aug 26 07:14:13 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F627
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    51                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Generated 22/03/2023 GMT
    55                           ; 
    56                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution. Publication is not required when
    70                           ;        this file is used in an embedded application.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F627 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  008C                     	;# 
   116  008E                     	;# 
   117  0092                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009F                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  008C                     	;# 
   153  008E                     	;# 
   154  0092                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009A                     	;# 
   158  009B                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009F                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000E                     	;# 
   173  000E                     	;# 
   174  000F                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0015                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0017                     	;# 
   182  0018                     	;# 
   183  0019                     	;# 
   184  001A                     	;# 
   185  001F                     	;# 
   186  0081                     	;# 
   187  0085                     	;# 
   188  0086                     	;# 
   189  008C                     	;# 
   190  008E                     	;# 
   191  0092                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009A                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009F                     	;# 
   199  0000                     	;# 
   200  0001                     	;# 
   201  0002                     	;# 
   202  0003                     	;# 
   203  0004                     	;# 
   204  0005                     	;# 
   205  0006                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000E                     	;# 
   210  000E                     	;# 
   211  000F                     	;# 
   212  0010                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0015                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0017                     	;# 
   219  0018                     	;# 
   220  0019                     	;# 
   221  001A                     	;# 
   222  001F                     	;# 
   223  0081                     	;# 
   224  0085                     	;# 
   225  0086                     	;# 
   226  008C                     	;# 
   227  008E                     	;# 
   228  0092                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009A                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009F                     	;# 
   236                           
   237                           	psect	idataEEDATA
   238  0000'                    __pidataEEDATA:
   239  0000'                    _eeprom_cgram_data:	
   240                           ;initializer for _eeprom_cgram_data
   241                           
   242  0000' 0007               	db	7
   243  0001' 0005               	db	5
   244  0002' 000D               	db	13
   245  0003' 0009               	db	9
   246  0004' 001B               	db	27
   247  0005' 001F               	db	31
   248  0006' 001D               	db	29
   249  0007' 0002               	db	2
   250  0008' 001F               	db	31
   251  0009' 0015               	db	21
   252  000A' 000A               	db	10
   253  000B' 0015               	db	21
   254  000C' 000A               	db	10
   255  000D' 001F               	db	31
   256  000E' 0017               	db	23
   257  000F' 0008               	db	8
   258  0010' 001C               	db	28
   259  0011' 000A               	db	10
   260  0012' 0019               	db	25
   261  0013' 000D               	db	13
   262  0014' 001F               	db	31
   263  0015' 001F               	db	31
   264  0016' 001B               	db	27
   265  0017' 0004               	db	4
   266  0018'                    _eeprom_keys:	
   267                           ;initializer for _eeprom_keys
   268                           
   269  0018' 0031               	db	49
   270  0019' 0032               	db	50
   271  001A' 0033               	db	51
   272  001B' 0041               	db	65
   273  001C' 0034               	db	52
   274  001D' 0035               	db	53
   275  001E' 0036               	db	54
   276  001F' 0042               	db	66
   277  0020' 0037               	db	55
   278  0021' 0038               	db	56
   279  0022' 0039               	db	57
   280  0023' 0043               	db	67
   281  0024' 002A               	db	42
   282  0025' 0030               	db	48
   283  0026' 0023               	db	35
   284  0027' 0044               	db	68
   285  0028' 0000               	db	0
   286  0029'                    _tiles:	
   287                           ;initializer for _tiles
   288                           
   289  0029' 0020               	db	32
   290  002A' 0020               	db	32
   291  002B' 0020               	db	32
   292  002C' 0020               	db	32
   293  002D' 0020               	db	32
   294  002E' 0020               	db	32
   295  002F' 0020               	db	32
   296  0030' 0020               	db	32
   297  0031' 0020               	db	32
   298  0032' 0020               	db	32
   299  0033' 0023               	db	35
   300  0034' 0023               	db	35
   301  0035' 0024               	db	36
   302  0036' 0059               	db	89
   303  0037' 0023               	db	35
   304  0038' 0023               	db	35
   305  0005                     _PORTA	set	5
   306  0005                     _PORTAbits	set	5
   307  0012                     _T2CON	set	18
   308  0017                     _CCP1CON	set	23
   309  001F                     _CMCON	set	31
   310  0011                     _TMR2	set	17
   311  0001                     _TMR0	set	1
   312  0015                     _CCPR1L	set	21
   313  0006                     _PORTB	set	6
   314  000B                     _INTCON	set	11
   315  005A                     _T0IF	set	90
   316  009A                     _EEDATA	set	154
   317  009C                     _EECON1	set	156
   318  009B                     _EEADR	set	155
   319  009C                     _EECON1bits	set	156
   320  0092                     _PR2	set	146
   321  0081                     _OPTION_REG	set	129
   322  0086                     _TRISB	set	134
   323  0085                     _TRISA	set	133
   324  008E                     _PCONbits	set	142
   325                           
   326                           	psect	strings
   327  0000'                    __pstrings:
   328  0000'                    stringtab:
   329  0000'                    __stringtab:
   330                           
   331                           ;	String table - string pointers are 1 byte each
   332  0000' 1BFF               	btfsc	btemp+1,7
   333  0001' 280A'              	ljmp	stringcode
   334  0002' 1383               	bcf	3,7
   335  0003' 187F               	btfsc	btemp+1,0
   336  0004' 1783               	bsf	3,7
   337  0005' 0800               	movf	0,w
   338  0006' 0A84               	incf	4,f
   339  0007' 1903               	skipnz
   340  0008' 0AFF               	incf	btemp+1,f
   341  0009' 0008               	return
   342  000A'                    stringcode:
   343  000A'                    stringdir:
   344  000A' 3000'              	movlw	high stringdir
   345  000B' 008A               	movwf	10
   346  000C' 0804               	movf	4,w
   347  000D' 0A84               	incf	4,f
   348  000E' 0782               	addwf	2,f
   349  000F'                    __stringbase:
   350  000F' 3400               	retlw	0
   351  0010'                    __end_of__stringtab:
   352  0010'                    STR_1:
   353  0010' 3456               	retlw	86	;'V'
   354  0011' 3461               	retlw	97	;'a'
   355  0012' 346C               	retlw	108	;'l'
   356  0013' 3461               	retlw	97	;'a'
   357  0014' 3473               	retlw	115	;'s'
   358  0015' 3473               	retlw	115	;'s'
   359  0016' 347A               	retlw	122	;'z'
   360  0017' 3420               	retlw	32	;' '
   361  0018' 346A               	retlw	106	;'j'
   362  0019' 3461               	retlw	97	;'a'
   363  001A' 3474               	retlw	116	;'t'
   364  001B' 3465               	retlw	101	;'e'
   365  001C' 346B               	retlw	107	;'k'
   366  001D' 346F               	retlw	111	;'o'
   367  001E' 3474               	retlw	116	;'t'
   368  001F' 3421               	retlw	33	;'!'
   369  0020' 3400               	retlw	0
   370  0021' 3400               	retlw	0
   371  0022'                    STR_2:
   372  0022' 3441               	retlw	65	;'A'
   373  0023' 3420               	retlw	32	;' '
   374  0024' 342F               	retlw	47	;'/'
   375  0025' 3420               	retlw	32	;' '
   376  0026' 3442               	retlw	66	;'B'
   377  0027' 3400               	retlw	0
   378  0028' 3400               	retlw	0
   379                           
   380                           	psect	cinit
   381  0000'                    start_initialization:	
   382                           ; #config settings
   383                           
   384  0000'                    __initialization:
   385                           
   386                           ; Clear objects allocated to BANK1
   387  0000' 1383               	bcf	3,7	;select IRP bank0
   388  0001' 3000'              	movlw	low __pbssBANK1
   389  0002' 0084               	movwf	4
   390  0003' 3000'              	movlw	low (__pbssBANK1+16)
   391  0004' 2000'              	fcall	clear_ram0
   392                           
   393                           ; Clear objects allocated to BANK0
   394  0005' 3000'              	movlw	low __pbssBANK0
   395  0006' 0084               	movwf	4
   396  0007' 3000'              	movlw	low (__pbssBANK0+45)
   397  0008' 2000'              	fcall	clear_ram0
   398                           
   399                           ; Clear objects allocated to COMMON
   400  0009' 0180'              	clrf	__pbssCOMMON& (0+127)
   401  000A'                    end_of_initialization:	
   402                           ;End of C runtime variable initialization code
   403                           
   404  000A'                    __end_of__initialization:
   405  000A' 0183               	clrf	3
   406  000B' 2800'              	ljmp	_main	;jump to C main() function
   407                           
   408                           	psect	dataEEDATA
   409  0000'                    __pdataEEDATA:
   410                           
   411                           	psect	bssCOMMON
   412  0000'                    __pbssCOMMON:
   413  0000'                    _beep_timer:
   414  0000'                    	ds	1
   415                           
   416                           	psect	bssBANK0
   417  0000'                    __pbssBANK0:
   418  0000'                    _gameB_spd:
   419  0000'                    	ds	2
   420  0002'                    _LCD:
   421  0002'                    	ds	2
   422  0004'                    psrand@psrand_seed:
   423  0004'                    	ds	1
   424  0005'                    _gameB_truckpos:
   425  0005'                    	ds	1
   426  0006'                    _gameB_active:
   427  0006'                    	ds	1
   428  0007'                    _kbd_skip_t0_cyc:
   429  0007'                    	ds	1
   430  0008'                    _key_col_select:
   431  0008'                    	ds	1
   432  0009'                    _prev_key:
   433  0009'                    	ds	1
   434  000A'                    _key:
   435  000A'                    	ds	1
   436  000B'                    _gameB_track:
   437  000B'                    	ds	34
   438                           
   439                           	psect	bssBANK1
   440  0000'                    __pbssBANK1:
   441  0000'                    _keys:
   442  0000'                    	ds	16
   443                           
   444                           	psect	inittext
   445  0000'                    init_fetch0:	
   446                           ;	Called with low address in FSR and high address in W
   447                           
   448  0000' 087E               	movf	126,w
   449  0001' 008A               	movwf	10
   450  0002' 087F               	movf	127,w
   451  0003' 0082               	movwf	2
   452  0004'                    init_ram0:	
   453                           ;Called with:
   454                           ;	high address of idata address in btemp 
   455                           ;	low address of idata address in btemp+1 
   456                           ;	low address of data in FSR
   457                           ;	high address + 1 of data in btemp-1
   458                           
   459  0004' 2000'              	fcall	init_fetch0
   460  0005' 0080               	movwf	0
   461  0006' 0A84               	incf	4,f
   462  0007' 0804               	movf	4,w
   463  0008' 067D               	xorwf	125,w
   464  0009' 1903               	btfsc	3,2
   465  000A' 3400               	retlw	0
   466  000B' 0AFF               	incf	127,f
   467  000C' 1903               	btfsc	3,2
   468  000D' 0AFE               	incf	126,f
   469  000E' 2804'              	goto	init_ram0
   470                           
   471                           	psect	clrtext
   472  0000'                    clear_ram0:	
   473                           ;	Called with FSR containing the base address, and
   474                           ;	W with the last address+1
   475                           
   476  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
   477  0001'                    clrloop0:
   478  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
   479  0002' 0A84               	incf	4,f	;increment pointer
   480  0003' 0604               	xorwf	4,w	;XOR with final address
   481  0004' 1903               	btfsc	3,2	;have we reached the end yet?
   482  0005' 3400               	retlw	0	;all done for this memory range, return
   483  0006' 0604               	xorwf	4,w	;XOR again to restore value
   484  0007' 2801'              	goto	clrloop0	;do the next byte
   485                           
   486                           	psect	cstackCOMMON
   487  0000'                    __pcstackCOMMON:
   488  0000'                    ?_init:
   489  0000'                    ?_LCDInit:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0000'                    ?_LCDDisplayControl:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0000'                    ?_game_menu:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0000'                    ?_LCDPutRS0Cmd:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0000'                    ?_kbd_eval:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0000'                    ?__beep:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0000'                    ??__beep:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0000'                    ?_beep_isr:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0000'                    ??_beep_isr:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0000'                    ?_gameB_isr:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0000'                    ?_gameA:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0000'                    ?_gameB:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0000'                    ?_LCDPutChar:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0000'                    ?_gameB_redraw:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0000'                    ?_LCDWaitNotBusy:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  0000'                    ?_clearstr:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0000'                    ?_main:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0000'                    ?_isr:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0000'                    ?__getkey:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0000'                    ?_psrand:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0000'                    ?_LCDPut:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0000'                    ?_LCDEntryModeSet:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0000'                    ?_LCDSetCGRAMAddress:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0000'                    ?___eetoc:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0000'                    ?i1_gameB_redraw:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0000'                    ?i1_LCDPut:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0000'                    ?i1_LCDWaitNotBusy:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0000'                    ??i1_LCDWaitNotBusy:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0000'                    ?i1_LCDPutRS0Cmd:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0000'                    ?i1_LCDPutChar:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0000'                    __beep@length:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0000'                    kbd_eval@col:	
   583                           ; 1 bytes @ 0x0
   584                           
   585                           
   586                           ; 1 bytes @ 0x0
   587  0000'                    	ds	1
   588  0001'                    ??_kbd_eval:
   589  0001'                    kbd_eval@key_ptr:	
   590                           ; 1 bytes @ 0x1
   591                           
   592  0001'                    i1LCDWaitNotBusy@busy:	
   593                           ; 1 bytes @ 0x1
   594                           
   595                           
   596                           ; 1 bytes @ 0x1
   597  0001'                    	ds	1
   598  0002'                    ??i1_LCDPut:
   599  0002'                    kbd_eval@row:	
   600                           ; 1 bytes @ 0x2
   601                           
   602                           
   603                           ; 1 bytes @ 0x2
   604  0002'                    	ds	1
   605  0003'                    i1LCDPut@data:
   606                           
   607                           ; 1 bytes @ 0x3
   608  0003'                    	ds	1
   609  0004'                    ??i1_LCDPutRS0Cmd:
   610  0004'                    ??i1_LCDPutChar:	
   611                           ; 1 bytes @ 0x4
   612                           
   613  0004'                    i1LCDPutRS0Cmd@cmd:	
   614                           ; 1 bytes @ 0x4
   615                           
   616  0004'                    i1LCDPutChar@chr:	
   617                           ; 1 bytes @ 0x4
   618                           
   619                           
   620                           ; 1 bytes @ 0x4
   621  0004'                    	ds	1
   622  0005'                    ?i1_LCDSetCursorPos:
   623  0005'                    ?i1_LCDWriteString:	
   624                           ; 1 bytes @ 0x5
   625                           
   626  0005'                    i1LCDSetCursorPos@y:	
   627                           ; 1 bytes @ 0x5
   628                           
   629  0005'                    i1LCDWriteString@str:	
   630                           ; 1 bytes @ 0x5
   631                           
   632                           
   633                           ; 2 bytes @ 0x5
   634  0005'                    	ds	1
   635  0006'                    ??i1_LCDSetCursorPos:
   636                           
   637                           ; 1 bytes @ 0x6
   638  0006'                    	ds	1
   639  0007'                    ??i1_LCDWriteString:
   640  0007'                    i1LCDSetCursorPos@x:	
   641                           ; 1 bytes @ 0x7
   642                           
   643                           
   644                           ; 1 bytes @ 0x7
   645  0007'                    	ds	1
   646  0008'                    ??_gameB_isr:
   647  0008'                    ??_isr:	
   648                           ; 1 bytes @ 0x8
   649                           
   650  0008'                    ??i1_gameB_redraw:	
   651                           ; 1 bytes @ 0x8
   652                           
   653                           
   654                           ; 1 bytes @ 0x8
   655  0008'                    	ds	5
   656                           
   657                           	psect	cstackBANK0
   658  0000'                    __pcstackBANK0:
   659  0000'                    isr@_col:
   660                           
   661                           ; 1 bytes @ 0x0
   662  0000'                    	ds	1
   663  0001'                    isr@_row:
   664                           
   665                           ; 1 bytes @ 0x1
   666  0001'                    	ds	1
   667  0002'                    isr@_key:
   668                           
   669                           ; 1 bytes @ 0x2
   670  0002'                    	ds	1
   671  0003'                    ??_init:
   672  0003'                    ??_LCDWaitNotBusy:	
   673                           ; 1 bytes @ 0x3
   674                           
   675  0003'                    ??_clearstr:	
   676                           ; 1 bytes @ 0x3
   677                           
   678  0003'                    ??__getkey:	
   679                           ; 1 bytes @ 0x3
   680                           
   681  0003'                    ??_psrand:	
   682                           ; 1 bytes @ 0x3
   683                           
   684  0003'                    ?___eecpymem:	
   685                           ; 1 bytes @ 0x3
   686                           
   687  0003'                    clearstr@str:	
   688                           ; 1 bytes @ 0x3
   689                           
   690  0003'                    psrand@res:	
   691                           ; 1 bytes @ 0x3
   692                           
   693  0003'                    ___eecpymem@from:	
   694                           ; 1 bytes @ 0x3
   695                           
   696                           
   697                           ; 1 bytes @ 0x3
   698  0003'                    	ds	1
   699  0004'                    LCDWaitNotBusy@busy:
   700  0004'                    ___eecpymem@size:	
   701                           ; 1 bytes @ 0x4
   702                           
   703                           
   704                           ; 1 bytes @ 0x4
   705  0004'                    	ds	1
   706  0005'                    ??_LCDPut:
   707  0005'                    ??___eecpymem:	
   708                           ; 1 bytes @ 0x5
   709                           
   710  0005'                    ___eecpymem@cp:	
   711                           ; 1 bytes @ 0x5
   712                           
   713                           
   714                           ; 1 bytes @ 0x5
   715  0005'                    	ds	1
   716  0006'                    LCDPut@data:
   717  0006'                    ___eecpymem@to:	
   718                           ; 1 bytes @ 0x6
   719                           
   720                           
   721                           ; 1 bytes @ 0x6
   722  0006'                    	ds	1
   723  0007'                    ??_LCDPutRS0Cmd:
   724  0007'                    ??_LCDPutChar:	
   725                           ; 1 bytes @ 0x7
   726                           
   727  0007'                    ??___eetoc:	
   728                           ; 1 bytes @ 0x7
   729                           
   730  0007'                    LCDPutRS0Cmd@cmd:	
   731                           ; 1 bytes @ 0x7
   732                           
   733  0007'                    LCDPutChar@chr:	
   734                           ; 1 bytes @ 0x7
   735                           
   736  0007'                    ___eetoc@addr:	
   737                           ; 1 bytes @ 0x7
   738                           
   739                           
   740                           ; 1 bytes @ 0x7
   741  0007'                    	ds	1
   742  0008'                    ??_LCDInit:
   743  0008'                    ??_LCDDisplayControl:	
   744                           ; 1 bytes @ 0x8
   745                           
   746  0008'                    ?_LCDSetCursorPos:	
   747                           ; 1 bytes @ 0x8
   748                           
   749  0008'                    ?_LCDWriteString:	
   750                           ; 1 bytes @ 0x8
   751                           
   752  0008'                    ??_LCDEntryModeSet:	
   753                           ; 1 bytes @ 0x8
   754                           
   755  0008'                    ??_LCDSetCGRAMAddress:	
   756                           ; 1 bytes @ 0x8
   757                           
   758  0008'                    LCDSetCGRAMAddress@addr:	
   759                           ; 1 bytes @ 0x8
   760                           
   761  0008'                    LCDSetCursorPos@y:	
   762                           ; 1 bytes @ 0x8
   763                           
   764  0008'                    ___eetoc@data:	
   765                           ; 1 bytes @ 0x8
   766                           
   767  0008'                    LCDWriteString@str:	
   768                           ; 1 bytes @ 0x8
   769                           
   770                           
   771                           ; 2 bytes @ 0x8
   772  0008'                    	ds	1
   773  0009'                    ?_LCDStoreCustom5x8Character:
   774  0009'                    ??_LCDSetCursorPos:	
   775                           ; 1 bytes @ 0x9
   776                           
   777  0009'                    LCDStoreCustom5x8Character@dataarr:	
   778                           ; 1 bytes @ 0x9
   779                           
   780                           
   781                           ; 1 bytes @ 0x9
   782  0009'                    	ds	1
   783  000A'                    ??_LCDStoreCustom5x8Character:
   784  000A'                    ??_LCDWriteString:	
   785                           ; 1 bytes @ 0xA
   786                           
   787  000A'                    LCDSetCursorPos@x:	
   788                           ; 1 bytes @ 0xA
   789                           
   790  000A'                    LCDInit@i:	
   791                           ; 1 bytes @ 0xA
   792                           
   793                           
   794                           ; 1 bytes @ 0xA
   795  000A'                    	ds	1
   796  000B'                    ??_gameA:
   797  000B'                    ??_gameB:	
   798                           ; 1 bytes @ 0xB
   799                           
   800  000B'                    ??_gameB_redraw:	
   801                           ; 1 bytes @ 0xB
   802                           
   803  000B'                    LCDStoreCustom5x8Character@code:	
   804                           ; 1 bytes @ 0xB
   805                           
   806  000B'                    gameB@i:	
   807                           ; 1 bytes @ 0xB
   808                           
   809  000B'                    gameA@second_line:	
   810                           ; 2 bytes @ 0xB
   811                           
   812                           
   813                           ; 17 bytes @ 0xB
   814  000B'                    	ds	1
   815  000C'                    LCDStoreCustom5x8Character@cnt:
   816                           
   817                           ; 1 bytes @ 0xC
   818  000C'                    	ds	1
   819  000D'                    gameB@j:
   820                           
   821                           ; 1 bytes @ 0xD
   822  000D'                    	ds	1
   823  000E'                    gameB@i_203:
   824                           
   825                           ; 1 bytes @ 0xE
   826  000E'                    	ds	14
   827  001C'                    gameA@xpos:
   828                           
   829                           ; 1 bytes @ 0x1C
   830  001C'                    	ds	1
   831  001D'                    gameA@ypos:
   832                           
   833                           ; 1 bytes @ 0x1D
   834  001D'                    	ds	1
   835  001E'                    ??_game_menu:
   836  001E'                    ??_main:	
   837                           ; 1 bytes @ 0x1E
   838                           
   839  001E'                    main@i:	
   840                           ; 1 bytes @ 0x1E
   841                           
   842                           
   843                           ; 1 bytes @ 0x1E
   844  001E'                    	ds	1
   845                           
   846                           	psect	maintext
   847  0000'                    __pmaintext:	
   848 ;;
   849 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   850 ;;
   851 ;; *************** function _main *****************
   852 ;; Defined at:
   853 ;;		line 80 in file "main.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  i               1   30[BANK0 ] unsigned char 
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   862 ;; Tracked objects:
   863 ;;		On entry : B00/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   867 ;;      Params:         0       0       0       0
   868 ;;      Locals:         0       1       0       0
   869 ;;      Temps:          0       0       0       0
   870 ;;      Totals:         0       1       0       0
   871 ;;Total ram usage:        1 bytes
   872 ;; Hardware stack levels required when called: 14
   873 ;; This function calls:
   874 ;;		_LCDDisplayControl
   875 ;;		_LCDInit
   876 ;;		_LCDPutRS0Cmd
   877 ;;		_LCDStoreCustom5x8Character
   878 ;;		___eetoc
   879 ;;		_game_menu
   880 ;;		_init
   881 ;; This function is called by:
   882 ;;		Startup code after reset
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886  0000'                    _main:	
   887                           ;psect for function _main
   888                           
   889                           
   890                           ;main.c: 83: init();
   891                           
   892                           ;incstack = 0
   893 ;; hardware stack exceeded
   894                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   895  0000' 2000'              	fcall	_init
   896                           
   897                           ;main.c: 85: for (uint8_t i = 15; i; i--) {
   898  0001' 300F               	movlw	15
   899  0002' 1283               	bcf	3,5	;RP0=0, select bank0
   900  0003' 1303               	bcf	3,6	;RP1=0, select bank0
   901  0004' 009E'              	movwf	main@i
   902  0005'                    l1815:
   903  0005' 081E'              	movf	main@i,w
   904  0006' 1903               	btfsc	3,2
   905  0007' 2817'              	goto	l1817
   906                           
   907                           ;main.c: 86: keys[i] = eeprom_keys[i];
   908  0008' 081E'              	movf	main@i,w
   909  0009' 3E00'              	addlw	low _eeprom_keys
   910  000A' 2000'              	fcall	___eetoc
   911  000B' 00FF               	movwf	127
   912  000C' 1283               	bcf	3,5	;RP0=0, select bank0
   913  000D' 1303               	bcf	3,6	;RP1=0, select bank0
   914  000E' 081E'              	movf	main@i,w
   915  000F' 3E00'              	addlw	(low (_keys| 0))& (0+255)
   916  0010' 0084               	movwf	4
   917  0011' 087F               	movf	127,w
   918  0012' 1383               	bcf	3,7	;select IRP bank1
   919  0013' 0080               	movwf	0
   920  0014' 3001               	movlw	1
   921  0015' 029E'              	subwf	main@i,f
   922  0016' 2805'              	goto	l1815
   923  0017'                    l1817:
   924                           
   925                           ;main.c: 87: };main.c: 90: LCDInit();
   926  0017' 2000'              	fcall	_LCDInit
   927                           
   928                           ;main.c: 93: LCDStoreCustom5x8Character(0, eeprom_cgram_data[0]);
   929  0018' 3000'              	movlw	(low _eeprom_cgram_data)& (0+255)
   930  0019' 1283               	bcf	3,5	;RP0=0, select bank0
   931  001A' 1303               	bcf	3,6	;RP1=0, select bank0
   932  001B' 0089'              	movwf	LCDStoreCustom5x8Character@dataarr
   933  001C' 3000               	movlw	0
   934  001D' 2000'              	fcall	_LCDStoreCustom5x8Character
   935                           
   936                           ;main.c: 94: LCDStoreCustom5x8Character(1, eeprom_cgram_data[1]);
   937  001E' 3000'              	movlw	(low (_eeprom_cgram_data+8))& (0+255)
   938  001F' 1283               	bcf	3,5	;RP0=0, select bank0
   939  0020' 1303               	bcf	3,6	;RP1=0, select bank0
   940  0021' 0089'              	movwf	LCDStoreCustom5x8Character@dataarr
   941  0022' 3001               	movlw	1
   942  0023' 2000'              	fcall	_LCDStoreCustom5x8Character
   943                           
   944                           ;main.c: 95: LCDStoreCustom5x8Character(2, eeprom_cgram_data[2]);
   945  0024' 3000'              	movlw	(low (_eeprom_cgram_data+16))& (0+255)
   946  0025' 1283               	bcf	3,5	;RP0=0, select bank0
   947  0026' 1303               	bcf	3,6	;RP1=0, select bank0
   948  0027' 0089'              	movwf	LCDStoreCustom5x8Character@dataarr
   949  0028' 3002               	movlw	2
   950  0029' 2000'              	fcall	_LCDStoreCustom5x8Character
   951                           
   952                           ;main.c: 97: LCD.DisplayControl |= (0b00000100);
   953  002A' 1283               	bcf	3,5	;RP0=0, select bank0
   954  002B' 1303               	bcf	3,6	;RP1=0, select bank0
   955  002C' 1503'              	bsf	_LCD+1,2
   956                           
   957                           ;main.c: 98: LCDDisplayControl();
   958  002D' 2000'              	fcall	_LCDDisplayControl
   959                           
   960                           ;main.c: 101: INTCON = 0b10100000;
   961  002E' 30A0               	movlw	160
   962  002F' 008B               	movwf	11	;volatile
   963  0030'                    l1831:
   964                           
   965                           ;main.c: 105: game_menu();
   966  0030' 2000'              	fcall	_game_menu
   967                           
   968                           ;main.c: 107: LCDPutRS0Cmd(0b00000001);
   969  0031' 3001               	movlw	1
   970  0032' 2000'              	fcall	_LCDPutRS0Cmd
   971                           
   972                           ;main.c: 108: LCD.DisplayControl &= (~(0b00000010)) & (~(0b00000001));
   973  0033' 30FC               	movlw	252
   974  0034' 00FF               	movwf	127
   975  0035' 087F               	movf	127,w
   976  0036' 1283               	bcf	3,5	;RP0=0, select bank0
   977  0037' 1303               	bcf	3,6	;RP1=0, select bank0
   978  0038' 0583'              	andwf	_LCD+1,f
   979                           
   980                           ;main.c: 109: LCDDisplayControl();
   981  0039' 2000'              	fcall	_LCDDisplayControl
   982  003A' 2830'              	goto	l1831
   983  003B'                    __end_of_main:
   984                           
   985                           	psect	text1
   986  0000'                    __ptext1:	
   987 ;; *************** function _init *****************
   988 ;; Defined at:
   989 ;;		line 222 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;		None
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      void 
   996 ;; Registers used:
   997 ;;		wreg, status,2
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1003 ;;      Params:         0       0       0       0
  1004 ;;      Locals:         0       0       0       0
  1005 ;;      Temps:          0       0       0       0
  1006 ;;      Totals:         0       0       0       0
  1007 ;;Total ram usage:        0 bytes
  1008 ;; Hardware stack levels used: 1
  1009 ;; Hardware stack levels required when called: 7
  1010 ;; This function calls:
  1011 ;;		Nothing
  1012 ;; This function is called by:
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017  0000'                    _init:	
  1018                           ;psect for function _init
  1019                           
  1020                           
  1021                           ;main.c: 225: PCONbits.OSCF = 1;
  1022                           
  1023                           ;incstack = 0
  1024                           ; Regs used in _init: [wreg+status,2]
  1025  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1026  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1027  0002' 158E               	bsf	14,3	;volatile
  1028                           
  1029                           ;main.c: 227: CMCON = 7;
  1030  0003' 3007               	movlw	7
  1031  0004' 1283               	bcf	3,5	;RP0=0, select bank0
  1032  0005' 1303               	bcf	3,6	;RP1=0, select bank0
  1033  0006' 009F               	movwf	31	;volatile
  1034                           
  1035                           ;main.c: 230: TRISA = 0x0c;
  1036  0007' 300C               	movlw	12
  1037  0008' 1683               	bsf	3,5	;RP0=1, select bank1
  1038  0009' 1303               	bcf	3,6	;RP1=0, select bank1
  1039  000A' 0085               	movwf	5	;volatile
  1040                           
  1041                           ;main.c: 234: TRISB = 0xf0;
  1042  000B' 30F0               	movlw	240
  1043  000C' 0086               	movwf	6	;volatile
  1044                           
  1045                           ;main.c: 238: OPTION_REG = 0x85;
  1046  000D' 3085               	movlw	133
  1047  000E' 0081               	movwf	1	;volatile
  1048                           
  1049                           ;main.c: 243: PR2 = 119;
  1050  000F' 3077               	movlw	119
  1051  0010' 0092               	movwf	18	;volatile
  1052                           
  1053                           ;main.c: 244: CCPR1L = 0;
  1054  0011' 1283               	bcf	3,5	;RP0=0, select bank0
  1055  0012' 1303               	bcf	3,6	;RP1=0, select bank0
  1056  0013' 0195               	clrf	21	;volatile
  1057                           
  1058                           ;main.c: 245: CCP1CON = 0x0C;
  1059  0014' 300C               	movlw	12
  1060  0015' 0097               	movwf	23	;volatile
  1061                           
  1062                           ;main.c: 246: T2CON = 0x07;
  1063  0016' 3007               	movlw	7
  1064  0017' 0092               	movwf	18	;volatile
  1065  0018' 0008               	return
  1066  0019'                    __end_of_init:
  1067                           
  1068                           	psect	text2
  1069  0000'                    __ptext2:	
  1070 ;; *************** function _game_menu *****************
  1071 ;; Defined at:
  1072 ;;		line 252 in file "main.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;		None
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1086 ;;      Params:         0       0       0       0
  1087 ;;      Locals:         0       0       0       0
  1088 ;;      Temps:          0       0       0       0
  1089 ;;      Totals:         0       0       0       0
  1090 ;;Total ram usage:        0 bytes
  1091 ;; Hardware stack levels used: 1
  1092 ;; Hardware stack levels required when called: 13
  1093 ;; This function calls:
  1094 ;;		_LCDDisplayControl
  1095 ;;		_LCDPutRS0Cmd
  1096 ;;		_LCDSetCursorPos
  1097 ;;		_LCDWriteString
  1098 ;;		__getkey
  1099 ;;		_gameA
  1100 ;;		_gameB
  1101 ;; This function is called by:
  1102 ;;		_main
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106  0000'                    _game_menu:	
  1107                           ;psect for function _game_menu
  1108                           
  1109                           
  1110                           ;main.c: 254: LCDSetCursorPos(0, 0);
  1111                           
  1112                           ;incstack = 0
  1113 ;; hardware stack exceeded
  1114                           ; Regs used in _game_menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1115  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1116  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1117  0002' 0188'              	clrf	LCDSetCursorPos@y
  1118  0003' 3000               	movlw	0
  1119  0004' 2000'              	fcall	_LCDSetCursorPos
  1120                           
  1121                           ;main.c: 255: LCDWriteString("Valassz jatekot!\0");
  1122  0005' 3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1123  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  1124  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  1125  0008' 0088'              	movwf	LCDWriteString@str
  1126  0009' 3080               	movlw	128
  1127  000A' 0089'              	movwf	LCDWriteString@str+1
  1128  000B' 2000'              	fcall	_LCDWriteString
  1129                           
  1130                           ;main.c: 256: LCDSetCursorPos(0, 1);
  1131  000C' 1283               	bcf	3,5	;RP0=0, select bank0
  1132  000D' 1303               	bcf	3,6	;RP1=0, select bank0
  1133  000E' 0188'              	clrf	LCDSetCursorPos@y
  1134  000F' 0A88'              	incf	LCDSetCursorPos@y,f
  1135  0010' 3000               	movlw	0
  1136  0011' 2000'              	fcall	_LCDSetCursorPos
  1137                           
  1138                           ;main.c: 257: LCDWriteString("A / B\0");
  1139  0012' 3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1140  0013' 1283               	bcf	3,5	;RP0=0, select bank0
  1141  0014' 1303               	bcf	3,6	;RP1=0, select bank0
  1142  0015' 0088'              	movwf	LCDWriteString@str
  1143  0016' 3080               	movlw	128
  1144  0017' 0089'              	movwf	LCDWriteString@str+1
  1145  0018' 2000'              	fcall	_LCDWriteString
  1146  0019' 2826'              	goto	l1753
  1147  001A'                    l1741:
  1148                           
  1149                           ;main.c: 263: LCDPutRS0Cmd(0b00000001);
  1150  001A' 3001               	movlw	1
  1151  001B' 2000'              	fcall	_LCDPutRS0Cmd
  1152                           
  1153                           ;main.c: 264: LCD.DisplayControl |= (0b00000001);
  1154  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  1155  001D' 1303               	bcf	3,6	;RP1=0, select bank0
  1156  001E' 1403'              	bsf	_LCD+1,0
  1157                           
  1158                           ;main.c: 265: LCDDisplayControl();
  1159  001F' 2000'              	fcall	_LCDDisplayControl
  1160                           
  1161                           ;main.c: 267: gameA();
  1162  0020' 2000'              	fcall	_gameA
  1163                           
  1164                           ;main.c: 268: break;
  1165  0021' 0008               	return
  1166  0022'                    l1747:
  1167                           
  1168                           ;main.c: 271: LCDPutRS0Cmd(0b00000001);
  1169  0022' 3001               	movlw	1
  1170  0023' 2000'              	fcall	_LCDPutRS0Cmd
  1171                           
  1172                           ;main.c: 273: gameB();
  1173  0024' 2000'              	fcall	_gameB
  1174                           
  1175                           ;main.c: 274: break;
  1176  0025' 0008               	return
  1177  0026'                    l1753:
  1178  0026' 2000'              	fcall	__getkey
  1179                           
  1180                           ; Switch size 1, requested type "simple"
  1181                           ; Number of cases is 2, Range of values is 65 to 66
  1182                           ; switch strategies available:
  1183                           ; Name         Instructions Cycles
  1184                           ; simple_byte            7     4 (average)
  1185                           ; direct_byte           11     9 (fixed)
  1186                           ; jumptable            263     9 (fixed)
  1187                           ;	Chosen strategy is simple_byte
  1188  0027' 3A41               	xorlw	65	; case 65
  1189  0028' 1903               	skipnz
  1190  0029' 281A'              	goto	l1741
  1191  002A' 3A03               	xorlw	3	; case 66
  1192  002B' 1903               	skipnz
  1193  002C' 2822'              	goto	l1747
  1194  002D' 2826'              	goto	l1753
  1195  002E' 0008               	return
  1196  002F'                    __end_of_game_menu:
  1197                           
  1198                           	psect	text3
  1199  0000'                    __ptext3:	
  1200 ;; *************** function _gameB *****************
  1201 ;; Defined at:
  1202 ;;		line 329 in file "main.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  j               1   13[BANK0 ] unsigned char 
  1207 ;;  i               1   14[BANK0 ] unsigned char 
  1208 ;;  i               2   11[BANK0 ] unsigned int 
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1218 ;;      Params:         0       0       0       0
  1219 ;;      Locals:         0       4       0       0
  1220 ;;      Temps:          0       0       0       0
  1221 ;;      Totals:         0       4       0       0
  1222 ;;Total ram usage:        4 bytes
  1223 ;; Hardware stack levels used: 1
  1224 ;; Hardware stack levels required when called: 12
  1225 ;; This function calls:
  1226 ;;		___eetoc
  1227 ;;		_clearstr
  1228 ;;		_gameB_redraw
  1229 ;;		_psrand
  1230 ;; This function is called by:
  1231 ;;		_game_menu
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235  0000'                    _gameB:	
  1236                           ;psect for function _gameB
  1237                           
  1238                           
  1239                           ;main.c: 330: gameB_track[0][16] = 0;
  1240                           
  1241                           ;incstack = 0
  1242 ;; hardware stack exceeded
  1243                           ; Regs used in _gameB: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1244  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1245  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1246  0002' 019B'              	clrf	_gameB_track+16
  1247                           
  1248                           ;main.c: 331: gameB_track[1][16] = 0;
  1249  0003' 01AC'              	clrf	_gameB_track+33
  1250                           
  1251                           ;main.c: 333: clearstr(gameB_track[0]);
  1252  0004' 3000'              	movlw	(low (_gameB_track| 0))& (0+255)
  1253  0005' 2000'              	fcall	_clearstr
  1254                           
  1255                           ;main.c: 334: clearstr(gameB_track[1]);
  1256  0006' 3000'              	movlw	(low ((_gameB_track| 0+17)))& (0+255)
  1257  0007' 2000'              	fcall	_clearstr
  1258                           
  1259                           ;main.c: 336: gameB_active = 1;
  1260  0008' 1283               	bcf	3,5	;RP0=0, select bank0
  1261  0009' 1303               	bcf	3,6	;RP1=0, select bank0
  1262  000A' 0186'              	clrf	_gameB_active
  1263  000B' 0A86'              	incf	_gameB_active,f
  1264                           
  1265                           ;main.c: 337: gameB_spd = 1000;
  1266  000C' 30E8               	movlw	232
  1267  000D' 0080'              	movwf	_gameB_spd
  1268  000E' 3003               	movlw	3
  1269  000F' 0081'              	movwf	_gameB_spd+1
  1270  0010'                    l1649:	
  1271                           ;main.c: 341: while (gameB_active) {
  1272                           
  1273  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  1274  0011' 1303               	bcf	3,6	;RP1=0, select bank0
  1275  0012' 0806'              	movf	_gameB_active,w
  1276  0013' 1903               	btfsc	3,2
  1277  0014' 0008               	return
  1278                           
  1279                           ;main.c: 342: for (uint16_t i = gameB_spd; i && gameB_active; i--) {
  1280  0015' 0801'              	movf	_gameB_spd+1,w
  1281  0016' 008C'              	movwf	gameB@i+1
  1282  0017' 0800'              	movf	_gameB_spd,w
  1283  0018' 008B'              	movwf	gameB@i
  1284  0019' 2823'              	goto	l1629
  1285  001A'                    l1631:
  1286  001A' 0806'              	movf	_gameB_active,w
  1287  001B' 1903               	btfsc	3,2
  1288  001C' 2827'              	goto	l172
  1289  001D' 3001               	movlw	1
  1290  001E' 028B'              	subwf	gameB@i,f
  1291  001F' 3000               	movlw	0
  1292  0020' 1C03               	skipc
  1293  0021' 038C'              	decf	gameB@i+1,f
  1294  0022' 028C'              	subwf	gameB@i+1,f
  1295  0023'                    l1629:
  1296  0023' 080B'              	movf	gameB@i,w
  1297  0024' 040C'              	iorwf	gameB@i+1,w
  1298  0025' 1D03               	btfss	3,2
  1299  0026' 281A'              	goto	l1631
  1300  0027'                    l172:
  1301                           
  1302                           ;main.c: 343: };main.c: 346: for (uint8_t i = 1; i < 16; i++) {
  1303  0027' 018E'              	clrf	gameB@i_203
  1304  0028' 0A8E'              	incf	gameB@i_203,f
  1305  0029'                    l1637:
  1306                           
  1307                           ;main.c: 347: uint8_t j = i - 1;
  1308  0029' 080E'              	movf	gameB@i_203,w
  1309  002A' 3EFF               	addlw	255
  1310  002B' 008D'              	movwf	gameB@j
  1311                           
  1312                           ;main.c: 348: gameB_track[0][j] = gameB_track[0][i];
  1313  002C' 080E'              	movf	gameB@i_203,w
  1314  002D' 3E00'              	addlw	(low (_gameB_track| 0))& (0+255)
  1315  002E' 0084               	movwf	4
  1316  002F' 1383               	bcf	3,7	;select IRP bank0
  1317  0030' 0800               	movf	0,w
  1318  0031' 00FF               	movwf	127
  1319  0032' 080D'              	movf	gameB@j,w
  1320  0033' 3E00'              	addlw	(low (_gameB_track| 0))& (0+255)
  1321  0034' 0084               	movwf	4
  1322  0035' 087F               	movf	127,w
  1323  0036' 0080               	movwf	0
  1324                           
  1325                           ;main.c: 349: gameB_track[1][j] = gameB_track[1][i];
  1326  0037' 080E'              	movf	gameB@i_203,w
  1327  0038' 3E00'              	addlw	(low ((_gameB_track| 0+17)))& (0+255)
  1328  0039' 0084               	movwf	4
  1329  003A' 0800               	movf	0,w
  1330  003B' 00FF               	movwf	127
  1331  003C' 080D'              	movf	gameB@j,w
  1332  003D' 3E00'              	addlw	(low ((_gameB_track| 0+17)))& (0+255)
  1333  003E' 0084               	movwf	4
  1334  003F' 087F               	movf	127,w
  1335  0040' 0080               	movwf	0
  1336  0041' 3001               	movlw	1
  1337  0042' 00FF               	movwf	127
  1338  0043' 087F               	movf	127,w
  1339  0044' 078E'              	addwf	gameB@i_203,f
  1340  0045' 3010               	movlw	16
  1341  0046' 020E'              	subwf	gameB@i_203,w
  1342  0047' 1C03               	skipc
  1343  0048' 2829'              	goto	l1637
  1344                           
  1345                           ;main.c: 350: };main.c: 356: gameB_track[0][15] = tiles[psrand()];
  1346  0049' 2000'              	fcall	_psrand
  1347  004A' 3E00'              	addlw	low _tiles
  1348  004B' 2000'              	fcall	___eetoc
  1349  004C' 1283               	bcf	3,5	;RP0=0, select bank0
  1350  004D' 1303               	bcf	3,6	;RP1=0, select bank0
  1351  004E' 009A'              	movwf	_gameB_track+15
  1352                           
  1353                           ;main.c: 357: gameB_track[1][15] = tiles[psrand()];
  1354  004F' 2000'              	fcall	_psrand
  1355  0050' 3E00'              	addlw	low _tiles
  1356  0051' 2000'              	fcall	___eetoc
  1357  0052' 1283               	bcf	3,5	;RP0=0, select bank0
  1358  0053' 1303               	bcf	3,6	;RP1=0, select bank0
  1359  0054' 00AB'              	movwf	_gameB_track+32
  1360                           
  1361                           ;main.c: 359: gameB_redraw();
  1362  0055' 2000'              	fcall	_gameB_redraw
  1363  0056' 2810'              	goto	l1649
  1364  0057'                    __end_of_gameB:
  1365                           
  1366                           	psect	text4
  1367  0000'                    __ptext4:	
  1368 ;; *************** function _psrand *****************
  1369 ;; Defined at:
  1370 ;;		line 209 in file "main.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  res             1    3[BANK0 ] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      unsigned char 
  1377 ;; Registers used:
  1378 ;;		wreg, status,2, status,0
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1384 ;;      Params:         0       0       0       0
  1385 ;;      Locals:         0       1       0       0
  1386 ;;      Temps:          0       0       0       0
  1387 ;;      Totals:         0       1       0       0
  1388 ;;Total ram usage:        1 bytes
  1389 ;; Hardware stack levels used: 1
  1390 ;; Hardware stack levels required when called: 7
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_gameB
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398  0000'                    _psrand:	
  1399                           ;psect for function _psrand
  1400                           
  1401                           
  1402                           ;main.c: 211: static uint8_t psrand_seed;;main.c: 212: uint8_t res = (TMR0 ^ TMR2 ^ psra
      +                          nd_seed) & 0x0f;
  1403                           
  1404                           ;incstack = 0
  1405 ;; hardware stack exceeded
  1406                           ; Regs used in _psrand: [wreg+status,2+status,0]
  1407  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1408  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1409  0002' 0801               	movf	1,w	;volatile
  1410  0003' 0611               	xorwf	17,w	;volatile
  1411  0004' 0604'              	xorwf	psrand@psrand_seed,w
  1412  0005' 390F               	andlw	15
  1413  0006' 0083'              	movwf	psrand@res
  1414                           
  1415                           ;main.c: 214: psrand_seed = res;
  1416  0007' 0803'              	movf	psrand@res,w
  1417  0008' 0084'              	movwf	psrand@psrand_seed
  1418                           
  1419                           ;main.c: 216: return res;
  1420  0009' 0803'              	movf	psrand@res,w
  1421  000A' 0008               	return
  1422  000B'                    __end_of_psrand:
  1423                           
  1424                           	psect	text5
  1425  0000'                    __ptext5:	
  1426 ;; *************** function _gameB_redraw *****************
  1427 ;; Defined at:
  1428 ;;		line 387 in file "main.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  1    wreg      void 
  1435 ;; Registers used:
  1436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1442 ;;      Params:         0       0       0       0
  1443 ;;      Locals:         0       0       0       0
  1444 ;;      Temps:          0       0       0       0
  1445 ;;      Totals:         0       0       0       0
  1446 ;;Total ram usage:        0 bytes
  1447 ;; Hardware stack levels used: 1
  1448 ;; Hardware stack levels required when called: 11
  1449 ;; This function calls:
  1450 ;;		_LCDPutChar
  1451 ;;		_LCDSetCursorPos
  1452 ;;		_LCDWriteString
  1453 ;; This function is called by:
  1454 ;;		_gameB
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458  0000'                    _gameB_redraw:	
  1459                           ;psect for function _gameB_redraw
  1460                           
  1461                           
  1462                           ;main.c: 388: LCDSetCursorPos(0, 0);
  1463                           
  1464                           ;incstack = 0
  1465 ;; hardware stack exceeded
  1466                           ; Regs used in _gameB_redraw: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1467  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1468  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1469  0002' 0188'              	clrf	LCDSetCursorPos@y
  1470  0003' 3000               	movlw	0
  1471  0004' 2000'              	fcall	_LCDSetCursorPos
  1472                           
  1473                           ;main.c: 389: LCDWriteString(gameB_track[0]);
  1474  0005' 3000'              	movlw	(low (_gameB_track| 0))& (0+255)
  1475  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  1476  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  1477  0008' 0088'              	movwf	LCDWriteString@str
  1478  0009' 3000               	movlw	0
  1479  000A' 0089'              	movwf	LCDWriteString@str+1
  1480  000B' 2000'              	fcall	_LCDWriteString
  1481                           
  1482                           ;main.c: 390: LCDSetCursorPos(0, 1);
  1483  000C' 1283               	bcf	3,5	;RP0=0, select bank0
  1484  000D' 1303               	bcf	3,6	;RP1=0, select bank0
  1485  000E' 0188'              	clrf	LCDSetCursorPos@y
  1486  000F' 0A88'              	incf	LCDSetCursorPos@y,f
  1487  0010' 3000               	movlw	0
  1488  0011' 2000'              	fcall	_LCDSetCursorPos
  1489                           
  1490                           ;main.c: 391: LCDWriteString(gameB_track[1]);
  1491  0012' 3000'              	movlw	(low ((_gameB_track| 0+17)))& (0+255)
  1492  0013' 1283               	bcf	3,5	;RP0=0, select bank0
  1493  0014' 1303               	bcf	3,6	;RP1=0, select bank0
  1494  0015' 0088'              	movwf	LCDWriteString@str
  1495  0016' 3000               	movlw	0
  1496  0017' 0089'              	movwf	LCDWriteString@str+1
  1497  0018' 2000'              	fcall	_LCDWriteString
  1498                           
  1499                           ;main.c: 393: LCDSetCursorPos(0, gameB_truckpos);
  1500  0019' 1283               	bcf	3,5	;RP0=0, select bank0
  1501  001A' 1303               	bcf	3,6	;RP1=0, select bank0
  1502  001B' 0805'              	movf	_gameB_truckpos,w
  1503  001C' 0088'              	movwf	LCDSetCursorPos@y
  1504  001D' 3000               	movlw	0
  1505  001E' 2000'              	fcall	_LCDSetCursorPos
  1506                           
  1507                           ;main.c: 394: LCDPutChar(0);
  1508  001F' 3000               	movlw	0
  1509  0020' 2000'              	fcall	_LCDPutChar
  1510                           
  1511                           ;main.c: 395: LCDPutChar(1);
  1512  0021' 3001               	movlw	1
  1513  0022' 2000'              	fcall	_LCDPutChar
  1514                           
  1515                           ;main.c: 396: LCDPutChar(2);
  1516  0023' 3002               	movlw	2
  1517  0024' 2000'              	fcall	_LCDPutChar
  1518  0025' 0008               	return
  1519  0026'                    __end_of_gameB_redraw:
  1520                           
  1521                           	psect	text6
  1522  0000'                    __ptext6:	
  1523 ;; *************** function _gameA *****************
  1524 ;; Defined at:
  1525 ;;		line 286 in file "main.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;  second_line    17   11[BANK0 ] unsigned char [17]
  1530 ;;  ypos            1   29[BANK0 ] unsigned char 
  1531 ;;  xpos            1   28[BANK0 ] unsigned char 
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1541 ;;      Params:         0       0       0       0
  1542 ;;      Locals:         0      19       0       0
  1543 ;;      Temps:          0       0       0       0
  1544 ;;      Totals:         0      19       0       0
  1545 ;;Total ram usage:       19 bytes
  1546 ;; Hardware stack levels used: 1
  1547 ;; Hardware stack levels required when called: 11
  1548 ;; This function calls:
  1549 ;;		_LCDPutChar
  1550 ;;		_LCDPutRS0Cmd
  1551 ;;		_LCDSetCursorPos
  1552 ;;		_LCDWriteString
  1553 ;;		__getkey
  1554 ;;		_clearstr
  1555 ;; This function is called by:
  1556 ;;		_game_menu
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560  0000'                    _gameA:	
  1561                           ;psect for function _gameA
  1562                           
  1563                           
  1564                           ;main.c: 287: uint8_t xpos = 0, ypos = 0;
  1565                           
  1566                           ;incstack = 0
  1567 ;; hardware stack exceeded
  1568                           ; Regs used in _gameA: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1569  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1570  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1571  0002' 019C'              	clrf	gameA@xpos
  1572  0003' 019D'              	clrf	gameA@ypos
  1573                           
  1574                           ;main.c: 288: char second_line[16 + 1];;main.c: 289: second_line[16] = 0;
  1575  0004' 019B'              	clrf	gameA@second_line+16
  1576  0005' 2843'              	goto	l1613
  1577  0006'                    l1591:
  1578                           
  1579                           ;main.c: 298: xpos = 0;
  1580  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  1581  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  1582  0008' 019C'              	clrf	gameA@xpos
  1583                           
  1584                           ;main.c: 299: if (!ypos) {
  1585  0009' 081D'              	movf	gameA@ypos,w
  1586  000A' 1D03               	btfss	3,2
  1587  000B' 2815'              	goto	l1597
  1588                           
  1589                           ;main.c: 300: LCDSetCursorPos(0, ++ypos);
  1590  000C' 3001               	movlw	1
  1591  000D' 00FF               	movwf	127
  1592  000E' 087F               	movf	127,w
  1593  000F' 079D'              	addwf	gameA@ypos,f
  1594  0010' 081D'              	movf	gameA@ypos,w
  1595  0011' 0088'              	movwf	LCDSetCursorPos@y
  1596  0012' 3000               	movlw	0
  1597  0013' 2000'              	fcall	_LCDSetCursorPos
  1598                           
  1599                           ;main.c: 301: } else {
  1600  0014' 2843'              	goto	l1613
  1601  0015'                    l1597:
  1602                           
  1603                           ;main.c: 302: LCDPutRS0Cmd(0b00000001);
  1604  0015' 3001               	movlw	1
  1605  0016' 2000'              	fcall	_LCDPutRS0Cmd
  1606                           
  1607                           ;main.c: 303: LCDSetCursorPos(0, 0);
  1608  0017' 1283               	bcf	3,5	;RP0=0, select bank0
  1609  0018' 1303               	bcf	3,6	;RP1=0, select bank0
  1610  0019' 0188'              	clrf	LCDSetCursorPos@y
  1611  001A' 3000               	movlw	0
  1612  001B' 2000'              	fcall	_LCDSetCursorPos
  1613                           
  1614                           ;main.c: 304: LCDWriteString(second_line);
  1615  001C' 3000'              	movlw	(low (gameA@second_line| 0))& (0+255)
  1616  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  1617  001E' 1303               	bcf	3,6	;RP1=0, select bank0
  1618  001F' 0088'              	movwf	LCDWriteString@str
  1619  0020' 3000               	movlw	0
  1620  0021' 0089'              	movwf	LCDWriteString@str+1
  1621  0022' 2000'              	fcall	_LCDWriteString
  1622                           
  1623                           ;main.c: 305: LCDSetCursorPos(0, 1);
  1624  0023' 1283               	bcf	3,5	;RP0=0, select bank0
  1625  0024' 1303               	bcf	3,6	;RP1=0, select bank0
  1626  0025' 0188'              	clrf	LCDSetCursorPos@y
  1627  0026' 0A88'              	incf	LCDSetCursorPos@y,f
  1628  0027' 3000               	movlw	0
  1629  0028' 2000'              	fcall	_LCDSetCursorPos
  1630                           
  1631                           ;main.c: 307: clearstr(second_line);
  1632  0029' 3000'              	movlw	(low (gameA@second_line| 0))& (0+255)
  1633  002A' 2000'              	fcall	_clearstr
  1634  002B' 2843'              	goto	l1613
  1635  002C'                    l1603:
  1636                           
  1637                           ;main.c: 311: if (xpos < (16 - 1)) {
  1638  002C' 300F               	movlw	15
  1639  002D' 1283               	bcf	3,5	;RP0=0, select bank0
  1640  002E' 1303               	bcf	3,6	;RP1=0, select bank0
  1641  002F' 021C'              	subwf	gameA@xpos,w
  1642  0030' 1803               	skipnc
  1643  0031' 2843'              	goto	l1613
  1644                           
  1645                           ;main.c: 312: LCDPutChar(key);
  1646  0032' 080A'              	movf	_key,w
  1647  0033' 2000'              	fcall	_LCDPutChar
  1648                           
  1649                           ;main.c: 314: if (ypos) {
  1650  0034' 1283               	bcf	3,5	;RP0=0, select bank0
  1651  0035' 1303               	bcf	3,6	;RP1=0, select bank0
  1652  0036' 081D'              	movf	gameA@ypos,w
  1653  0037' 1903               	btfsc	3,2
  1654  0038' 283F'              	goto	l1611
  1655                           
  1656                           ;main.c: 315: second_line[xpos] = key;
  1657  0039' 081C'              	movf	gameA@xpos,w
  1658  003A' 3E00'              	addlw	(low (gameA@second_line| 0))& (0+255)
  1659  003B' 0084               	movwf	4
  1660  003C' 080A'              	movf	_key,w
  1661  003D' 1383               	bcf	3,7	;select IRP bank0
  1662  003E' 0080               	movwf	0
  1663  003F'                    l1611:
  1664                           
  1665                           ;main.c: 316: };main.c: 318: xpos++;
  1666  003F' 3001               	movlw	1
  1667  0040' 00FF               	movwf	127
  1668  0041' 087F               	movf	127,w
  1669  0042' 079C'              	addwf	gameA@xpos,f
  1670  0043'                    l1613:
  1671  0043' 2000'              	fcall	__getkey
  1672                           
  1673                           ; Switch size 1, requested type "simple"
  1674                           ; Number of cases is 2, Range of values is 35 to 42
  1675                           ; switch strategies available:
  1676                           ; Name         Instructions Cycles
  1677                           ; simple_byte            7     4 (average)
  1678                           ; direct_byte           17     9 (fixed)
  1679                           ; jumptable            263     9 (fixed)
  1680                           ;	Chosen strategy is simple_byte
  1681  0044' 3A23               	xorlw	35	; case 35
  1682  0045' 1903               	skipnz
  1683  0046' 2806'              	goto	l1591
  1684  0047' 3A09               	xorlw	9	; case 42
  1685  0048' 1903               	skipnz
  1686  0049' 284B'              	goto	l154
  1687  004A' 282C'              	goto	l1603
  1688  004B'                    l154:
  1689  004B' 0008               	return
  1690  004C'                    __end_of_gameA:
  1691                           
  1692                           	psect	text7
  1693  0000'                    __ptext7:	
  1694 ;; *************** function _clearstr *****************
  1695 ;; Defined at:
  1696 ;;		line 70 in file "main.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;  str             1    wreg     PTR unsigned char 
  1699 ;;		 -> gameB_track(34), gameA@second_line(17), 
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  str             1    3[BANK0 ] PTR unsigned char 
  1702 ;;		 -> gameB_track(34), gameA@second_line(17), 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1712 ;;      Params:         0       0       0       0
  1713 ;;      Locals:         0       1       0       0
  1714 ;;      Temps:          0       0       0       0
  1715 ;;      Totals:         0       1       0       0
  1716 ;;Total ram usage:        1 bytes
  1717 ;; Hardware stack levels used: 1
  1718 ;; Hardware stack levels required when called: 7
  1719 ;; This function calls:
  1720 ;;		Nothing
  1721 ;; This function is called by:
  1722 ;;		_gameA
  1723 ;;		_gameB
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727  0000'                    _clearstr:	
  1728                           ;psect for function _clearstr
  1729                           
  1730                           
  1731                           ;incstack = 0
  1732 ;; hardware stack exceeded
  1733                           ; Regs used in _clearstr: [wreg-fsr0h+status,2+status,0+btemp+1]
  1734                           ;clearstr@str stored from wreg
  1735  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1736  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1737  0002' 0083'              	movwf	clearstr@str
  1738  0003'                    l1539:	
  1739                           ;main.c: 71: while (*str) {
  1740                           
  1741  0003' 0803'              	movf	clearstr@str,w
  1742  0004' 0084               	movwf	4
  1743  0005' 1383               	bcf	3,7	;select IRP bank0
  1744  0006' 0800               	movf	0,w
  1745  0007' 1903               	btfsc	3,2
  1746  0008' 0008               	return
  1747                           
  1748                           ;main.c: 72: *str = ' ';
  1749  0009' 0803'              	movf	clearstr@str,w
  1750  000A' 0084               	movwf	4
  1751  000B' 3020               	movlw	32
  1752  000C' 0080               	movwf	0
  1753                           
  1754                           ;main.c: 73: str++;
  1755  000D' 3001               	movlw	1
  1756  000E' 00FF               	movwf	127
  1757  000F' 087F               	movf	127,w
  1758  0010' 0783'              	addwf	clearstr@str,f
  1759  0011' 2803'              	goto	l1539
  1760  0012'                    __end_of_clearstr:
  1761                           
  1762                           	psect	text8
  1763  0000'                    __ptext8:	
  1764 ;; *************** function __getkey *****************
  1765 ;; Defined at:
  1766 ;;		line 196 in file "main.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      unsigned char 
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1780 ;;      Params:         0       0       0       0
  1781 ;;      Locals:         0       0       0       0
  1782 ;;      Temps:          0       0       0       0
  1783 ;;      Totals:         0       0       0       0
  1784 ;;Total ram usage:        0 bytes
  1785 ;; Hardware stack levels used: 1
  1786 ;; Hardware stack levels required when called: 7
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_game_menu
  1791 ;;		_gameA
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795  0000'                    __getkey:	
  1796                           ;psect for function __getkey
  1797                           
  1798                           
  1799                           ;main.c: 197: key = '\0';
  1800                           
  1801                           ;incstack = 0
  1802 ;; hardware stack exceeded
  1803                           ; Regs used in __getkey: [wreg+status,2+status,0]
  1804  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1805  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1806  0002' 018A'              	clrf	_key
  1807  0003'                    l1543:	
  1808                           ;main.c: 199: while (!key) { }
  1809                           
  1810  0003' 080A'              	movf	_key,w
  1811  0004' 1903               	btfsc	3,2
  1812  0005' 2803'              	goto	l1543
  1813                           
  1814                           ;main.c: 201: return key;
  1815  0006' 080A'              	movf	_key,w
  1816  0007' 0008               	return
  1817  0008'                    __end_of__getkey:
  1818                           
  1819                           	psect	text9
  1820  0000'                    __ptext9:	
  1821 ;; *************** function _LCDWriteString *****************
  1822 ;; Defined at:
  1823 ;;		line 162 in file "lcd_hd44780.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;  str             2    8[BANK0 ] PTR const unsigned char 
  1826 ;;		 -> gameB_track(34), gameA@second_line(17), STR_2(7), STR_1(18), 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;		None
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  1    wreg      void 
  1831 ;; Registers used:
  1832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1838 ;;      Params:         0       2       0       0
  1839 ;;      Locals:         0       0       0       0
  1840 ;;      Temps:          0       0       0       0
  1841 ;;      Totals:         0       2       0       0
  1842 ;;Total ram usage:        2 bytes
  1843 ;; Hardware stack levels used: 1
  1844 ;; Hardware stack levels required when called: 10
  1845 ;; This function calls:
  1846 ;;		_LCDPutChar
  1847 ;; This function is called by:
  1848 ;;		_game_menu
  1849 ;;		_gameA
  1850 ;;		_gameB_redraw
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854  0000'                    _LCDWriteString:	
  1855                           ;psect for function _LCDWriteString
  1856                           
  1857  0000'                    l1507:	
  1858                           ;lcd_hd44780.c: 163: while (*str) {
  1859                           
  1860                           ;incstack = 0
  1861 ;; hardware stack exceeded
  1862                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1863                           
  1864  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1865  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1866  0002' 0809'              	movf	LCDWriteString@str+1,w
  1867  0003' 00FF               	movwf	127
  1868  0004' 0808'              	movf	LCDWriteString@str,w
  1869  0005' 0084               	movwf	4
  1870  0006' 2000'              	fcall	stringtab
  1871  0007' 3A00               	xorlw	0
  1872  0008' 1903               	btfsc	3,2
  1873  0009' 0008               	return
  1874                           
  1875                           ;lcd_hd44780.c: 164: LCDPutChar(*str++);
  1876  000A' 0809'              	movf	LCDWriteString@str+1,w
  1877  000B' 00FF               	movwf	127
  1878  000C' 0808'              	movf	LCDWriteString@str,w
  1879  000D' 0084               	movwf	4
  1880  000E' 2000'              	fcall	stringtab
  1881  000F' 2000'              	fcall	_LCDPutChar
  1882  0010' 3001               	movlw	1
  1883  0011' 1283               	bcf	3,5	;RP0=0, select bank0
  1884  0012' 1303               	bcf	3,6	;RP1=0, select bank0
  1885  0013' 0788'              	addwf	LCDWriteString@str,f
  1886  0014' 1803               	skipnc
  1887  0015' 0A89'              	incf	LCDWriteString@str+1,f
  1888  0016' 3000               	movlw	0
  1889  0017' 0789'              	addwf	LCDWriteString@str+1,f
  1890  0018' 2800'              	goto	l1507
  1891  0019'                    __end_of_LCDWriteString:
  1892                           
  1893                           	psect	text10
  1894  0000'                    __ptext10:	
  1895 ;; *************** function _LCDSetCursorPos *****************
  1896 ;; Defined at:
  1897 ;;		line 153 in file "lcd_hd44780.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  x               1    wreg     unsigned char 
  1900 ;;  y               1    8[BANK0 ] unsigned char 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  x               1   10[BANK0 ] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1912 ;;      Params:         0       1       0       0
  1913 ;;      Locals:         0       1       0       0
  1914 ;;      Temps:          0       1       0       0
  1915 ;;      Totals:         0       3       0       0
  1916 ;;Total ram usage:        3 bytes
  1917 ;; Hardware stack levels used: 1
  1918 ;; Hardware stack levels required when called: 10
  1919 ;; This function calls:
  1920 ;;		_LCDPutRS0Cmd
  1921 ;; This function is called by:
  1922 ;;		_game_menu
  1923 ;;		_gameA
  1924 ;;		_gameB_redraw
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928  0000'                    _LCDSetCursorPos:	
  1929                           ;psect for function _LCDSetCursorPos
  1930                           
  1931                           
  1932                           ;incstack = 0
  1933 ;; hardware stack exceeded
  1934                           ; Regs used in _LCDSetCursorPos: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1935                           ;LCDSetCursorPos@x stored from wreg
  1936  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1937  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1938  0002' 008A'              	movwf	LCDSetCursorPos@x
  1939                           
  1940                           ;lcd_hd44780.c: 154: LCDPutRS0Cmd(0b10000000 | (uint8_t) y * 0x40 + x);
  1941  0003' 0808'              	movf	LCDSetCursorPos@y,w
  1942  0004' 0089'              	movwf	??_LCDSetCursorPos
  1943  0005' 3006               	movlw	6
  1944  0006'                    u425:
  1945  0006' 1003               	clrc
  1946  0007' 0D89'              	rlf	??_LCDSetCursorPos,f
  1947  0008' 3EFF               	addlw	-1
  1948  0009' 1D03               	skipz
  1949  000A' 2806'              	goto	u425
  1950  000B' 080A'              	movf	LCDSetCursorPos@x,w
  1951  000C' 0709'              	addwf	??_LCDSetCursorPos,w
  1952  000D' 3880               	iorlw	128
  1953  000E' 2000'              	fcall	_LCDPutRS0Cmd
  1954  000F' 0008               	return
  1955  0010'                    __end_of_LCDSetCursorPos:
  1956                           
  1957                           	psect	text11
  1958  0000'                    __ptext11:	
  1959 ;; *************** function _LCDStoreCustom5x8Character *****************
  1960 ;; Defined at:
  1961 ;;		line 184 in file "lcd_hd44780.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  code            1    wreg     unsigned char 
  1964 ;;  dataarr         1    9[BANK0 ] PTR const unsigned char 
  1965 ;;		 -> eeprom_cgram_data(24), 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  code            1   11[BANK0 ] unsigned char 
  1968 ;;  cnt             1   12[BANK0 ] unsigned char 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1978 ;;      Params:         0       1       0       0
  1979 ;;      Locals:         0       2       0       0
  1980 ;;      Temps:          0       1       0       0
  1981 ;;      Totals:         0       4       0       0
  1982 ;;Total ram usage:        4 bytes
  1983 ;; Hardware stack levels used: 1
  1984 ;; Hardware stack levels required when called: 11
  1985 ;; This function calls:
  1986 ;;		_LCDPutChar
  1987 ;;		_LCDSetCGRAMAddress
  1988 ;;		___eetoc
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994  0000'                    _LCDStoreCustom5x8Character:	
  1995                           ;psect for function _LCDStoreCustom5x8Character
  1996                           
  1997                           
  1998                           ;incstack = 0
  1999 ;; hardware stack exceeded
  2000                           ; Regs used in _LCDStoreCustom5x8Character: [wreg-fsr0h+status,2+status,0+btemp+1+pclath
      +                          +cstack]
  2001                           ;LCDStoreCustom5x8Character@code stored from wreg
  2002  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2003  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2004  0002' 008B'              	movwf	LCDStoreCustom5x8Character@code
  2005                           
  2006                           ;lcd_hd44780.c: 185: LCDSetCGRAMAddress(code << 3);
  2007  0003' 080B'              	movf	LCDStoreCustom5x8Character@code,w
  2008  0004' 008A'              	movwf	??_LCDStoreCustom5x8Character
  2009  0005' 3002               	movlw	2
  2010  0006'                    u595:
  2011  0006' 1003               	clrc
  2012  0007' 0D8A'              	rlf	??_LCDStoreCustom5x8Character,f
  2013  0008' 3EFF               	addlw	-1
  2014  0009' 1D03               	skipz
  2015  000A' 2806'              	goto	u595
  2016  000B' 1003               	clrc
  2017  000C' 0D0A'              	rlf	??_LCDStoreCustom5x8Character,w
  2018  000D' 2000'              	fcall	_LCDSetCGRAMAddress
  2019                           
  2020                           ;lcd_hd44780.c: 187: uint8_t cnt = 8;
  2021  000E' 3008               	movlw	8
  2022  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  2023  0010' 1303               	bcf	3,6	;RP1=0, select bank0
  2024  0011' 008C'              	movwf	LCDStoreCustom5x8Character@cnt
  2025  0012'                    l1733:	
  2026                           ;lcd_hd44780.c: 188: while (cnt) {
  2027                           
  2028  0012' 080C'              	movf	LCDStoreCustom5x8Character@cnt,w
  2029  0013' 1903               	btfsc	3,2
  2030  0014' 0008               	return
  2031                           
  2032                           ;lcd_hd44780.c: 189: cnt--;
  2033  0015' 3001               	movlw	1
  2034  0016' 028C'              	subwf	LCDStoreCustom5x8Character@cnt,f
  2035                           
  2036                           ;lcd_hd44780.c: 190: LCDPutChar(*dataarr++);
  2037  0017' 0809'              	movf	LCDStoreCustom5x8Character@dataarr,w
  2038  0018' 2000'              	fcall	___eetoc
  2039  0019' 2000'              	fcall	_LCDPutChar
  2040  001A' 3001               	movlw	1
  2041  001B' 00FF               	movwf	127
  2042  001C' 087F               	movf	127,w
  2043  001D' 1283               	bcf	3,5	;RP0=0, select bank0
  2044  001E' 1303               	bcf	3,6	;RP1=0, select bank0
  2045  001F' 0789'              	addwf	LCDStoreCustom5x8Character@dataarr,f
  2046  0020' 2812'              	goto	l1733
  2047  0021'                    __end_of_LCDStoreCustom5x8Character:
  2048                           
  2049                           	psect	text12
  2050  0000'                    __ptext12:	
  2051 ;; *************** function ___eetoc *****************
  2052 ;; Defined at:
  2053 ;;		line 104 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\pic\__eeprom.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;  addr            1    wreg     PTR eeprom void 
  2056 ;;		 -> tiles(16), eeprom_cgram_data(24), eeprom_keys(17), 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  addr            1    7[BANK0 ] PTR eeprom void 
  2059 ;;		 -> tiles(16), eeprom_cgram_data(24), eeprom_keys(17), 
  2060 ;;  data            1    8[BANK0 ] unsigned char 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      unsigned char 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2070 ;;      Params:         0       0       0       0
  2071 ;;      Locals:         0       2       0       0
  2072 ;;      Temps:          0       0       0       0
  2073 ;;      Totals:         0       2       0       0
  2074 ;;Total ram usage:        2 bytes
  2075 ;; Hardware stack levels used: 1
  2076 ;; Hardware stack levels required when called: 8
  2077 ;; This function calls:
  2078 ;;		___eecpymem
  2079 ;; This function is called by:
  2080 ;;		_main
  2081 ;;		_gameB
  2082 ;;		_LCDStoreCustom5x8Character
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086  0000'                    ___eetoc:	
  2087                           ;psect for function ___eetoc
  2088                           
  2089                           
  2090                           ;incstack = 0
  2091 ;; hardware stack exceeded
  2092                           ; Regs used in ___eetoc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2093                           ;___eetoc@addr stored from wreg
  2094  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2095  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2096  0002' 0087'              	movwf	___eetoc@addr
  2097                           
  2098                           ;__eeprom.c: 106: unsigned char data;;__eeprom.c: 107: __eecpymem((unsigned char *) &dat
      +                          a,addr,1);
  2099  0003' 0807'              	movf	___eetoc@addr,w
  2100  0004' 0083'              	movwf	___eecpymem@from
  2101  0005' 0184'              	clrf	___eecpymem@size
  2102  0006' 0A84'              	incf	___eecpymem@size,f
  2103  0007' 3000'              	movlw	(low (___eetoc@data| 0))& (0+255)
  2104  0008' 2000'              	fcall	___eecpymem
  2105                           
  2106                           ;__eeprom.c: 108: return data;
  2107  0009' 1283               	bcf	3,5	;RP0=0, select bank0
  2108  000A' 1303               	bcf	3,6	;RP1=0, select bank0
  2109  000B' 0808'              	movf	___eetoc@data,w
  2110  000C' 0008               	return
  2111  000D'                    __end_of___eetoc:
  2112                           
  2113                           	psect	text13
  2114  0000'                    __ptext13:	
  2115 ;; *************** function ___eecpymem *****************
  2116 ;; Defined at:
  2117 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\pic\__eeprom.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  to              1    wreg     PTR volatile unsigned ch
  2120 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  2121 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  2122 ;;  from            1    3[BANK0 ] PTR eeprom unsigned char
  2123 ;;		 -> tiles(16), eeprom_cgram_data(24), eeprom_keys(17), 
  2124 ;;  size            1    4[BANK0 ] unsigned char 
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;  to              1    6[BANK0 ] PTR volatile unsigned ch
  2127 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  2128 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  2129 ;;  cp              1    5[BANK0 ] PTR volatile unsigned ch
  2130 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  2131 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      void 
  2134 ;; Registers used:
  2135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2141 ;;      Params:         0       2       0       0
  2142 ;;      Locals:         0       2       0       0
  2143 ;;      Temps:          0       0       0       0
  2144 ;;      Totals:         0       4       0       0
  2145 ;;Total ram usage:        4 bytes
  2146 ;; Hardware stack levels used: 1
  2147 ;; Hardware stack levels required when called: 7
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		___eetoc
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155  0000'                    ___eecpymem:	
  2156                           ;psect for function ___eecpymem
  2157                           
  2158                           
  2159                           ;incstack = 0
  2160 ;; hardware stack exceeded
  2161                           ; Regs used in ___eecpymem: [wreg-fsr0h+status,2+status,0+btemp+1]
  2162                           ;___eecpymem@to stored from wreg
  2163  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2164  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2165  0002' 0086'              	movwf	___eecpymem@to
  2166                           
  2167                           ;__eeprom.c: 8: volatile unsigned char *cp = to;
  2168  0003' 0806'              	movf	___eecpymem@to,w
  2169  0004' 0085'              	movwf	___eecpymem@cp
  2170  0005'                    l278:	
  2171                           ;__eeprom.c: 10: while (EECON1bits.WR) continue;
  2172                           
  2173  0005' 1683               	bsf	3,5	;RP0=1, select bank1
  2174  0006' 1303               	bcf	3,6	;RP1=0, select bank1
  2175  0007' 189C               	btfsc	28,1	;volsfr
  2176  0008' 2805'              	goto	l278
  2177                           
  2178                           ;__eeprom.c: 11: EEADR = (unsigned char)from;
  2179  0009' 1283               	bcf	3,5	;RP0=0, select bank0
  2180  000A' 1303               	bcf	3,6	;RP1=0, select bank0
  2181  000B' 0803'              	movf	___eecpymem@from,w
  2182  000C' 1683               	bsf	3,5	;RP0=1, select bank1
  2183  000D' 1303               	bcf	3,6	;RP1=0, select bank1
  2184  000E' 009B               	movwf	27	;volatile
  2185  000F'                    l1523:	
  2186                           ;__eeprom.c: 12: while(size--) {
  2187                           
  2188  000F' 3001               	movlw	1
  2189  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  2190  0011' 1303               	bcf	3,6	;RP1=0, select bank0
  2191  0012' 0284'              	subwf	___eecpymem@size,f
  2192  0013' 0A04'              	incf	___eecpymem@size,w
  2193  0014' 1903               	btfsc	3,2
  2194  0015' 0008               	return
  2195  0016'                    l283:
  2196  0016' 1683               	bsf	3,5	;RP0=1, select bank1
  2197  0017' 1303               	bcf	3,6	;RP1=0, select bank1
  2198  0018' 189C               	btfsc	28,1	;volsfr
  2199  0019' 2816'              	goto	l283
  2200                           
  2201                           ;__eeprom.c: 15: EECON1 &= 0x7F;
  2202  001A' 307F               	movlw	127
  2203  001B' 00FF               	movwf	127
  2204  001C' 087F               	movf	127,w
  2205  001D' 059C               	andwf	28,f	;volsfr
  2206                           
  2207                           ;__eeprom.c: 17: EECON1bits.RD = 1;
  2208  001E' 141C               	bsf	28,0	;volsfr
  2209                           
  2210                           ;__eeprom.c: 18: *cp++ = EEDATA;
  2211  001F' 1283               	bcf	3,5	;RP0=0, select bank0
  2212  0020' 1303               	bcf	3,6	;RP1=0, select bank0
  2213  0021' 0805'              	movf	___eecpymem@cp,w
  2214  0022' 0084               	movwf	4
  2215  0023' 1683               	bsf	3,5	;RP0=1, select bank1
  2216  0024' 1303               	bcf	3,6	;RP1=0, select bank1
  2217  0025' 081A               	movf	26,w	;volatile
  2218  0026' 1383               	bcf	3,7	;select IRP bank0
  2219  0027' 0080               	movwf	0
  2220  0028' 3001               	movlw	1
  2221  0029' 00FF               	movwf	127
  2222  002A' 087F               	movf	127,w
  2223  002B' 1283               	bcf	3,5	;RP0=0, select bank0
  2224  002C' 1303               	bcf	3,6	;RP1=0, select bank0
  2225  002D' 0785'              	addwf	___eecpymem@cp,f
  2226                           
  2227                           ;__eeprom.c: 19: ++EEADR;
  2228  002E' 3001               	movlw	1
  2229  002F' 00FF               	movwf	127
  2230  0030' 087F               	movf	127,w
  2231  0031' 1683               	bsf	3,5	;RP0=1, select bank1
  2232  0032' 1303               	bcf	3,6	;RP1=0, select bank1
  2233  0033' 079B               	addwf	27,f	;volatile
  2234  0034' 280F'              	goto	l1523
  2235  0035'                    __end_of___eecpymem:
  2236                           
  2237                           	psect	text14
  2238  0000'                    __ptext14:	
  2239 ;; *************** function _LCDSetCGRAMAddress *****************
  2240 ;; Defined at:
  2241 ;;		line 142 in file "lcd_hd44780.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  addr            1    wreg     unsigned char 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  addr            1    8[BANK0 ] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2255 ;;      Params:         0       0       0       0
  2256 ;;      Locals:         0       1       0       0
  2257 ;;      Temps:          0       0       0       0
  2258 ;;      Totals:         0       1       0       0
  2259 ;;Total ram usage:        1 bytes
  2260 ;; Hardware stack levels used: 1
  2261 ;; Hardware stack levels required when called: 10
  2262 ;; This function calls:
  2263 ;;		_LCDPutRS0Cmd
  2264 ;; This function is called by:
  2265 ;;		_LCDStoreCustom5x8Character
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269  0000'                    _LCDSetCGRAMAddress:	
  2270                           ;psect for function _LCDSetCGRAMAddress
  2271                           
  2272                           
  2273                           ;incstack = 0
  2274 ;; hardware stack exceeded
  2275                           ; Regs used in _LCDSetCGRAMAddress: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2276                           ;LCDSetCGRAMAddress@addr stored from wreg
  2277  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2278  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2279  0002' 0088'              	movwf	LCDSetCGRAMAddress@addr
  2280                           
  2281                           ;lcd_hd44780.c: 143: LCDPutRS0Cmd(0b01000000 | addr);
  2282  0003' 0808'              	movf	LCDSetCGRAMAddress@addr,w
  2283  0004' 3840               	iorlw	64
  2284  0005' 2000'              	fcall	_LCDPutRS0Cmd
  2285  0006' 0008               	return
  2286  0007'                    __end_of_LCDSetCGRAMAddress:
  2287                           
  2288                           	psect	text15
  2289  0000'                    __ptext15:	
  2290 ;; *************** function _LCDPutChar *****************
  2291 ;; Defined at:
  2292 ;;		line 173 in file "lcd_hd44780.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;  chr             1    wreg     unsigned char 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  chr             1    7[BANK0 ] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2306 ;;      Params:         0       0       0       0
  2307 ;;      Locals:         0       1       0       0
  2308 ;;      Temps:          0       0       0       0
  2309 ;;      Totals:         0       1       0       0
  2310 ;;Total ram usage:        1 bytes
  2311 ;; Hardware stack levels used: 1
  2312 ;; Hardware stack levels required when called: 9
  2313 ;; This function calls:
  2314 ;;		_LCDPut
  2315 ;; This function is called by:
  2316 ;;		_gameA
  2317 ;;		_gameB_redraw
  2318 ;;		_LCDWriteString
  2319 ;;		_LCDStoreCustom5x8Character
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323  0000'                    _LCDPutChar:	
  2324                           ;psect for function _LCDPutChar
  2325                           
  2326                           
  2327                           ;incstack = 0
  2328 ;; hardware stack exceeded
  2329                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2330                           ;LCDPutChar@chr stored from wreg
  2331  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2332  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2333  0002' 0087'              	movwf	LCDPutChar@chr
  2334                           
  2335                           ;lcd_hd44780.c: 174: PORTAbits.RA4 = 1;
  2336  0003' 1605               	bsf	5,4	;volatile
  2337                           
  2338                           ;lcd_hd44780.c: 175: LCDPut(chr);
  2339  0004' 0807'              	movf	LCDPutChar@chr,w
  2340  0005' 2000'              	fcall	_LCDPut
  2341  0006' 0008               	return
  2342  0007'                    __end_of_LCDPutChar:
  2343                           
  2344                           	psect	text16
  2345  0000'                    __ptext16:	
  2346 ;; *************** function _LCDInit *****************
  2347 ;; Defined at:
  2348 ;;		line 197 in file "lcd_hd44780.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  i               1   10[BANK0 ] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2362 ;;      Params:         0       0       0       0
  2363 ;;      Locals:         0       1       0       0
  2364 ;;      Temps:          0       2       0       0
  2365 ;;      Totals:         0       3       0       0
  2366 ;;Total ram usage:        3 bytes
  2367 ;; Hardware stack levels used: 1
  2368 ;; Hardware stack levels required when called: 11
  2369 ;; This function calls:
  2370 ;;		_LCDDisplayControl
  2371 ;;		_LCDEntryModeSet
  2372 ;;		_LCDPutRS0Cmd
  2373 ;;		_LCDWaitNotBusy
  2374 ;; This function is called by:
  2375 ;;		_main
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379  0000'                    _LCDInit:	
  2380                           ;psect for function _LCDInit
  2381                           
  2382                           
  2383                           ;lcd_hd44780.c: 199: LCD.DisplayControl = 0b00001000;
  2384                           
  2385                           ;incstack = 0
  2386 ;; hardware stack exceeded
  2387                           ; Regs used in _LCDInit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2388  0000' 3008               	movlw	8
  2389  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  2390  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  2391  0003' 0083'              	movwf	_LCD+1
  2392                           
  2393                           ;lcd_hd44780.c: 207: TRISA &= 0xF0;
  2394  0004' 30F0               	movlw	240
  2395  0005' 00FF               	movwf	127
  2396  0006' 087F               	movf	127,w
  2397  0007' 1683               	bsf	3,5	;RP0=1, select bank1
  2398  0008' 1303               	bcf	3,6	;RP1=0, select bank1
  2399  0009' 0585               	andwf	5,f	;volatile
  2400                           
  2401                           ;lcd_hd44780.c: 208: PORTAbits.RA4 = 0;
  2402  000A' 1283               	bcf	3,5	;RP0=0, select bank0
  2403  000B' 1303               	bcf	3,6	;RP1=0, select bank0
  2404  000C' 1205               	bcf	5,4	;volatile
  2405                           
  2406                           ;lcd_hd44780.c: 210: for (uint8_t i = 3; i; i--) {
  2407  000D' 3003               	movlw	3
  2408  000E' 008A'              	movwf	LCDInit@i
  2409  000F'                    l1701:
  2410  000F' 080A'              	movf	LCDInit@i,w
  2411  0010' 1903               	btfsc	3,2
  2412  0011' 282B'              	goto	l248
  2413                           
  2414                           ;lcd_hd44780.c: 211: _delay((unsigned long)((50)*(4000000/4000.0)));
  2415  0012' 3041               	movlw	65
  2416  0013' 1283               	bcf	3,5	;RP0=0, select bank0
  2417  0014' 1303               	bcf	3,6	;RP1=0, select bank0
  2418  0015' 0089'              	movwf	??_LCDInit+1
  2419  0016' 30EE               	movlw	238
  2420  0017' 0088'              	movwf	??_LCDInit
  2421  0018'                    u757:
  2422  0018' 0B88'              	decfsz	??_LCDInit,f
  2423  0019' 2818'              	goto	u757
  2424  001A' 0B89'              	decfsz	??_LCDInit+1,f
  2425  001B' 2818'              	goto	u757
  2426                           
  2427                           ;lcd_hd44780.c: 213: PORTAbits.RA6 = 1;
  2428  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  2429  001D' 1303               	bcf	3,6	;RP1=0, select bank0
  2430  001E' 1705               	bsf	5,6	;volatile
  2431                           
  2432                           ;lcd_hd44780.c: 214: PORTA = (PORTA & 0xf0) | 0x03;
  2433  001F' 0805               	movf	5,w	;volatile
  2434  0020' 39F0               	andlw	240
  2435  0021' 3803               	iorlw	3
  2436  0022' 0085               	movwf	5	;volatile
  2437                           
  2438                           ;lcd_hd44780.c: 215: __nop();
  2439  0023' 0000               	nop
  2440                           
  2441                           ;lcd_hd44780.c: 216: __nop();
  2442  0024' 0000               	nop
  2443                           
  2444                           ;lcd_hd44780.c: 217: PORTAbits.RA6 = 0;
  2445  0025' 1283               	bcf	3,5	;RP0=0, select bank0
  2446  0026' 1303               	bcf	3,6	;RP1=0, select bank0
  2447  0027' 1305               	bcf	5,6	;volatile
  2448  0028' 3001               	movlw	1
  2449  0029' 028A'              	subwf	LCDInit@i,f
  2450  002A' 280F'              	goto	l1701
  2451  002B'                    l248:
  2452                           
  2453                           ;lcd_hd44780.c: 218: };lcd_hd44780.c: 220: __nop();
  2454  002B' 0000               	nop
  2455                           
  2456                           ;lcd_hd44780.c: 221: __nop();
  2457  002C' 0000               	nop
  2458                           
  2459                           ;lcd_hd44780.c: 225: PORTAbits.RA6 = 1;
  2460  002D' 1283               	bcf	3,5	;RP0=0, select bank0
  2461  002E' 1303               	bcf	3,6	;RP1=0, select bank0
  2462  002F' 1705               	bsf	5,6	;volatile
  2463                           
  2464                           ;lcd_hd44780.c: 226: PORTA = (PORTA & 0xf0) | 0x02;
  2465  0030' 0805               	movf	5,w	;volatile
  2466  0031' 39F0               	andlw	240
  2467  0032' 3802               	iorlw	2
  2468  0033' 0085               	movwf	5	;volatile
  2469                           
  2470                           ;lcd_hd44780.c: 227: __nop();
  2471  0034' 0000               	nop
  2472                           
  2473                           ;lcd_hd44780.c: 228: __nop();
  2474  0035' 0000               	nop
  2475                           
  2476                           ;lcd_hd44780.c: 229: PORTAbits.RA6 = 0;
  2477  0036' 1283               	bcf	3,5	;RP0=0, select bank0
  2478  0037' 1303               	bcf	3,6	;RP1=0, select bank0
  2479  0038' 1305               	bcf	5,6	;volatile
  2480                           
  2481                           ;lcd_hd44780.c: 231: LCDWaitNotBusy();
  2482  0039' 2000'              	fcall	_LCDWaitNotBusy
  2483                           
  2484                           ;lcd_hd44780.c: 251: LCDPutRS0Cmd(0b00100000 | (uint8_t) 0b00001000 | 0b00000000);
  2485  003A' 3028               	movlw	40
  2486  003B' 2000'              	fcall	_LCDPutRS0Cmd
  2487                           
  2488                           ;lcd_hd44780.c: 255: LCDDisplayControl();
  2489  003C' 2000'              	fcall	_LCDDisplayControl
  2490                           
  2491                           ;lcd_hd44780.c: 256: LCDPutRS0Cmd(0b00000001);
  2492  003D' 3001               	movlw	1
  2493  003E' 2000'              	fcall	_LCDPutRS0Cmd
  2494                           
  2495                           ;lcd_hd44780.c: 258: LCD.EntryMode = 0b00000100 | 0b00000010 | 0b00000000;
  2496  003F' 3006               	movlw	6
  2497  0040' 1283               	bcf	3,5	;RP0=0, select bank0
  2498  0041' 1303               	bcf	3,6	;RP1=0, select bank0
  2499  0042' 0082'              	movwf	_LCD
  2500                           
  2501                           ;lcd_hd44780.c: 259: LCDEntryModeSet();
  2502  0043' 2000'              	fcall	_LCDEntryModeSet
  2503  0044' 0008               	return
  2504  0045'                    __end_of_LCDInit:
  2505                           
  2506                           	psect	text17
  2507  0000'                    __ptext17:	
  2508 ;; *************** function _LCDEntryModeSet *****************
  2509 ;; Defined at:
  2510 ;;		line 124 in file "lcd_hd44780.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2524 ;;      Params:         0       0       0       0
  2525 ;;      Locals:         0       0       0       0
  2526 ;;      Temps:          0       0       0       0
  2527 ;;      Totals:         0       0       0       0
  2528 ;;Total ram usage:        0 bytes
  2529 ;; Hardware stack levels used: 1
  2530 ;; Hardware stack levels required when called: 10
  2531 ;; This function calls:
  2532 ;;		_LCDPutRS0Cmd
  2533 ;; This function is called by:
  2534 ;;		_LCDInit
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538  0000'                    _LCDEntryModeSet:	
  2539                           ;psect for function _LCDEntryModeSet
  2540                           
  2541                           
  2542                           ;lcd_hd44780.c: 125: LCDPutRS0Cmd(LCD.EntryMode);
  2543                           
  2544                           ;incstack = 0
  2545 ;; hardware stack exceeded
  2546                           ; Regs used in _LCDEntryModeSet: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2547  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2548  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2549  0002' 0802'              	movf	_LCD,w
  2550  0003' 2000'              	fcall	_LCDPutRS0Cmd
  2551  0004' 0008               	return
  2552  0005'                    __end_of_LCDEntryModeSet:
  2553                           
  2554                           	psect	text18
  2555  0000'                    __ptext18:	
  2556 ;; *************** function _LCDDisplayControl *****************
  2557 ;; Defined at:
  2558 ;;		line 133 in file "lcd_hd44780.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;		None
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2572 ;;      Params:         0       0       0       0
  2573 ;;      Locals:         0       0       0       0
  2574 ;;      Temps:          0       0       0       0
  2575 ;;      Totals:         0       0       0       0
  2576 ;;Total ram usage:        0 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; Hardware stack levels required when called: 10
  2579 ;; This function calls:
  2580 ;;		_LCDPutRS0Cmd
  2581 ;; This function is called by:
  2582 ;;		_main
  2583 ;;		_game_menu
  2584 ;;		_LCDInit
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588  0000'                    _LCDDisplayControl:	
  2589                           ;psect for function _LCDDisplayControl
  2590                           
  2591                           
  2592                           ;lcd_hd44780.c: 134: LCDPutRS0Cmd(LCD.DisplayControl);
  2593                           
  2594                           ;incstack = 0
  2595 ;; hardware stack exceeded
  2596                           ; Regs used in _LCDDisplayControl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2597  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2598  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2599  0002' 0803'              	movf	_LCD+1,w
  2600  0003' 2000'              	fcall	_LCDPutRS0Cmd
  2601  0004' 0008               	return
  2602  0005'                    __end_of_LCDDisplayControl:
  2603                           
  2604                           	psect	text19
  2605  0000'                    __ptext19:	
  2606 ;; *************** function _LCDPutRS0Cmd *****************
  2607 ;; Defined at:
  2608 ;;		line 114 in file "lcd_hd44780.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  cmd             1    wreg     unsigned char 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  cmd             1    7[BANK0 ] unsigned char 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2622 ;;      Params:         0       0       0       0
  2623 ;;      Locals:         0       1       0       0
  2624 ;;      Temps:          0       0       0       0
  2625 ;;      Totals:         0       1       0       0
  2626 ;;Total ram usage:        1 bytes
  2627 ;; Hardware stack levels used: 1
  2628 ;; Hardware stack levels required when called: 9
  2629 ;; This function calls:
  2630 ;;		_LCDPut
  2631 ;; This function is called by:
  2632 ;;		_main
  2633 ;;		_game_menu
  2634 ;;		_gameA
  2635 ;;		_LCDEntryModeSet
  2636 ;;		_LCDDisplayControl
  2637 ;;		_LCDSetCGRAMAddress
  2638 ;;		_LCDSetCursorPos
  2639 ;;		_LCDInit
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643  0000'                    _LCDPutRS0Cmd:	
  2644                           ;psect for function _LCDPutRS0Cmd
  2645                           
  2646                           
  2647                           ;incstack = 0
  2648 ;; hardware stack exceeded
  2649                           ; Regs used in _LCDPutRS0Cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2650                           ;LCDPutRS0Cmd@cmd stored from wreg
  2651  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2652  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2653  0002' 0087'              	movwf	LCDPutRS0Cmd@cmd
  2654                           
  2655                           ;lcd_hd44780.c: 115: PORTAbits.RA4 = 0;
  2656  0003' 1205               	bcf	5,4	;volatile
  2657                           
  2658                           ;lcd_hd44780.c: 116: LCDPut(cmd);
  2659  0004' 0807'              	movf	LCDPutRS0Cmd@cmd,w
  2660  0005' 2000'              	fcall	_LCDPut
  2661  0006' 0008               	return
  2662  0007'                    __end_of_LCDPutRS0Cmd:
  2663                           
  2664                           	psect	text20
  2665  0000'                    __ptext20:	
  2666 ;; *************** function _LCDPut *****************
  2667 ;; Defined at:
  2668 ;;		line 27 in file "lcd_hd44780.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  data            1    wreg     unsigned char 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  data            1    6[BANK0 ] unsigned char 
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2682 ;;      Params:         0       0       0       0
  2683 ;;      Locals:         0       1       0       0
  2684 ;;      Temps:          0       1       0       0
  2685 ;;      Totals:         0       2       0       0
  2686 ;;Total ram usage:        2 bytes
  2687 ;; Hardware stack levels used: 1
  2688 ;; Hardware stack levels required when called: 8
  2689 ;; This function calls:
  2690 ;;		_LCDWaitNotBusy
  2691 ;; This function is called by:
  2692 ;;		_LCDPutRS0Cmd
  2693 ;;		_LCDPutChar
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697  0000'                    _LCDPut:	
  2698                           ;psect for function _LCDPut
  2699                           
  2700                           
  2701                           ;incstack = 0
  2702 ;; hardware stack exceeded
  2703                           ; Regs used in _LCDPut: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2704                           ;LCDPut@data stored from wreg
  2705  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2706  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2707  0002' 0086'              	movwf	LCDPut@data
  2708                           
  2709                           ;lcd_hd44780.c: 41: TRISA &= 0xF0;
  2710  0003' 30F0               	movlw	240
  2711  0004' 00FF               	movwf	127
  2712  0005' 087F               	movf	127,w
  2713  0006' 1683               	bsf	3,5	;RP0=1, select bank1
  2714  0007' 1303               	bcf	3,6	;RP1=0, select bank1
  2715  0008' 0585               	andwf	5,f	;volatile
  2716                           
  2717                           ;lcd_hd44780.c: 44: PORTAbits.RA6 = 1;
  2718  0009' 1283               	bcf	3,5	;RP0=0, select bank0
  2719  000A' 1303               	bcf	3,6	;RP1=0, select bank0
  2720  000B' 1705               	bsf	5,6	;volatile
  2721                           
  2722                           ;lcd_hd44780.c: 45: __nop();
  2723  000C' 0000               	nop
  2724                           
  2725                           ;lcd_hd44780.c: 46: PORTA = (PORTA & 0xF0) | data >> 4;
  2726  000D' 1283               	bcf	3,5	;RP0=0, select bank0
  2727  000E' 1303               	bcf	3,6	;RP1=0, select bank0
  2728  000F' 0806'              	movf	LCDPut@data,w
  2729  0010' 0085'              	movwf	??_LCDPut
  2730  0011' 3004               	movlw	4
  2731  0012'                    u395:
  2732  0012' 1003               	clrc
  2733  0013' 0C85'              	rrf	??_LCDPut,f
  2734  0014' 3EFF               	addlw	-1
  2735  0015' 1D03               	skipz
  2736  0016' 2812'              	goto	u395
  2737  0017' 0805               	movf	5,w	;volatile
  2738  0018' 39F0               	andlw	240
  2739  0019' 0405'              	iorwf	??_LCDPut,w
  2740  001A' 0085               	movwf	5	;volatile
  2741                           
  2742                           ;lcd_hd44780.c: 47: __nop();
  2743  001B' 0000               	nop
  2744                           
  2745                           ;lcd_hd44780.c: 48: PORTAbits.RA6 = 0;
  2746  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  2747  001D' 1303               	bcf	3,6	;RP1=0, select bank0
  2748  001E' 1305               	bcf	5,6	;volatile
  2749                           
  2750                           ;lcd_hd44780.c: 50: __nop();
  2751  001F' 0000               	nop
  2752                           
  2753                           ;lcd_hd44780.c: 51: __nop();
  2754  0020' 0000               	nop
  2755                           
  2756                           ;lcd_hd44780.c: 54: PORTAbits.RA6 = 1;
  2757  0021' 1283               	bcf	3,5	;RP0=0, select bank0
  2758  0022' 1303               	bcf	3,6	;RP1=0, select bank0
  2759  0023' 1705               	bsf	5,6	;volatile
  2760                           
  2761                           ;lcd_hd44780.c: 55: __nop();
  2762  0024' 0000               	nop
  2763                           
  2764                           ;lcd_hd44780.c: 56: PORTA = (PORTA & 0xF0) | (data & 0x0f);
  2765  0025' 300F               	movlw	15
  2766  0026' 1283               	bcf	3,5	;RP0=0, select bank0
  2767  0027' 1303               	bcf	3,6	;RP1=0, select bank0
  2768  0028' 0506'              	andwf	LCDPut@data,w
  2769  0029' 0085'              	movwf	??_LCDPut
  2770  002A' 0805               	movf	5,w	;volatile
  2771  002B' 39F0               	andlw	240
  2772  002C' 0405'              	iorwf	??_LCDPut,w
  2773  002D' 0085               	movwf	5	;volatile
  2774                           
  2775                           ;lcd_hd44780.c: 57: __nop();
  2776  002E' 0000               	nop
  2777                           
  2778                           ;lcd_hd44780.c: 58: PORTAbits.RA6 = 0;
  2779  002F' 1283               	bcf	3,5	;RP0=0, select bank0
  2780  0030' 1303               	bcf	3,6	;RP1=0, select bank0
  2781  0031' 1305               	bcf	5,6	;volatile
  2782                           
  2783                           ;lcd_hd44780.c: 60: LCDWaitNotBusy();
  2784  0032' 2000'              	fcall	_LCDWaitNotBusy
  2785  0033' 0008               	return
  2786  0034'                    __end_of_LCDPut:
  2787                           
  2788                           	psect	text21
  2789  0000'                    __ptext21:	
  2790 ;; *************** function _LCDWaitNotBusy *****************
  2791 ;; Defined at:
  2792 ;;		line 64 in file "lcd_hd44780.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  busy            1    4[BANK0 ] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0, btemp+1
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2806 ;;      Params:         0       0       0       0
  2807 ;;      Locals:         0       1       0       0
  2808 ;;      Temps:          0       1       0       0
  2809 ;;      Totals:         0       2       0       0
  2810 ;;Total ram usage:        2 bytes
  2811 ;; Hardware stack levels used: 1
  2812 ;; Hardware stack levels required when called: 7
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_LCDPut
  2817 ;;		_LCDInit
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821  0000'                    _LCDWaitNotBusy:	
  2822                           ;psect for function _LCDWaitNotBusy
  2823                           
  2824                           
  2825                           ;lcd_hd44780.c: 65: bool busy;;lcd_hd44780.c: 67: _delay((unsigned long)((50)*(4000000/4
      +                          000000.0)));
  2826                           
  2827                           ;incstack = 0
  2828 ;; hardware stack exceeded
  2829                           ; Regs used in _LCDWaitNotBusy: [wreg+status,2+status,0+btemp+1]
  2830  0000' 3010               	movlw	16
  2831  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  2832  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  2833  0003' 0083'              	movwf	??_LCDWaitNotBusy
  2834  0004'                    u767:
  2835  0004' 0B83'              	decfsz	??_LCDWaitNotBusy,f
  2836  0005' 2804'              	goto	u767
  2837                           
  2838                           ;lcd_hd44780.c: 68: PORTAbits.RA4 = 0;
  2839  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  2840  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  2841  0008' 1205               	bcf	5,4	;volatile
  2842                           
  2843                           ;lcd_hd44780.c: 69: PORTAbits.RA7 = 1;
  2844  0009' 1785               	bsf	5,7	;volatile
  2845                           
  2846                           ;lcd_hd44780.c: 89: TRISA |= 0x0f;
  2847  000A' 300F               	movlw	15
  2848  000B' 00FF               	movwf	127
  2849  000C' 087F               	movf	127,w
  2850  000D' 1683               	bsf	3,5	;RP0=1, select bank1
  2851  000E' 1303               	bcf	3,6	;RP1=0, select bank1
  2852  000F' 0485               	iorwf	5,f	;volatile
  2853  0010'                    l1371:
  2854                           
  2855                           ;lcd_hd44780.c: 92: PORTAbits.RA6 = 1;
  2856  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  2857  0011' 1705               	bsf	5,6	;volatile
  2858                           
  2859                           ;lcd_hd44780.c: 93: __nop();
  2860  0012' 0000               	nop
  2861                           
  2862                           ;lcd_hd44780.c: 94: __nop();
  2863  0013' 0000               	nop
  2864                           
  2865                           ;lcd_hd44780.c: 96: busy = PORTA & 0x08;
  2866  0014' 1283               	bcf	3,5	;RP0=0, select bank0
  2867  0015' 1303               	bcf	3,6	;RP1=0, select bank0
  2868  0016' 0805               	movf	5,w	;volatile
  2869  0017' 3908               	andlw	8
  2870  0018' 0084'              	movwf	LCDWaitNotBusy@busy
  2871                           
  2872                           ;lcd_hd44780.c: 98: PORTAbits.RA6 = 0;
  2873  0019' 1305               	bcf	5,6	;volatile
  2874                           
  2875                           ;lcd_hd44780.c: 99: __nop();
  2876  001A' 0000               	nop
  2877                           
  2878                           ;lcd_hd44780.c: 100: __nop();
  2879  001B' 0000               	nop
  2880                           
  2881                           ;lcd_hd44780.c: 102: PORTAbits.RA6 = 1;
  2882  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  2883  001D' 1303               	bcf	3,6	;RP1=0, select bank0
  2884  001E' 1705               	bsf	5,6	;volatile
  2885                           
  2886                           ;lcd_hd44780.c: 103: __nop();
  2887  001F' 0000               	nop
  2888                           
  2889                           ;lcd_hd44780.c: 104: __nop();
  2890  0020' 0000               	nop
  2891                           
  2892                           ;lcd_hd44780.c: 105: PORTAbits.RA6 = 0;
  2893  0021' 1283               	bcf	3,5	;RP0=0, select bank0
  2894  0022' 1303               	bcf	3,6	;RP1=0, select bank0
  2895  0023' 1305               	bcf	5,6	;volatile
  2896                           
  2897                           ;lcd_hd44780.c: 106: __nop();
  2898  0024' 0000               	nop
  2899                           
  2900                           ;lcd_hd44780.c: 107: __nop();
  2901  0025' 0000               	nop
  2902                           
  2903                           ;lcd_hd44780.c: 108: } while (busy);
  2904  0026' 1283               	bcf	3,5	;RP0=0, select bank0
  2905  0027' 1303               	bcf	3,6	;RP1=0, select bank0
  2906  0028' 0804'              	movf	LCDWaitNotBusy@busy,w
  2907  0029' 1D03               	btfss	3,2
  2908  002A' 2810'              	goto	l1371
  2909                           
  2910                           ;lcd_hd44780.c: 111: PORTAbits.RA7 = 0;
  2911  002B' 1385               	bcf	5,7	;volatile
  2912  002C' 0008               	return
  2913  002D'                    __end_of_LCDWaitNotBusy:
  2914                           
  2915                           	psect	text22
  2916  0000'                    __ptext22:	
  2917 ;; *************** function _isr *****************
  2918 ;; Defined at:
  2919 ;;		line 116 in file "main.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  _key            1    2[BANK0 ] unsigned char 
  2924 ;;  _col            1    0[BANK0 ] unsigned char 
  2925 ;;  _row            1    1[BANK0 ] unsigned char 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  1    wreg      void 
  2928 ;; Registers used:
  2929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2935 ;;      Params:         0       0       0       0
  2936 ;;      Locals:         0       3       0       0
  2937 ;;      Temps:          5       0       0       0
  2938 ;;      Totals:         5       3       0       0
  2939 ;;Total ram usage:        8 bytes
  2940 ;; Hardware stack levels used: 1
  2941 ;; Hardware stack levels required when called: 6
  2942 ;; This function calls:
  2943 ;;		__beep
  2944 ;;		_beep_isr
  2945 ;;		_gameB_isr
  2946 ;;		_kbd_eval
  2947 ;; This function is called by:
  2948 ;;		Interrupt level 1
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952  0000'                    _isr:	
  2953                           ;psect for function _isr
  2954                           
  2955                           
  2956                           ;main.c: 121: if (T0IF) {
  2957  0000' 1D0B               	btfss	11,2	;volatile
  2958  0001' 283A'              	goto	i1l1871
  2959                           
  2960                           ;main.c: 122: T0IF = 0;
  2961  0002' 110B               	bcf	11,2	;volatile
  2962                           
  2963                           ;main.c: 125: uint8_t _row = (PORTB);
  2964  0003' 1283               	bcf	3,5	;RP0=0, select bank0
  2965  0004' 1303               	bcf	3,6	;RP1=0, select bank0
  2966  0005' 0806               	movf	6,w	;volatile
  2967  0006' 0081'              	movwf	isr@_row
  2968                           
  2969                           ;main.c: 129: if (kbd_skip_t0_cyc) {
  2970  0007' 0807'              	movf	_kbd_skip_t0_cyc,w
  2971  0008' 1903               	btfsc	3,2
  2972  0009' 280C'              	goto	i1l1849
  2973                           
  2974                           ;main.c: 130: kbd_skip_t0_cyc--;
  2975  000A' 3001               	movlw	1
  2976  000B' 0287'              	subwf	_kbd_skip_t0_cyc,f
  2977  000C'                    i1l1849:
  2978                           
  2979                           ;main.c: 131: };main.c: 133: if (_row & 0xf0 && !key) {
  2980  000C' 0801'              	movf	isr@_row,w
  2981  000D' 39F0               	andlw	240
  2982  000E' 1903               	btfsc	3,2
  2983  000F' 282C'              	goto	i1l1865
  2984  0010' 080A'              	movf	_key,w
  2985  0011' 1D03               	btfss	3,2
  2986  0012' 282C'              	goto	i1l1865
  2987                           
  2988                           ;main.c: 134: uint8_t _col = key_col_select & 0x03;
  2989  0013' 0808'              	movf	_key_col_select,w
  2990  0014' 3903               	andlw	3
  2991  0015' 0080'              	movwf	isr@_col
  2992                           
  2993                           ;main.c: 135: uint8_t _key;;main.c: 137: _key = kbd_eval(_row, _col);
  2994  0016' 0800'              	movf	isr@_col,w
  2995  0017' 0080'              	movwf	kbd_eval@col
  2996  0018' 0801'              	movf	isr@_row,w
  2997  0019' 2000'              	fcall	_kbd_eval
  2998  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  2999  001B' 1303               	bcf	3,6	;RP1=0, select bank0
  3000  001C' 0082'              	movwf	isr@_key
  3001                           
  3002                           ;main.c: 140: if (_key != prev_key || !kbd_skip_t0_cyc) {
  3003  001D' 0802'              	movf	isr@_key,w
  3004  001E' 0609'              	xorwf	_prev_key,w
  3005  001F' 1D03               	skipz
  3006  0020' 2824'              	goto	i1l1861
  3007  0021' 0807'              	movf	_kbd_skip_t0_cyc,w
  3008  0022' 1D03               	btfss	3,2
  3009  0023' 282C'              	goto	i1l1865
  3010  0024'                    i1l1861:
  3011                           
  3012                           ;main.c: 141: kbd_skip_t0_cyc = 12;
  3013  0024' 300C               	movlw	12
  3014  0025' 0087'              	movwf	_kbd_skip_t0_cyc
  3015                           
  3016                           ;main.c: 142: key = _key;
  3017  0026' 0802'              	movf	isr@_key,w
  3018  0027' 008A'              	movwf	_key
  3019                           
  3020                           ;main.c: 143: prev_key = _key;
  3021  0028' 0802'              	movf	isr@_key,w
  3022  0029' 0089'              	movwf	_prev_key
  3023                           
  3024                           ;main.c: 144: _beep((6));
  3025  002A' 3006               	movlw	6
  3026  002B' 2000'              	fcall	__beep
  3027  002C'                    i1l1865:
  3028                           
  3029                           ;main.c: 145: };main.c: 146: };main.c: 149: key_col_select++;
  3030  002C' 3001               	movlw	1
  3031  002D' 00FF               	movwf	127
  3032  002E' 087F               	movf	127,w
  3033  002F' 1283               	bcf	3,5	;RP0=0, select bank0
  3034  0030' 1303               	bcf	3,6	;RP1=0, select bank0
  3035  0031' 0788'              	addwf	_key_col_select,f
  3036                           
  3037                           ;main.c: 150: (PORTB) = ((PORTB) & 0xFC) | (key_col_select & 0x03);
  3038  0032' 3003               	movlw	3
  3039  0033' 0508'              	andwf	_key_col_select,w
  3040  0034' 0088'              	movwf	??_isr
  3041  0035' 0806               	movf	6,w	;volatile
  3042  0036' 39FC               	andlw	252
  3043  0037' 0408'              	iorwf	??_isr,w
  3044  0038' 0086               	movwf	6	;volatile
  3045                           
  3046                           ;main.c: 153: beep_isr();
  3047  0039' 2000'              	fcall	_beep_isr
  3048  003A'                    i1l1871:
  3049                           
  3050                           ;main.c: 154: };main.c: 156: gameB_isr();
  3051  003A' 2000'              	fcall	_gameB_isr
  3052  003B' 080C'              	movf	??_isr+4,w
  3053  003C' 00FF               	movwf	127
  3054  003D' 080B'              	movf	??_isr+3,w
  3055  003E' 008A               	movwf	10
  3056  003F' 080A'              	movf	??_isr+2,w
  3057  0040' 0084               	movwf	4
  3058  0041' 0E09'              	swapf	??_isr+1,w
  3059  0042' 0083               	movwf	3
  3060  0043' 0EFE               	swapf	126,f
  3061  0044' 0E7E               	swapf	126,w
  3062  0045' 0009               	retfie
  3063  0046'                    __end_of_isr:
  3064                           
  3065                           	psect	intentry
  3066  0000'                    __pintentry:	
  3067                           ;incstack = 0
  3068 ;; hardware stack exceeded
  3069                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3070                           
  3071  0000'                    interrupt_function:
  3072  007E                     saved_w	set	btemp
  3073  0000' 00FE               	movwf	btemp
  3074  0001' 0E03               	swapf	3,w
  3075  0002' 0089'              	movwf	??_isr+1
  3076  0003' 0804               	movf	4,w
  3077  0004' 008A'              	movwf	??_isr+2
  3078  0005' 080A               	movf	10,w
  3079  0006' 008B'              	movwf	??_isr+3
  3080  0007' 087F               	movf	btemp+1,w
  3081  0008' 008C'              	movwf	??_isr+4
  3082  0009' 2800'              	ljmp	_isr
  3083                           
  3084                           	psect	text23
  3085  0000'                    __ptext23:	
  3086 ;; *************** function _kbd_eval *****************
  3087 ;; Defined at:
  3088 ;;		line 17 in file "keybrd.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  row             1    wreg     unsigned char 
  3091 ;;  col             1    0[COMMON] unsigned char 
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;  row             1    2[COMMON] unsigned char 
  3094 ;;  key_ptr         1    1[COMMON] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      unsigned char 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3104 ;;      Params:         1       0       0       0
  3105 ;;      Locals:         2       0       0       0
  3106 ;;      Temps:          0       0       0       0
  3107 ;;      Totals:         3       0       0       0
  3108 ;;Total ram usage:        3 bytes
  3109 ;; Hardware stack levels used: 1
  3110 ;; This function calls:
  3111 ;;		Nothing
  3112 ;; This function is called by:
  3113 ;;		_isr
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117  0000'                    _kbd_eval:	
  3118                           ;psect for function _kbd_eval
  3119                           
  3120                           
  3121                           ;incstack = 0
  3122 ;; hardware stack exceeded
  3123                           ; Regs used in _kbd_eval: [wreg-fsr0h+status,2+status,0+btemp+1]
  3124                           ;kbd_eval@row stored from wreg
  3125  0000' 0082'              	movwf	kbd_eval@row
  3126                           
  3127                           ;keybrd.c: 20: uint8_t key_ptr = 0x00;
  3128  0001' 0181'              	clrf	kbd_eval@key_ptr
  3129                           
  3130                           ;keybrd.c: 22: if (row & 0x20) {
  3131  0002' 1E82'              	btfss	kbd_eval@row,5
  3132  0003' 2806'              	goto	i1l256
  3133                           
  3134                           ;keybrd.c: 23: key_ptr = 4;
  3135  0004' 3004               	movlw	4
  3136  0005' 280D'              	goto	L1
  3137  0006'                    i1l256:	
  3138                           ;keybrd.c: 24: } else if (row & 0x40) {
  3139                           
  3140  0006' 1F02'              	btfss	kbd_eval@row,6
  3141  0007' 280A'              	goto	i1l258
  3142                           
  3143                           ;keybrd.c: 25: key_ptr = 8;
  3144  0008' 3008               	movlw	8
  3145  0009' 280D'              	goto	L1
  3146  000A'                    i1l258:	
  3147                           ;keybrd.c: 26: } else if (row & 0x80) {
  3148                           
  3149  000A' 1F82'              	btfss	kbd_eval@row,7
  3150  000B' 280E'              	goto	i1l1765
  3151                           
  3152                           ;keybrd.c: 27: key_ptr = 12;
  3153  000C' 300C               	movlw	12
  3154  000D'                    L1:
  3155  000D' 0081'              	movwf	kbd_eval@key_ptr
  3156  000E'                    i1l1765:
  3157                           
  3158                           ;keybrd.c: 28: };keybrd.c: 32: key_ptr |= col;
  3159  000E' 0800'              	movf	kbd_eval@col,w
  3160  000F' 00FF               	movwf	127
  3161  0010' 087F               	movf	127,w
  3162  0011' 0481'              	iorwf	kbd_eval@key_ptr,f
  3163                           
  3164                           ;keybrd.c: 34: return keys[key_ptr];
  3165  0012' 0801'              	movf	kbd_eval@key_ptr,w
  3166  0013' 3E00'              	addlw	(low (_keys| 0))& (0+255)
  3167  0014' 0084               	movwf	4
  3168  0015' 1383               	bcf	3,7	;select IRP bank1
  3169  0016' 0800               	movf	0,w
  3170  0017' 0008               	return
  3171  0018'                    __end_of_kbd_eval:
  3172                           
  3173                           	psect	text24
  3174  0000'                    __ptext24:	
  3175 ;; *************** function _gameB_isr *****************
  3176 ;; Defined at:
  3177 ;;		line 364 in file "main.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;		None
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;		None
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  1    wreg      void 
  3184 ;; Registers used:
  3185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3191 ;;      Params:         0       0       0       0
  3192 ;;      Locals:         0       0       0       0
  3193 ;;      Temps:          0       0       0       0
  3194 ;;      Totals:         0       0       0       0
  3195 ;;Total ram usage:        0 bytes
  3196 ;; Hardware stack levels used: 1
  3197 ;; Hardware stack levels required when called: 5
  3198 ;; This function calls:
  3199 ;;		i1_gameB_redraw
  3200 ;; This function is called by:
  3201 ;;		_isr
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205  0000'                    _gameB_isr:	
  3206                           ;psect for function _gameB_isr
  3207                           
  3208                           
  3209                           ;main.c: 365: if (!gameB_active) return;
  3210                           
  3211                           ;incstack = 0
  3212 ;; hardware stack exceeded
  3213                           ; Regs used in _gameB_isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3214  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3215  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3216  0002' 0806'              	movf	_gameB_active,w
  3217  0003' 1903               	btfsc	3,2
  3218  0004' 0008               	return
  3219  0005' 280E'              	goto	i1l1803
  3220  0006'                    i1l1793:
  3221                           
  3222                           ;main.c: 370: gameB_active = 0;
  3223  0006' 0186'              	clrf	_gameB_active
  3224                           
  3225                           ;main.c: 371: break;
  3226  0007' 2819'              	goto	i1l1805
  3227  0008'                    i1l1795:
  3228                           
  3229                           ;main.c: 373: gameB_truckpos = 0;
  3230  0008' 0185'              	clrf	_gameB_truckpos
  3231  0009'                    i1l1797:
  3232                           
  3233                           ;main.c: 374: gameB_redraw();
  3234  0009' 2000'              	fcall	i1_gameB_redraw
  3235                           
  3236                           ;main.c: 375: break;
  3237  000A' 2819'              	goto	i1l1805
  3238  000B'                    i1l185:	
  3239                           ;main.c: 376: case 'B':
  3240                           
  3241                           
  3242                           ;main.c: 377: gameB_truckpos = 1;
  3243  000B' 0185'              	clrf	_gameB_truckpos
  3244  000C' 0A85'              	incf	_gameB_truckpos,f
  3245  000D' 2809'              	goto	i1l1797
  3246  000E'                    i1l1803:
  3247  000E' 080A'              	movf	_key,w
  3248                           
  3249                           ; Switch size 1, requested type "simple"
  3250                           ; Number of cases is 3, Range of values is 35 to 66
  3251                           ; switch strategies available:
  3252                           ; Name         Instructions Cycles
  3253                           ; simple_byte           10     6 (average)
  3254                           ; direct_byte           41     9 (fixed)
  3255                           ; jumptable            263     9 (fixed)
  3256                           ;	Chosen strategy is simple_byte
  3257  000F' 3A23               	xorlw	35	; case 35
  3258  0010' 1903               	skipnz
  3259  0011' 2806'              	goto	i1l1793
  3260  0012' 3A62               	xorlw	98	; case 65
  3261  0013' 1903               	skipnz
  3262  0014' 2808'              	goto	i1l1795
  3263  0015' 3A03               	xorlw	3	; case 66
  3264  0016' 1903               	skipnz
  3265  0017' 280B'              	goto	i1l185
  3266  0018' 2819'              	goto	i1l1805
  3267  0019'                    i1l1805:
  3268                           
  3269                           ;main.c: 384: key = '\0';
  3270  0019' 1283               	bcf	3,5	;RP0=0, select bank0
  3271  001A' 1303               	bcf	3,6	;RP1=0, select bank0
  3272  001B' 018A'              	clrf	_key
  3273  001C' 0008               	return
  3274  001D'                    __end_of_gameB_isr:
  3275                           
  3276                           	psect	text25
  3277  0000'                    __ptext25:	
  3278 ;; *************** function i1_gameB_redraw *****************
  3279 ;; Defined at:
  3280 ;;		line 387 in file "main.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3294 ;;      Params:         0       0       0       0
  3295 ;;      Locals:         0       0       0       0
  3296 ;;      Temps:          0       0       0       0
  3297 ;;      Totals:         0       0       0       0
  3298 ;;Total ram usage:        0 bytes
  3299 ;; Hardware stack levels used: 1
  3300 ;; Hardware stack levels required when called: 4
  3301 ;; This function calls:
  3302 ;;		i1_LCDPutChar
  3303 ;;		i1_LCDSetCursorPos
  3304 ;;		i1_LCDWriteString
  3305 ;; This function is called by:
  3306 ;;		_gameB_isr
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310  0000'                    i1_gameB_redraw:	
  3311                           ;psect for function i1_gameB_redraw
  3312                           
  3313                           
  3314                           ;main.c: 388: LCDSetCursorPos(0, 0);
  3315                           
  3316                           ;incstack = 0
  3317 ;; hardware stack exceeded
  3318                           ; Regs used in i1_gameB_redraw: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3319  0000' 0185'              	clrf	i1LCDSetCursorPos@y
  3320  0001' 3000               	movlw	0
  3321  0002' 2000'              	fcall	i1_LCDSetCursorPos
  3322                           
  3323                           ;main.c: 389: LCDWriteString(gameB_track[0]);
  3324  0003' 3000'              	movlw	(low (_gameB_track| 0))& (0+255)
  3325  0004' 0085'              	movwf	i1LCDWriteString@str
  3326  0005' 3000               	movlw	0
  3327  0006' 0086'              	movwf	i1LCDWriteString@str+1
  3328  0007' 2000'              	fcall	i1_LCDWriteString
  3329                           
  3330                           ;main.c: 390: LCDSetCursorPos(0, 1);
  3331  0008' 0185'              	clrf	i1LCDSetCursorPos@y
  3332  0009' 0A85'              	incf	i1LCDSetCursorPos@y,f
  3333  000A' 3000               	movlw	0
  3334  000B' 2000'              	fcall	i1_LCDSetCursorPos
  3335                           
  3336                           ;main.c: 391: LCDWriteString(gameB_track[1]);
  3337  000C' 3000'              	movlw	(low ((_gameB_track| 0+17)))& (0+255)
  3338  000D' 0085'              	movwf	i1LCDWriteString@str
  3339  000E' 3000               	movlw	0
  3340  000F' 0086'              	movwf	i1LCDWriteString@str+1
  3341  0010' 2000'              	fcall	i1_LCDWriteString
  3342                           
  3343                           ;main.c: 393: LCDSetCursorPos(0, gameB_truckpos);
  3344  0011' 1283               	bcf	3,5	;RP0=0, select bank0
  3345  0012' 1303               	bcf	3,6	;RP1=0, select bank0
  3346  0013' 0805'              	movf	_gameB_truckpos,w
  3347  0014' 0085'              	movwf	i1LCDSetCursorPos@y
  3348  0015' 3000               	movlw	0
  3349  0016' 2000'              	fcall	i1_LCDSetCursorPos
  3350                           
  3351                           ;main.c: 394: LCDPutChar(0);
  3352  0017' 3000               	movlw	0
  3353  0018' 2000'              	fcall	i1_LCDPutChar
  3354                           
  3355                           ;main.c: 395: LCDPutChar(1);
  3356  0019' 3001               	movlw	1
  3357  001A' 2000'              	fcall	i1_LCDPutChar
  3358                           
  3359                           ;main.c: 396: LCDPutChar(2);
  3360  001B' 3002               	movlw	2
  3361  001C' 2000'              	fcall	i1_LCDPutChar
  3362  001D' 0008               	return
  3363  001E'                    __end_ofi1_gameB_redraw:
  3364                           
  3365                           	psect	text26
  3366  0000'                    __ptext26:	
  3367 ;; *************** function i1_LCDWriteString *****************
  3368 ;; Defined at:
  3369 ;;		line 162 in file "lcd_hd44780.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  str             2    5[COMMON] PTR const unsigned char 
  3372 ;;		 -> gameB_track(34), gameA@second_line(17), STR_2(7), STR_1(18), 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;		None
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  1    wreg      void 
  3377 ;; Registers used:
  3378 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3384 ;;      Params:         2       0       0       0
  3385 ;;      Locals:         0       0       0       0
  3386 ;;      Temps:          0       0       0       0
  3387 ;;      Totals:         2       0       0       0
  3388 ;;Total ram usage:        2 bytes
  3389 ;; Hardware stack levels used: 1
  3390 ;; Hardware stack levels required when called: 3
  3391 ;; This function calls:
  3392 ;;		i1_LCDPutChar
  3393 ;; This function is called by:
  3394 ;;		i1_gameB_redraw
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398  0000'                    i1_LCDWriteString:	
  3399                           ;psect for function i1_LCDWriteString
  3400                           
  3401  0000'                    i1l1585:	
  3402                           ;lcd_hd44780.c: 163: while (*str) {
  3403                           
  3404                           ;incstack = 0
  3405 ;; hardware stack exceeded
  3406                           ; Regs used in i1_LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3407                           
  3408  0000' 0806'              	movf	i1LCDWriteString@str+1,w
  3409  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  3410  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  3411  0003' 00FF               	movwf	127
  3412  0004' 0805'              	movf	i1LCDWriteString@str,w
  3413  0005' 0084               	movwf	4
  3414  0006' 2000'              	fcall	stringtab
  3415  0007' 3A00               	xorlw	0
  3416  0008' 1903               	btfsc	3,2
  3417  0009' 0008               	return
  3418                           
  3419                           ;lcd_hd44780.c: 164: LCDPutChar(*str++);
  3420  000A' 0806'              	movf	i1LCDWriteString@str+1,w
  3421  000B' 00FF               	movwf	127
  3422  000C' 0805'              	movf	i1LCDWriteString@str,w
  3423  000D' 0084               	movwf	4
  3424  000E' 2000'              	fcall	stringtab
  3425  000F' 2000'              	fcall	i1_LCDPutChar
  3426  0010' 3001               	movlw	1
  3427  0011' 0785'              	addwf	i1LCDWriteString@str,f
  3428  0012' 1803               	skipnc
  3429  0013' 0A86'              	incf	i1LCDWriteString@str+1,f
  3430  0014' 3000               	movlw	0
  3431  0015' 0786'              	addwf	i1LCDWriteString@str+1,f
  3432  0016' 2800'              	goto	i1l1585
  3433  0017'                    __end_ofi1_LCDWriteString:
  3434                           
  3435                           	psect	text27
  3436  0000'                    __ptext27:	
  3437 ;; *************** function i1_LCDPutChar *****************
  3438 ;; Defined at:
  3439 ;;		line 173 in file "lcd_hd44780.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  chr             1    wreg     unsigned char 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  chr             1    4[COMMON] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3453 ;;      Params:         0       0       0       0
  3454 ;;      Locals:         1       0       0       0
  3455 ;;      Temps:          0       0       0       0
  3456 ;;      Totals:         1       0       0       0
  3457 ;;Total ram usage:        1 bytes
  3458 ;; Hardware stack levels used: 1
  3459 ;; Hardware stack levels required when called: 2
  3460 ;; This function calls:
  3461 ;;		i1_LCDPut
  3462 ;; This function is called by:
  3463 ;;		i1_gameB_redraw
  3464 ;;		i1_LCDWriteString
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468  0000'                    i1_LCDPutChar:	
  3469                           ;psect for function i1_LCDPutChar
  3470                           
  3471                           
  3472                           ;incstack = 0
  3473 ;; hardware stack exceeded
  3474                           ; Regs used in i1_LCDPutChar: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3475                           ;i1LCDPutChar@chr stored from wreg
  3476  0000' 0084'              	movwf	i1LCDPutChar@chr
  3477                           
  3478                           ;lcd_hd44780.c: 174: PORTAbits.RA4 = 1;
  3479  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  3480  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  3481  0003' 1605               	bsf	5,4	;volatile
  3482                           
  3483                           ;lcd_hd44780.c: 175: LCDPut(chr);
  3484  0004' 0804'              	movf	i1LCDPutChar@chr,w
  3485  0005' 2000'              	fcall	i1_LCDPut
  3486  0006' 0008               	return
  3487  0007'                    __end_ofi1_LCDPutChar:
  3488                           
  3489                           	psect	text28
  3490  0000'                    __ptext28:	
  3491 ;; *************** function i1_LCDSetCursorPos *****************
  3492 ;; Defined at:
  3493 ;;		line 153 in file "lcd_hd44780.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  x               1    wreg     unsigned char 
  3496 ;;  y               1    5[COMMON] unsigned char 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  x               1    7[COMMON] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3508 ;;      Params:         1       0       0       0
  3509 ;;      Locals:         1       0       0       0
  3510 ;;      Temps:          1       0       0       0
  3511 ;;      Totals:         3       0       0       0
  3512 ;;Total ram usage:        3 bytes
  3513 ;; Hardware stack levels used: 1
  3514 ;; Hardware stack levels required when called: 3
  3515 ;; This function calls:
  3516 ;;		i1_LCDPutRS0Cmd
  3517 ;; This function is called by:
  3518 ;;		i1_gameB_redraw
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522  0000'                    i1_LCDSetCursorPos:	
  3523                           ;psect for function i1_LCDSetCursorPos
  3524                           
  3525                           
  3526                           ;incstack = 0
  3527 ;; hardware stack exceeded
  3528                           ; Regs used in i1_LCDSetCursorPos: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3529                           ;i1LCDSetCursorPos@x stored from wreg
  3530  0000' 0087'              	movwf	i1LCDSetCursorPos@x
  3531                           
  3532                           ;lcd_hd44780.c: 154: LCDPutRS0Cmd(0b10000000 | (uint8_t) y * 0x40 + x);
  3533  0001' 0805'              	movf	i1LCDSetCursorPos@y,w
  3534  0002' 0086'              	movwf	??i1_LCDSetCursorPos
  3535  0003' 3006               	movlw	6
  3536  0004'                    u49_25:
  3537  0004' 1003               	clrc
  3538  0005' 0D86'              	rlf	??i1_LCDSetCursorPos,f
  3539  0006' 3EFF               	addlw	-1
  3540  0007' 1D03               	skipz
  3541  0008' 2804'              	goto	u49_25
  3542  0009' 0807'              	movf	i1LCDSetCursorPos@x,w
  3543  000A' 0706'              	addwf	??i1_LCDSetCursorPos,w
  3544  000B' 3880               	iorlw	128
  3545  000C' 2000'              	fcall	i1_LCDPutRS0Cmd
  3546  000D' 0008               	return
  3547  000E'                    __end_ofi1_LCDSetCursorPos:
  3548                           
  3549                           	psect	text29
  3550  0000'                    __ptext29:	
  3551 ;; *************** function i1_LCDPutRS0Cmd *****************
  3552 ;; Defined at:
  3553 ;;		line 114 in file "lcd_hd44780.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  cmd             1    wreg     unsigned char 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  cmd             1    4[COMMON] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3567 ;;      Params:         0       0       0       0
  3568 ;;      Locals:         1       0       0       0
  3569 ;;      Temps:          0       0       0       0
  3570 ;;      Totals:         1       0       0       0
  3571 ;;Total ram usage:        1 bytes
  3572 ;; Hardware stack levels used: 1
  3573 ;; Hardware stack levels required when called: 2
  3574 ;; This function calls:
  3575 ;;		i1_LCDPut
  3576 ;; This function is called by:
  3577 ;;		i1_LCDSetCursorPos
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581  0000'                    i1_LCDPutRS0Cmd:	
  3582                           ;psect for function i1_LCDPutRS0Cmd
  3583                           
  3584                           
  3585                           ;incstack = 0
  3586 ;; hardware stack exceeded
  3587                           ; Regs used in i1_LCDPutRS0Cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3588                           ;i1LCDPutRS0Cmd@cmd stored from wreg
  3589  0000' 0084'              	movwf	i1LCDPutRS0Cmd@cmd
  3590                           
  3591                           ;lcd_hd44780.c: 115: PORTAbits.RA4 = 0;
  3592  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  3593  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  3594  0003' 1205               	bcf	5,4	;volatile
  3595                           
  3596                           ;lcd_hd44780.c: 116: LCDPut(cmd);
  3597  0004' 0804'              	movf	i1LCDPutRS0Cmd@cmd,w
  3598  0005' 2000'              	fcall	i1_LCDPut
  3599  0006' 0008               	return
  3600  0007'                    __end_ofi1_LCDPutRS0Cmd:
  3601                           
  3602                           	psect	text30
  3603  0000'                    __ptext30:	
  3604 ;; *************** function i1_LCDPut *****************
  3605 ;; Defined at:
  3606 ;;		line 27 in file "lcd_hd44780.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  data            1    wreg     unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  data            1    3[COMMON] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      void 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3620 ;;      Params:         0       0       0       0
  3621 ;;      Locals:         1       0       0       0
  3622 ;;      Temps:          1       0       0       0
  3623 ;;      Totals:         2       0       0       0
  3624 ;;Total ram usage:        2 bytes
  3625 ;; Hardware stack levels used: 1
  3626 ;; Hardware stack levels required when called: 1
  3627 ;; This function calls:
  3628 ;;		i1_LCDWaitNotBusy
  3629 ;; This function is called by:
  3630 ;;		i1_LCDPutRS0Cmd
  3631 ;;		i1_LCDPutChar
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635  0000'                    i1_LCDPut:	
  3636                           ;psect for function i1_LCDPut
  3637                           
  3638                           
  3639                           ;incstack = 0
  3640 ;; hardware stack exceeded
  3641                           ; Regs used in i1_LCDPut: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3642                           ;i1LCDPut@data stored from wreg
  3643  0000' 0083'              	movwf	i1LCDPut@data
  3644                           
  3645                           ;lcd_hd44780.c: 41: TRISA &= 0xF0;
  3646  0001' 30F0               	movlw	240
  3647  0002' 00FF               	movwf	127
  3648  0003' 087F               	movf	127,w
  3649  0004' 1683               	bsf	3,5	;RP0=1, select bank1
  3650  0005' 1303               	bcf	3,6	;RP1=0, select bank1
  3651  0006' 0585               	andwf	5,f	;volatile
  3652                           
  3653                           ;lcd_hd44780.c: 44: PORTAbits.RA6 = 1;
  3654  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  3655  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  3656  0009' 1705               	bsf	5,6	;volatile
  3657                           
  3658                           ;lcd_hd44780.c: 45: __nop();
  3659  000A' 0000               	nop
  3660                           
  3661                           ;lcd_hd44780.c: 46: PORTA = (PORTA & 0xF0) | data >> 4;
  3662  000B' 0803'              	movf	i1LCDPut@data,w
  3663  000C' 0082'              	movwf	??i1_LCDPut
  3664  000D' 3004               	movlw	4
  3665  000E'                    u41_25:
  3666  000E' 1003               	clrc
  3667  000F' 0C82'              	rrf	??i1_LCDPut,f
  3668  0010' 3EFF               	addlw	-1
  3669  0011' 1D03               	skipz
  3670  0012' 280E'              	goto	u41_25
  3671  0013' 1283               	bcf	3,5	;RP0=0, select bank0
  3672  0014' 1303               	bcf	3,6	;RP1=0, select bank0
  3673  0015' 0805               	movf	5,w	;volatile
  3674  0016' 39F0               	andlw	240
  3675  0017' 0402'              	iorwf	??i1_LCDPut,w
  3676  0018' 0085               	movwf	5	;volatile
  3677                           
  3678                           ;lcd_hd44780.c: 47: __nop();
  3679  0019' 0000               	nop
  3680                           
  3681                           ;lcd_hd44780.c: 48: PORTAbits.RA6 = 0;
  3682  001A' 1283               	bcf	3,5	;RP0=0, select bank0
  3683  001B' 1303               	bcf	3,6	;RP1=0, select bank0
  3684  001C' 1305               	bcf	5,6	;volatile
  3685                           
  3686                           ;lcd_hd44780.c: 50: __nop();
  3687  001D' 0000               	nop
  3688                           
  3689                           ;lcd_hd44780.c: 51: __nop();
  3690  001E' 0000               	nop
  3691                           
  3692                           ;lcd_hd44780.c: 54: PORTAbits.RA6 = 1;
  3693  001F' 1283               	bcf	3,5	;RP0=0, select bank0
  3694  0020' 1303               	bcf	3,6	;RP1=0, select bank0
  3695  0021' 1705               	bsf	5,6	;volatile
  3696                           
  3697                           ;lcd_hd44780.c: 55: __nop();
  3698  0022' 0000               	nop
  3699                           
  3700                           ;lcd_hd44780.c: 56: PORTA = (PORTA & 0xF0) | (data & 0x0f);
  3701  0023' 300F               	movlw	15
  3702  0024' 0503'              	andwf	i1LCDPut@data,w
  3703  0025' 0082'              	movwf	??i1_LCDPut
  3704  0026' 1283               	bcf	3,5	;RP0=0, select bank0
  3705  0027' 1303               	bcf	3,6	;RP1=0, select bank0
  3706  0028' 0805               	movf	5,w	;volatile
  3707  0029' 39F0               	andlw	240
  3708  002A' 0402'              	iorwf	??i1_LCDPut,w
  3709  002B' 0085               	movwf	5	;volatile
  3710                           
  3711                           ;lcd_hd44780.c: 57: __nop();
  3712  002C' 0000               	nop
  3713                           
  3714                           ;lcd_hd44780.c: 58: PORTAbits.RA6 = 0;
  3715  002D' 1283               	bcf	3,5	;RP0=0, select bank0
  3716  002E' 1303               	bcf	3,6	;RP1=0, select bank0
  3717  002F' 1305               	bcf	5,6	;volatile
  3718                           
  3719                           ;lcd_hd44780.c: 60: LCDWaitNotBusy();
  3720  0030' 2000'              	fcall	i1_LCDWaitNotBusy
  3721  0031' 0008               	return
  3722  0032'                    __end_ofi1_LCDPut:
  3723                           
  3724                           	psect	text31
  3725  0000'                    __ptext31:	
  3726 ;; *************** function i1_LCDWaitNotBusy *****************
  3727 ;; Defined at:
  3728 ;;		line 64 in file "lcd_hd44780.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;  busy            1    1[COMMON] unsigned char 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, btemp+1
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3742 ;;      Params:         0       0       0       0
  3743 ;;      Locals:         1       0       0       0
  3744 ;;      Temps:          1       0       0       0
  3745 ;;      Totals:         2       0       0       0
  3746 ;;Total ram usage:        2 bytes
  3747 ;; Hardware stack levels used: 1
  3748 ;; This function calls:
  3749 ;;		Nothing
  3750 ;; This function is called by:
  3751 ;;		i1_LCDPut
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755  0000'                    i1_LCDWaitNotBusy:	
  3756                           ;psect for function i1_LCDWaitNotBusy
  3757                           
  3758                           
  3759                           ;lcd_hd44780.c: 65: bool busy;;lcd_hd44780.c: 67: _delay((unsigned long)((50)*(4000000/4
      +                          000000.0)));
  3760                           
  3761                           ;incstack = 0
  3762 ;; hardware stack exceeded
  3763                           ; Regs used in i1_LCDWaitNotBusy: [wreg+status,2+status,0+btemp+1]
  3764  0000' 3010               	movlw	16
  3765  0001' 0080'              	movwf	??i1_LCDWaitNotBusy
  3766  0002'                    u77_27:
  3767  0002' 0B80'              	decfsz	??i1_LCDWaitNotBusy,f
  3768  0003' 2802'              	goto	u77_27
  3769  0004' 0000               	nop
  3770                           
  3771                           ;lcd_hd44780.c: 68: PORTAbits.RA4 = 0;
  3772  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  3773  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  3774  0007' 1205               	bcf	5,4	;volatile
  3775                           
  3776                           ;lcd_hd44780.c: 69: PORTAbits.RA7 = 1;
  3777  0008' 1785               	bsf	5,7	;volatile
  3778                           
  3779                           ;lcd_hd44780.c: 89: TRISA |= 0x0f;
  3780  0009' 300F               	movlw	15
  3781  000A' 00FF               	movwf	127
  3782  000B' 087F               	movf	127,w
  3783  000C' 1683               	bsf	3,5	;RP0=1, select bank1
  3784  000D' 1303               	bcf	3,6	;RP1=0, select bank1
  3785  000E' 0485               	iorwf	5,f	;volatile
  3786  000F'                    i1l1435:
  3787                           
  3788                           ;lcd_hd44780.c: 92: PORTAbits.RA6 = 1;
  3789  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  3790  0010' 1303               	bcf	3,6	;RP1=0, select bank0
  3791  0011' 1705               	bsf	5,6	;volatile
  3792                           
  3793                           ;lcd_hd44780.c: 93: __nop();
  3794  0012' 0000               	nop
  3795                           
  3796                           ;lcd_hd44780.c: 94: __nop();
  3797  0013' 0000               	nop
  3798                           
  3799                           ;lcd_hd44780.c: 96: busy = PORTA & 0x08;
  3800  0014' 1283               	bcf	3,5	;RP0=0, select bank0
  3801  0015' 1303               	bcf	3,6	;RP1=0, select bank0
  3802  0016' 0805               	movf	5,w	;volatile
  3803  0017' 3908               	andlw	8
  3804  0018' 0081'              	movwf	i1LCDWaitNotBusy@busy
  3805                           
  3806                           ;lcd_hd44780.c: 98: PORTAbits.RA6 = 0;
  3807  0019' 1305               	bcf	5,6	;volatile
  3808                           
  3809                           ;lcd_hd44780.c: 99: __nop();
  3810  001A' 0000               	nop
  3811                           
  3812                           ;lcd_hd44780.c: 100: __nop();
  3813  001B' 0000               	nop
  3814                           
  3815                           ;lcd_hd44780.c: 102: PORTAbits.RA6 = 1;
  3816  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  3817  001D' 1303               	bcf	3,6	;RP1=0, select bank0
  3818  001E' 1705               	bsf	5,6	;volatile
  3819                           
  3820                           ;lcd_hd44780.c: 103: __nop();
  3821  001F' 0000               	nop
  3822                           
  3823                           ;lcd_hd44780.c: 104: __nop();
  3824  0020' 0000               	nop
  3825                           
  3826                           ;lcd_hd44780.c: 105: PORTAbits.RA6 = 0;
  3827  0021' 1283               	bcf	3,5	;RP0=0, select bank0
  3828  0022' 1303               	bcf	3,6	;RP1=0, select bank0
  3829  0023' 1305               	bcf	5,6	;volatile
  3830                           
  3831                           ;lcd_hd44780.c: 106: __nop();
  3832  0024' 0000               	nop
  3833                           
  3834                           ;lcd_hd44780.c: 107: __nop();
  3835  0025' 0000               	nop
  3836                           
  3837                           ;lcd_hd44780.c: 108: } while (busy);
  3838  0026' 0801'              	movf	i1LCDWaitNotBusy@busy,w
  3839  0027' 1D03               	btfss	3,2
  3840  0028' 280F'              	goto	i1l1435
  3841                           
  3842                           ;lcd_hd44780.c: 111: PORTAbits.RA7 = 0;
  3843  0029' 1283               	bcf	3,5	;RP0=0, select bank0
  3844  002A' 1303               	bcf	3,6	;RP1=0, select bank0
  3845  002B' 1385               	bcf	5,7	;volatile
  3846  002C' 0008               	return
  3847  002D'                    __end_ofi1_LCDWaitNotBusy:
  3848                           
  3849                           	psect	text32
  3850  0000'                    __ptext32:	
  3851 ;; *************** function _beep_isr *****************
  3852 ;; Defined at:
  3853 ;;		line 162 in file "main.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;		None
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;		None
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg, status,2, status,0
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3867 ;;      Params:         0       0       0       0
  3868 ;;      Locals:         0       0       0       0
  3869 ;;      Temps:          0       0       0       0
  3870 ;;      Totals:         0       0       0       0
  3871 ;;Total ram usage:        0 bytes
  3872 ;; Hardware stack levels used: 1
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_isr
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880  0000'                    _beep_isr:	
  3881                           ;psect for function _beep_isr
  3882                           
  3883                           
  3884                           ;main.c: 164: if (!CCPR1L) return;
  3885                           
  3886                           ;incstack = 0
  3887 ;; hardware stack exceeded
  3888                           ; Regs used in _beep_isr: [wreg+status,2+status,0]
  3889  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3890  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3891  0002' 0815               	movf	21,w	;volatile
  3892  0003' 1903               	btfsc	3,2
  3893  0004' 0008               	return
  3894                           
  3895                           ;main.c: 167: if (beep_timer) {
  3896  0005' 0800'              	movf	_beep_timer,w
  3897  0006' 1903               	btfsc	3,2
  3898  0007' 280B'              	goto	i1l1787
  3899                           
  3900                           ;main.c: 168: beep_timer--;
  3901  0008' 3001               	movlw	1
  3902  0009' 0280'              	subwf	_beep_timer,f
  3903  000A' 0008               	return
  3904  000B'                    i1l1787:
  3905                           
  3906                           ;main.c: 170: };main.c: 173: CCPR1L = 0;
  3907  000B' 0195               	clrf	21	;volatile
  3908  000C' 0008               	return
  3909  000D'                    __end_of_beep_isr:
  3910                           
  3911                           	psect	text33
  3912  0000'                    __ptext33:	
  3913 ;; *************** function __beep *****************
  3914 ;; Defined at:
  3915 ;;		line 181 in file "main.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  length          1    wreg     unsigned char 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  length          1    0[COMMON] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3929 ;;      Params:         0       0       0       0
  3930 ;;      Locals:         1       0       0       0
  3931 ;;      Temps:          0       0       0       0
  3932 ;;      Totals:         1       0       0       0
  3933 ;;Total ram usage:        1 bytes
  3934 ;; Hardware stack levels used: 1
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_isr
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942  0000'                    __beep:	
  3943                           ;psect for function __beep
  3944                           
  3945                           
  3946                           ;incstack = 0
  3947 ;; hardware stack exceeded
  3948                           ; Regs used in __beep: [wreg+status,2+status,0]
  3949                           ;__beep@length stored from wreg
  3950  0000' 0080'              	movwf	__beep@length
  3951                           
  3952                           ;main.c: 183: if (CCPR1L) return;
  3953  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  3954  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  3955  0003' 0815               	movf	21,w	;volatile
  3956  0004' 1D03               	btfss	3,2
  3957  0005' 0008               	return
  3958                           
  3959                           ;main.c: 185: beep_timer = length;
  3960  0006' 0800'              	movf	__beep@length,w
  3961  0007' 0080'              	movwf	_beep_timer
  3962                           
  3963                           ;main.c: 188: CCPR1L = 60;
  3964  0008' 303C               	movlw	60
  3965  0009' 0095               	movwf	21	;volatile
  3966  000A' 0008               	return
  3967  000B'                    __end_of__beep:
  3968  007E                     btemp	set	126	;btemp
  3969  007E                     wtemp0	set	126
  3970                           
  3971                           	psect	idloc
  3972                           
  3973                           ;Config register IDLOC0 @ 0x2000
  3974                           ;	unspecified, using default values
  3975  2000                     	org	8192
  3976  2000  3FFF               	dw	16383
  3977                           
  3978                           ;Config register IDLOC1 @ 0x2001
  3979                           ;	unspecified, using default values
  3980  2001                     	org	8193
  3981  2001  3FFF               	dw	16383
  3982                           
  3983                           ;Config register IDLOC2 @ 0x2002
  3984                           ;	unspecified, using default values
  3985  2002                     	org	8194
  3986  2002  3FFF               	dw	16383
  3987                           
  3988                           ;Config register IDLOC3 @ 0x2003
  3989                           ;	unspecified, using default values
  3990  2003                     	org	8195
  3991  2003  3FFF               	dw	16383
  3992                           
  3993                           	psect	config
  3994                           
  3995                           ;Config register CONFIG @ 0x2007
  3996                           ;	Oscillator Selection bits
  3997                           ;	FOSC = INTOSCIO, INTRC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function o
      +                          n RA7/OSC1/CLKIN
  3998                           ;	Watchdog Timer Enable bit
  3999                           ;	WDTE = OFF, WDT disabled
  4000                           ;	Power-up Timer Enable bit
  4001                           ;	PWRTE = OFF, PWRT disabled
  4002                           ;	RA5/MCLR pin function select
  4003                           ;	MCLRE = OFF, RA5/MCLR pin function is digital input, MCLR internally tied to VDD
  4004                           ;	Brown-out Reset Enable bit
  4005                           ;	BOREN = ON, BOD Reset enabled
  4006                           ;	Low-Voltage Programming Enable bit
  4007                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  4008                           ;	Data Code Protection bit
  4009                           ;	CPD = OFF, Data memory code protection off
  4010                           ;	Code Protection bits
  4011                           ;	CP = OFF, Program memory code protection off
  4012  2007                     	org	8199
  4013  2007  3F58               	dw	16216

Data Sizes:
    Strings     25
    Constant    0
    Data        57
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     31      76
    BANK1            80      0      16
    BANK2            48      0       0

Pointer List with Targets:

    __eetoc@addr	PTR eeprom void  size(1) Largest target is 24
		 -> tiles(EEDATA[16]), eeprom_cgram_data(EEDATA[24]), eeprom_keys(EEDATA[17]), 

    __eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 24
		 -> tiles(EEDATA[16]), eeprom_cgram_data(EEDATA[24]), eeprom_keys(EEDATA[17]), 

    __eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(BANK0[1]), 

    __eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(BANK0[1]), 

    LCDStoreCustom5x8Character@dataarr	PTR const unsigned char  size(1) Largest target is 24
		 -> eeprom_cgram_data(EEDATA[24]), 

    LCDWriteString@str	PTR const unsigned char  size(2) Largest target is 34
		 -> gameB_track(BANK0[34]), gameA@second_line(BANK0[17]), STR_2(CODE[7]), STR_1(CODE[18]), 

    clearstr@str	PTR unsigned char  size(1) Largest target is 34
		 -> gameB_track(BANK0[34]), gameA@second_line(BANK0[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_gameB_redraw->i1_LCDSetCursorPos
    i1_LCDWriteString->i1_LCDPutChar
    i1_LCDPutChar->i1_LCDPut
    i1_LCDSetCursorPos->i1_LCDPutRS0Cmd
    i1_LCDPutRS0Cmd->i1_LCDPut
    i1_LCDPut->i1_LCDWaitNotBusy

Critical Paths under _main in BANK0

    _game_menu->_gameA
    _gameB_redraw->_LCDSetCursorPos
    _gameA->_LCDSetCursorPos
    _LCDWriteString->_LCDPutChar
    _LCDSetCursorPos->_LCDPutRS0Cmd
    _LCDStoreCustom5x8Character->_LCDSetCGRAMAddress
    _LCDStoreCustom5x8Character->___eetoc
    ___eetoc->___eecpymem
    _LCDSetCGRAMAddress->_LCDPutRS0Cmd
    _LCDPutChar->_LCDPut
    _LCDInit->_LCDPutRS0Cmd
    _LCDEntryModeSet->_LCDPutRS0Cmd
    _LCDDisplayControl->_LCDPutRS0Cmd
    _LCDPutRS0Cmd->_LCDPut
    _LCDPut->_LCDWaitNotBusy

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    9942
                                             30 BANK0      1     1      0
                  _LCDDisplayControl
                            _LCDInit
                       _LCDPutRS0Cmd
         _LCDStoreCustom5x8Character
                            ___eetoc
                          _game_menu
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _game_menu                                            0     0      0    6253
                  _LCDDisplayControl
                       _LCDPutRS0Cmd
                    _LCDSetCursorPos
                     _LCDWriteString
                            __getkey
                              _gameA
                              _gameB
 ---------------------------------------------------------------------------------
 (2) _gameB                                                4     4      0    3030
                                             11 BANK0      4     4      0
                            ___eetoc
                           _clearstr
                       _gameB_redraw
                             _psrand
 ---------------------------------------------------------------------------------
 (3) _psrand                                               1     1      0      45
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _gameB_redraw                                         0     0      0    1344
                         _LCDPutChar
                    _LCDSetCursorPos
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _gameA                                               19    19      0    1790
                                             11 BANK0     19    19      0
                         _LCDPutChar
                       _LCDPutRS0Cmd
                    _LCDSetCursorPos
                     _LCDWriteString
                            __getkey
                           _clearstr
 ---------------------------------------------------------------------------------
 (3) _clearstr                                             1     1      0     144
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) __getkey                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       2     0      2     514
                                              8 BANK0      2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (4) _LCDSetCursorPos                                      3     2      1     741
                                              8 BANK0      3     2      1
                       _LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (1) _LCDStoreCustom5x8Character                           4     3      1    1813
                                              9 BANK0      4     3      1
                         _LCDPutChar
                 _LCDSetCGRAMAddress
                            ___eetoc
 ---------------------------------------------------------------------------------
 (3) ___eetoc                                              2     2      0    1316
                                              7 BANK0      2     2      0
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (4) ___eecpymem                                           4     2      2    1229
                                              3 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _LCDSetCGRAMAddress                                   1     1      0     111
                                              8 BANK0      1     1      0
                       _LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (5) _LCDPutChar                                           1     1      0      89
                                              7 BANK0      1     1      0
                             _LCDPut
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0     314
                                              8 BANK0      3     3      0
                  _LCDDisplayControl
                    _LCDEntryModeSet
                       _LCDPutRS0Cmd
                     _LCDWaitNotBusy
 ---------------------------------------------------------------------------------
 (2) _LCDEntryModeSet                                      0     0      0      89
                       _LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (2) _LCDDisplayControl                                    0     0      0      89
                       _LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (5) _LCDPutRS0Cmd                                         1     1      0      89
                                              7 BANK0      1     1      0
                             _LCDPut
 ---------------------------------------------------------------------------------
 (6) _LCDPut                                               2     2      0      67
                                              5 BANK0      2     2      0
                     _LCDWaitNotBusy
 ---------------------------------------------------------------------------------
 (7) _LCDWaitNotBusy                                       2     2      0      23
                                              3 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  8     8      0     834
                                              8 COMMON     5     5      0
                                              0 BANK0      3     3      0
                              __beep
                           _beep_isr
                          _gameB_isr
                           _kbd_eval
 ---------------------------------------------------------------------------------
 (9) _kbd_eval                                             3     2      1     191
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (9) _gameB_isr                                            0     0      0     486
                     i1_gameB_redraw
 ---------------------------------------------------------------------------------
 (10) i1_gameB_redraw                                      0     0      0     486
                       i1_LCDPutChar
                  i1_LCDSetCursorPos
                   i1_LCDWriteString
 ---------------------------------------------------------------------------------
 (11) i1_LCDWriteString                                    2     0      2     186
                                              5 COMMON     2     0      2
                       i1_LCDPutChar
 ---------------------------------------------------------------------------------
 (12) i1_LCDPutChar                                        1     1      0      89
                                              4 COMMON     1     1      0
                           i1_LCDPut
 ---------------------------------------------------------------------------------
 (11) i1_LCDSetCursorPos                                   3     2      1     211
                                              5 COMMON     3     2      1
                     i1_LCDPutRS0Cmd
 ---------------------------------------------------------------------------------
 (12) i1_LCDPutRS0Cmd                                      1     1      0      89
                                              4 COMMON     1     1      0
                           i1_LCDPut
 ---------------------------------------------------------------------------------
 (13) i1_LCDPut                                            2     2      0      67
                                              2 COMMON     2     2      0
                   i1_LCDWaitNotBusy
 ---------------------------------------------------------------------------------
 (14) i1_LCDWaitNotBusy                                    2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _beep_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) __beep                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDDisplayControl
     _LCDPutRS0Cmd
       _LCDPut
         _LCDWaitNotBusy
   _LCDInit
     _LCDDisplayControl
     _LCDEntryModeSet
       _LCDPutRS0Cmd
     _LCDPutRS0Cmd
     _LCDWaitNotBusy
   _LCDPutRS0Cmd
   _LCDStoreCustom5x8Character
     _LCDPutChar
       _LCDPut
     _LCDSetCGRAMAddress
       _LCDPutRS0Cmd
     ___eetoc
       ___eecpymem
   ___eetoc
   _game_menu
     _LCDDisplayControl
     _LCDPutRS0Cmd
     _LCDSetCursorPos
       _LCDPutRS0Cmd
     _LCDWriteString
       _LCDPutChar
     __getkey
     _gameA
       _LCDPutChar
       _LCDPutRS0Cmd
       _LCDSetCursorPos
       _LCDWriteString
       __getkey
       _clearstr
     _gameB
       ___eetoc
       _clearstr
       _gameB_redraw
         _LCDPutChar
         _LCDSetCursorPos
         _LCDWriteString
       _psrand
   _init

 _isr (ROOT)
   __beep
   _beep_isr
   _gameB_isr
     i1_gameB_redraw
       i1_LCDPutChar
         i1_LCDPut
           i1_LCDWaitNotBusy
       i1_LCDSetCursorPos
         i1_LCDPutRS0Cmd
           i1_LCDPut
       i1_LCDWriteString
         i1_LCDPutChar
   _kbd_eval

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      10       7       20.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1F      4C       3       95.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6A      10        0.0%
ABS                  0      0      6A       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0      39       0       44.5%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Aug 26 07:14:13 2023

                ??i1_LCDWriteString 0007                        __beep@length 0000  
                                 pc 0002                         ?_LCDPutChar 0000  
                                fsr 0004                                 l154 004B  
                               l172 0027                                 l248 002B  
                               l283 0016                                 l278 0005  
                               _LCD 0002                                 _PR2 0092  
                               u425 0006                                 u395 0012  
                               u595 0006                                 u757 0018  
                               u767 0004                                 _key 000A  
                               _isr 0000                                 fsr0 0004  
                               indf 0000                __end_of_gameB_redraw 0026  
                     ?_LCDPutRS0Cmd 0000                     __end_of_LCDInit 0045  
                    _LCDWaitNotBusy 0000                                l1371 0010  
                              l1523 000F                                l1507 0000  
                              l1611 003F                                l1603 002C  
                              l1701 000F                                l1613 0043  
                              l1543 0003                                l1631 001A  
                              l1539 0003                                l1733 0012  
                              l1637 0029                                l1629 0023  
                              l1741 001A                                l1591 0006  
                              l1831 0030                                l1815 0005  
                              l1649 0010                                l1753 0026  
                              l1817 0017                                l1747 0022  
                              l1597 0015                                ?_isr 0000  
                              STR_1 0010                                STR_2 0022  
                              _T0IF 005A                                _TMR0 0001  
                              _TMR2 0011                                _main 0000  
                              _init 0000                                _keys 0000  
                              btemp 007E                                start 0000* 
                             ??_isr 0008                    ?_LCDEntryModeSet 0000  
                             ?_main 0000                     __end_of___eetoc 000D  
                             ?_init 0000                               _EEADR 009B  
                             _CMCON 001F                    __end_ofi1_LCDPut 0032  
                             _T2CON 0012                      _gameB_truckpos 0005  
                             i1l256 0006                               i1l185 000B  
                             i1l258 000A                     __end_of__getkey 0008  
                             u41_25 000E                               _PORTA 0005  
                             _PORTB 0006                               _TRISA 0085  
                             _TRISB 0086                               u49_25 0004  
                             u77_27 0002              __end_of_LCDWaitNotBusy 002D  
                    ??_LCDPutRS0Cmd 0007                               __beep 0000  
                             _gameA 0000                               _gameB 0000  
                             _tiles 0029             __end_of_LCDSetCursorPos 0010  
                             main@i 001E                               pclath 000A  
                             status 0003                               wtemp0 007E  
                  LCDSetCursorPos@x 000A                    LCDSetCursorPos@y 0008  
                   __initialization 0000                        __end_of_main 003B  
                      __end_of_init 0019                              ??_main 001E  
                            ??_init 0003                           ??_LCDInit 0008  
                   ?_LCDWaitNotBusy 0000                              ?__beep 0000  
                            ?_gameA 0000                              ?_gameB 0000  
                            _EEDATA 009A                              _CCPR1L 0015  
                            _EECON1 009C                       ?i1_LCDPutChar 0000  
                            i1l1435 000F                              i1l1803 000E  
                            i1l1805 0019                              i1l1585 0000  
                            i1l1765 000E                              i1l1861 0024  
                            i1l1871 003A                              i1l1793 0006  
                            i1l1865 002C                              i1l1849 000C  
                            i1l1787 000B                              i1l1795 0008  
                            i1l1797 0009                              _LCDPut 0000  
                            _INTCON 000B                    __end_of_beep_isr 000D  
                   LCDPutRS0Cmd@cmd 0007                    __end_of_clearstr 0012  
                  __end_of_kbd_eval 0018                      _LCDWriteString 0000  
                         ??___eetoc 0007                           ??__getkey 0003  
                            gameB@i 000B                              gameB@j 000D  
                            _psrand 0000                        __pdataEEDATA 0000  
            LCDSetCGRAMAddress@addr 0008                              saved_w 007E  
      ??_LCDStoreCustom5x8Character 000A                      ??i1_LCDPutChar 0004  
                  ?_LCDSetCursorPos 0008                          ___eecpymem 0000  
           __end_of__initialization 000A              __end_of_LCDWriteString 0019  
                      _gameB_active 0006                           ?i1_LCDPut 0000  
                      _gameB_redraw 0000          __end_of_LCDSetCGRAMAddress 0007  
                    __pcstackCOMMON 0000                __end_of_LCDPutRS0Cmd 0007  
                     __end_of__beep 000B                       __end_of_gameA 004C  
                     __end_of_gameB 0057                        ??_LCDPutChar 0007  
                 _eeprom_cgram_data 0000                             ??__beep 0000  
                           ??_gameA 000B                             ??_gameB 000B  
                        _beep_timer 0000                        i1LCDPut@data 0003  
                i1LCDSetCursorPos@x 0007                  i1LCDSetCursorPos@y 0005  
                        __pbssBANK0 0000                          __pbssBANK1 0000  
                           ?_LCDPut 0000                  __end_of_LCDPutChar 0007  
                     LCDPutChar@chr 0007                     ?_LCDWriteString 0008  
                        ??i1_LCDPut 0002                          __pmaintext 0000  
                  i1_LCDWaitNotBusy 0000                      i1_gameB_redraw 0000  
                        __pintentry 0000                             _CCP1CON 0017  
                           ?_psrand 0000                             _LCDInit 0000  
                         ?_beep_isr 0000                           ?_clearstr 0000  
                         ?_kbd_eval 0000                          __stringtab 0000  
                 __end_of_gameB_isr 001D                         ?___eecpymem 0003  
                 __end_of_game_menu 002F                          gameB@i_203 000E  
            __end_ofi1_gameB_redraw 001E                             ___eetoc 0000  
 LCDStoreCustom5x8Character@dataarr 0009                __end_ofi1_LCDPutChar 0007  
                           __getkey 0000                    ??_LCDWaitNotBusy 0003  
                           __ptext1 0000                             __ptext2 0000  
                           __ptext3 0000                             __ptext4 0000  
                           __ptext5 0000                             __ptext6 0000  
                           __ptext7 0000                             __ptext8 0000  
                           __ptext9 0000                          ??_beep_isr 0000  
__end_of_LCDStoreCustom5x8Character 0021          _LCDStoreCustom5x8Character 0000  
                   _kbd_skip_t0_cyc 0007                          ??_clearstr 0003  
                        ??_kbd_eval 0001                             clrloop0 0001  
              end_of_initialization 000A                             isr@_col 0000  
                           isr@_key 0002                             isr@_row 0001  
                   ?i1_gameB_redraw 0000                     i1LCDPutChar@chr 0004  
                         _PORTAbits 0005                   LCDWriteString@str 0008  
                  i1_LCDWriteString 0000                        _LCDPutRS0Cmd 0000  
                    _key_col_select 0008                      __end_of_LCDPut 0034  
                   kbd_eval@key_ptr 0001                          LCDPut@data 0006  
                     __pidataEEDATA 0000                      __end_of_psrand 000B  
                _LCDSetCGRAMAddress 0000                 start_initialization 0000  
                       __end_of_isr 0046            __end_ofi1_LCDWaitNotBusy 002D  
                  gameA@second_line 000B                    ??_LCDWriteString 000A  
               ?_LCDSetCGRAMAddress 0000                            ??_LCDPut 0005  
                    i1_LCDPutRS0Cmd 0000                   i1_LCDSetCursorPos 0000  
                 ??_LCDEntryModeSet 0008                  ?i1_LCDSetCursorPos 0005  
                        init_fetch0 0000                 ??i1_LCDSetCursorPos 0006  
              ??_LCDSetCGRAMAddress 0008                            ??_psrand 0003  
                          ?_LCDInit 0000                         __pbssCOMMON 0000  
                          LCDInit@i 000A                           ___latbits 0000  
                     __pcstackBANK0 0000                         _gameB_track 000B  
            __end_ofi1_LCDPutRS0Cmd 0007           __end_ofi1_LCDSetCursorPos 000E  
                      ??___eecpymem 0005                i1LCDWaitNotBusy@busy 0001  
                      i1_LCDPutChar 0000                           _gameB_isr 0000  
                         _gameB_spd 0000                           _game_menu 0000  
     LCDStoreCustom5x8Character@cnt 000C                            ?___eetoc 0000  
                          ?__getkey 0000                           __pstrings 0000  
                __end_of___eecpymem 0035         ?_LCDStoreCustom5x8Character 0009  
                         gameA@xpos 001C                           gameA@ypos 001D  
                   ?i1_LCDPutRS0Cmd 0000                   interrupt_function 0000  
                  ??i1_gameB_redraw 0008                           clear_ram0 0000  
                       _eeprom_keys 0018                          ?_gameB_isr 0000  
                          i1_LCDPut 0000            __end_ofi1_LCDWriteString 0017  
                          _PCONbits 008E                          ?_game_menu 0000  
                 ??_LCDSetCursorPos 0009                         __stringbase 000F  
                 _LCDDisplayControl 0000                  ?_LCDDisplayControl 0000  
                 i1LCDPutRS0Cmd@cmd 0004                 ??_LCDDisplayControl 0008  
                        _EECON1bits 009C                       ?_gameB_redraw 0000  
                __end_of__stringtab 0010           __end_of_LCDDisplayControl 0005  
                          _beep_isr 0000                     _LCDEntryModeSet 0000  
                          _clearstr 0000                            __ptext10 0000  
                          __ptext11 0000                            __ptext20 0000  
                          __ptext12 0000                            __ptext21 0000  
                          __ptext13 0000                            __ptext30 0000  
                          __ptext22 0000                            __ptext14 0000  
                          __ptext31 0000                            __ptext23 0000  
                          __ptext15 0000                            __ptext32 0000  
                          __ptext24 0000                            __ptext16 0000  
                          __ptext33 0000                            __ptext25 0000  
                          __ptext17 0000                            __ptext26 0000  
                          __ptext18 0000                            __ptext27 0000  
                          __ptext19 0000                            __ptext28 0000  
                          __ptext29 0000                            _kbd_eval 0000  
                 ?i1_LCDWaitNotBusy 0000                  ??i1_LCDWaitNotBusy 0000  
                       ??_gameB_isr 0008                 i1LCDWriteString@str 0005  
                    ??_gameB_redraw 000B                         ??_game_menu 001E  
                          _prev_key 0009                          _LCDPutChar 0000  
                         psrand@res 0003                     ___eecpymem@from 0003  
                   ___eecpymem@size 0004                   psrand@psrand_seed 0004  
                          init_ram0 0004                            intlevel1 0000* 
                LCDWaitNotBusy@busy 0004                         clearstr@str 0003  
                         stringcode 000A      LCDStoreCustom5x8Character@code 000B  
           __end_of_LCDEntryModeSet 0005                          _OPTION_REG 0081  
                  ??i1_LCDPutRS0Cmd 0004                            stringdir 000A  
                          stringtab 0000                         kbd_eval@col 0000  
                       kbd_eval@row 0002                       ___eecpymem@cp 0005  
                     ___eecpymem@to 0006                     _LCDSetCursorPos 0000  
                      ___eetoc@addr 0007                        ___eetoc@data 0008  
                 ?i1_LCDWriteString 0005  
