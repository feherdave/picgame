

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Thu Dec 28 22:27:39 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F627
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37     0000                     
    38                           ; Generated 22/03/2023 GMT
    39                           ; 
    40                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F627 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72     0000                     	;# 
    73     0001                     	;# 
    74     0002                     	;# 
    75     0003                     	;# 
    76     0004                     	;# 
    77     0005                     	;# 
    78     0006                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     000C                     	;# 
    82     000E                     	;# 
    83     000E                     	;# 
    84     000F                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0015                     	;# 
    89     0015                     	;# 
    90     0016                     	;# 
    91     0017                     	;# 
    92     0018                     	;# 
    93     0019                     	;# 
    94     001A                     	;# 
    95     001F                     	;# 
    96     0081                     	;# 
    97     0085                     	;# 
    98     0086                     	;# 
    99     008C                     	;# 
   100     008E                     	;# 
   101     0092                     	;# 
   102     0098                     	;# 
   103     0099                     	;# 
   104     009A                     	;# 
   105     009B                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009F                     	;# 
   109     0000                     	;# 
   110     0001                     	;# 
   111     0002                     	;# 
   112     0003                     	;# 
   113     0004                     	;# 
   114     0005                     	;# 
   115     0006                     	;# 
   116     000A                     	;# 
   117     000B                     	;# 
   118     000C                     	;# 
   119     000E                     	;# 
   120     000E                     	;# 
   121     000F                     	;# 
   122     0010                     	;# 
   123     0011                     	;# 
   124     0012                     	;# 
   125     0015                     	;# 
   126     0015                     	;# 
   127     0016                     	;# 
   128     0017                     	;# 
   129     0018                     	;# 
   130     0019                     	;# 
   131     001A                     	;# 
   132     001F                     	;# 
   133     0081                     	;# 
   134     0085                     	;# 
   135     0086                     	;# 
   136     008C                     	;# 
   137     008E                     	;# 
   138     0092                     	;# 
   139     0098                     	;# 
   140     0099                     	;# 
   141     009A                     	;# 
   142     009B                     	;# 
   143     009C                     	;# 
   144     009D                     	;# 
   145     009F                     	;# 
   146     0000                     	;# 
   147     0001                     	;# 
   148     0002                     	;# 
   149     0003                     	;# 
   150     0004                     	;# 
   151     0005                     	;# 
   152     0006                     	;# 
   153     000A                     	;# 
   154     000B                     	;# 
   155     000C                     	;# 
   156     000E                     	;# 
   157     000E                     	;# 
   158     000F                     	;# 
   159     0010                     	;# 
   160     0011                     	;# 
   161     0012                     	;# 
   162     0015                     	;# 
   163     0015                     	;# 
   164     0016                     	;# 
   165     0017                     	;# 
   166     0018                     	;# 
   167     0019                     	;# 
   168     001A                     	;# 
   169     001F                     	;# 
   170     0081                     	;# 
   171     0085                     	;# 
   172     0086                     	;# 
   173     008C                     	;# 
   174     008E                     	;# 
   175     0092                     	;# 
   176     0098                     	;# 
   177     0099                     	;# 
   178     009A                     	;# 
   179     009B                     	;# 
   180     009C                     	;# 
   181     009D                     	;# 
   182     009F                     	;# 
   183                           
   184                           	psect	idataEEDATA
   185     0000                     __pidataEEDATA:
   186     0000                     _eeprom_cgram_data:	
   187                           ;initializer for _eeprom_cgram_data
   188                           
   189     0000  0007               	db	7
   190     0001  0005               	db	5
   191     0002  000D               	db	13
   192     0003  0009               	db	9
   193     0004  001B               	db	27
   194     0005  001F               	db	31
   195     0006  001D               	db	29
   196     0007  0002               	db	2
   197     0008  001F               	db	31
   198     0009  0015               	db	21
   199     000A  000A               	db	10
   200     000B  0015               	db	21
   201     000C  000A               	db	10
   202     000D  001F               	db	31
   203     000E  0017               	db	23
   204     000F  0008               	db	8
   205     0010  001C               	db	28
   206     0011  000A               	db	10
   207     0012  0019               	db	25
   208     0013  000D               	db	13
   209     0014  001F               	db	31
   210     0015  001F               	db	31
   211     0016  001B               	db	27
   212     0017  0004               	db	4
   213     0018  0000               	db	0
   214     0019  000E               	db	14
   215     001A  001B               	db	27
   216     001B  001F               	db	31
   217     001C  0015               	db	21
   218     001D  0015               	db	21
   219     001E  0015               	db	21
   220     001F  001F               	db	31
   221     0020  0000               	db	0
   222     0021  0004               	db	4
   223     0022  000A               	db	10
   224     0023  0004               	db	4
   225     0024  001F               	db	31
   226     0025  0004               	db	4
   227     0026  000A               	db	10
   228     0027  0011               	db	17
   229     0028  000A               	db	10
   230     0029  0015               	db	21
   231     002A  000A               	db	10
   232     002B  0015               	db	21
   233     002C  000A               	db	10
   234     002D  0004               	db	4
   235     002E  0004               	db	4
   236     002F  0004               	db	4
   237     0030  0004               	db	4
   238     0031  000A               	db	10
   239     0032  0011               	db	17
   240     0033  001F               	db	31
   241     0034  0011               	db	17
   242     0035  0017               	db	23
   243     0036  0015               	db	21
   244     0037  001F               	db	31
   245     0038                     _eeprom_keys:	
   246                           ;initializer for _eeprom_keys
   247                           
   248     0038  0031               	db	49
   249     0039  0032               	db	50
   250     003A  0033               	db	51
   251     003B  0041               	db	65
   252     003C  0034               	db	52
   253     003D  0035               	db	53
   254     003E  0036               	db	54
   255     003F  0042               	db	66
   256     0040  0037               	db	55
   257     0041  0038               	db	56
   258     0042  0039               	db	57
   259     0043  0043               	db	67
   260     0044  002A               	db	42
   261     0045  0030               	db	48
   262     0046  0023               	db	35
   263     0047  0044               	db	68
   264     0048  0000               	db	0
   265     0049                     _tile_set:	
   266                           ;initializer for _tile_set
   267                           
   268     0049  0020               	db	32
   269     004A  0003               	db	3
   270     004B  0003               	db	3
   271     004C  0004               	db	4
   272     004D  0004               	db	4
   273     004E  0005               	db	5
   274     004F  0005               	db	5
   275     0050  0006               	db	6
   276     0005                     _PORTA	set	5
   277     0012                     _T2CON	set	18
   278     0017                     _CCP1CON	set	23
   279     001F                     _CMCON	set	31
   280     0001                     _TMR0	set	1
   281     0011                     _TMR2	set	17
   282     0015                     _CCPR1L	set	21
   283     0006                     _PORTB	set	6
   284     0006                     _PORTBbits	set	6
   285     000B                     _INTCON	set	11
   286     0005                     _PORTAbits	set	5
   287     005A                     _T0IF	set	90
   288     009A                     _EEDATA	set	154
   289     009C                     _EECON1	set	156
   290     009B                     _EEADR	set	155
   291     009C                     _EECON1bits	set	156
   292     0081                     _OPTION_REG	set	129
   293     0086                     _TRISB	set	134
   294     0085                     _TRISA	set	133
   295     008E                     _PCONbits	set	142
   296     0092                     _PR2	set	146
   297                           
   298                           	psect	strings
   299     02D8                     __pstrings:
   300     02D8                     stringtab:
   301     02D8                     __stringtab:
   302                           
   303                           ;	String table - string pointers are 1 byte each
   304     02D8  1BFF               	btfsc	btemp+1,7
   305     02D9  2AE2               	ljmp	stringcode
   306     02DA  1383               	bcf	3,7
   307     02DB  187F               	btfsc	btemp+1,0
   308     02DC  1783               	bsf	3,7
   309     02DD  0800               	movf	0,w
   310     02DE  0A84               	incf	4,f
   311     02DF  1903               	skipnz
   312     02E0  0AFF               	incf	btemp+1,f
   313     02E1  0008               	return
   314     02E2                     stringcode:
   315     02E2                     stringdir:
   316     02E2  3002               	movlw	high stringdir
   317     02E3  008A               	movwf	10
   318     02E4  0804               	movf	4,w
   319     02E5  0A84               	incf	4,f
   320     02E6  0782               	addwf	2,f
   321     02E7                     __stringbase:
   322     02E7  3400               	retlw	0
   323     02E8                     __end_of__stringtab:
   324     02E8                     STR_1:
   325     02E8  3453               	retlw	83	;'S'
   326     02E9  3465               	retlw	101	;'e'
   327     02EA  346C               	retlw	108	;'l'
   328     02EB  3465               	retlw	101	;'e'
   329     02EC  3463               	retlw	99	;'c'
   330     02ED  3474               	retlw	116	;'t'
   331     02EE  3420               	retlw	32	;' '
   332     02EF  3467               	retlw	103	;'g'
   333     02F0  3461               	retlw	97	;'a'
   334     02F1  346D               	retlw	109	;'m'
   335     02F2  3465               	retlw	101	;'e'
   336     02F3  3421               	retlw	33	;'!'
   337     02F4  3400               	retlw	0
   338     02F5  3400               	retlw	0
   339     02F6                     STR_2:
   340     02F6  3441               	retlw	65	;'A'
   341     02F7  3420               	retlw	32	;' '
   342     02F8  342F               	retlw	47	;'/'
   343     02F9  3420               	retlw	32	;' '
   344     02FA  3442               	retlw	66	;'B'
   345     02FB  3400               	retlw	0
   346     02FC  3400               	retlw	0
   347                           
   348                           	psect	cinit
   349     000F                     start_initialization:	
   350                           ; #config settings
   351                           
   352     000F                     __initialization:
   353                           
   354                           ; Clear objects allocated to BANK1
   355     000F  1383               	bcf	3,7	;select IRP bank0
   356     0010  30A0               	movlw	low __pbssBANK1
   357     0011  0084               	movwf	4
   358     0012  30C2               	movlw	low (__pbssBANK1+34)
   359     0013  23DD               	fcall	clear_ram0
   360                           
   361                           ; Clear objects allocated to BANK0
   362     0014  3020               	movlw	low __pbssBANK0
   363     0015  0084               	movwf	4
   364     0016  304D               	movlw	low (__pbssBANK0+45)
   365     0017  23DD               	fcall	clear_ram0
   366                           
   367                           ; Clear objects allocated to COMMON
   368     0018  01FB               	clrf	__pbssCOMMON& (0+127)
   369     0019  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   370     001A  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   371     001B                     end_of_initialization:	
   372                           ;End of C runtime variable initialization code
   373                           
   374     001B                     __end_of__initialization:
   375     001B  0183               	clrf	3
   376     001C  281D               	ljmp	_main	;jump to C main() function
   377                           
   378                           	psect	dataEEDATA
   379     0000                     __pdataEEDATA:
   380                           
   381                           	psect	bssCOMMON
   382     007B                     __pbssCOMMON:
   383     007B                     isr@kbd_skip_t0_cyc:
   384     007B                     	ds	1
   385     007C                     isr@key_col_select:
   386     007C                     	ds	1
   387     007D                     _beep_delay:
   388     007D                     	ds	1
   389                           
   390                           	psect	bssBANK0
   391     0020                     __pbssBANK0:
   392     0020                     _keys:
   393     0020                     	ds	16
   394     0030                     _LCD:
   395     0030                     	ds	2
   396     0032                     rand_tile@psrand_seed:
   397     0032                     	ds	1
   398     0033                     isr@prev_key:
   399     0033                     	ds	1
   400     0034                     _gameB_cnt_ena:
   401     0034                     	ds	1
   402     0035                     _flash_lcd:
   403     0035                     	ds	1
   404     0036                     _gameB_difficulty:
   405     0036                     	ds	1
   406     0037                     _gameB_obstacle_delay:
   407     0037                     	ds	1
   408     0038                     _gameB_truckpos:
   409     0038                     	ds	1
   410     0039                     _gameB_spd_cnt:
   411     0039                     	ds	1
   412     003A                     _gameB_spd:
   413     003A                     	ds	1
   414     003B                     _key:
   415     003B                     	ds	1
   416     003C                     _gameA_line_buf:
   417     003C                     	ds	17
   418                           
   419                           	psect	bssBANK1
   420     00A0                     __pbssBANK1:
   421     00A0                     _gameB_track:
   422     00A0                     	ds	34
   423                           
   424                           	psect	inittext
   425     03A2                     init_fetch0:	
   426                           ;	Called with low address in FSR and high address in W
   427                           
   428     03A2  087E               	movf	126,w
   429     03A3  008A               	movwf	10
   430     03A4  087F               	movf	127,w
   431     03A5  0082               	movwf	2
   432     03A6                     init_ram0:	
   433                           ;Called with:
   434                           ;	high address of idata address in btemp 
   435                           ;	low address of idata address in btemp+1 
   436                           ;	low address of data in FSR
   437                           ;	high address + 1 of data in btemp-1
   438                           
   439     03A6  23A2               	fcall	init_fetch0
   440     03A7  0080               	movwf	0
   441     03A8  0A84               	incf	4,f
   442     03A9  0804               	movf	4,w
   443     03AA  067D               	xorwf	125,w
   444     03AB  1903               	btfsc	3,2
   445     03AC  3400               	retlw	0
   446     03AD  0AFF               	incf	127,f
   447     03AE  1903               	btfsc	3,2
   448     03AF  0AFE               	incf	126,f
   449     03B0  2BA6               	goto	init_ram0
   450                           
   451                           	psect	clrtext
   452     03DD                     clear_ram0:	
   453                           ;	Called with FSR containing the base address, and
   454                           ;	W with the last address+1
   455                           
   456     03DD  0064               	clrwdt	;clear the watchdog before getting into this loop
   457     03DE                     clrloop0:
   458     03DE  0180               	clrf	0	;clear RAM location pointed to by FSR
   459     03DF  0A84               	incf	4,f	;increment pointer
   460     03E0  0604               	xorwf	4,w	;XOR with final address
   461     03E1  1903               	btfsc	3,2	;have we reached the end yet?
   462     03E2  3400               	retlw	0	;all done for this memory range, return
   463     03E3  0604               	xorwf	4,w	;XOR again to restore value
   464     03E4  2BDE               	goto	clrloop0	;do the next byte
   465                           
   466                           	psect	cstackCOMMON
   467     0070                     __pcstackCOMMON:
   468     0070                     ?_init:
   469     0070                     ?_LCD_init:	
   470                           ; 1 bytes @ 0x0
   471                           
   472     0070                     ?_LCD_wrdata:	
   473                           ; 1 bytes @ 0x0
   474                           
   475     0070                     ?_clearstr:	
   476                           ; 1 bytes @ 0x0
   477                           
   478     0070                     ?_LCD_putc:	
   479                           ; 1 bytes @ 0x0
   480                           
   481     0070                     ?_rand_tile:	
   482                           ; 1 bytes @ 0x0
   483                           
   484     0070                     ?_kbd_eval:	
   485                           ; 1 bytes @ 0x0
   486                           
   487     0070                     ?_LCD_waitbf:	
   488                           ; 1 bytes @ 0x0
   489                           
   490     0070                     ?_main:	
   491                           ; 1 bytes @ 0x0
   492                           
   493     0070                     ?_isr:	
   494                           ; 1 bytes @ 0x0
   495                           
   496     0070                     ?_LCD_set_cgram_addr:	
   497                           ; 1 bytes @ 0x0
   498                           
   499     0070                     ?___eetoc:	
   500                           ; 1 bytes @ 0x0
   501                           
   502     0070                     ?i1__beep:	
   503                           ; 1 bytes @ 0x0
   504                           
   505     0070                     kbd_eval@col:	
   506                           ; 1 bytes @ 0x0
   507                           
   508     0070                     i1__beep@CCPR1L_val:	
   509                           ; 1 bytes @ 0x0
   510                           
   511                           
   512                           ; 1 bytes @ 0x0
   513     0070                     	ds	1
   514     0071                     ??_kbd_eval:
   515     0071                     ??i1__beep:	
   516                           ; 1 bytes @ 0x1
   517                           
   518     0071                     kbd_eval@key_ptr:	
   519                           ; 1 bytes @ 0x1
   520                           
   521     0071                     i1__beep@PR2_val:	
   522                           ; 1 bytes @ 0x1
   523                           
   524                           
   525                           ; 1 bytes @ 0x1
   526     0071                     	ds	1
   527     0072                     kbd_eval@row:
   528                           
   529                           ; 1 bytes @ 0x2
   530     0072                     	ds	1
   531     0073                     ??_isr:
   532                           
   533                           ; 1 bytes @ 0x3
   534     0073                     	ds	5
   535     0078                     isr@_col:
   536                           
   537                           ; 1 bytes @ 0x8
   538     0078                     	ds	1
   539     0079                     isr@_row:
   540                           
   541                           ; 1 bytes @ 0x9
   542     0079                     	ds	1
   543     007A                     isr@_key:
   544                           
   545                           ; 1 bytes @ 0xA
   546     007A                     	ds	1
   547                           
   548                           	psect	cstackBANK0
   549     004D                     __pcstackBANK0:
   550     004D                     ??_init:
   551     004D                     ??_clearstr:	
   552                           ; 1 bytes @ 0x0
   553                           
   554     004D                     ?__beep:	
   555                           ; 1 bytes @ 0x0
   556                           
   557     004D                     ??_LCD_waitbf:	
   558                           ; 1 bytes @ 0x0
   559                           
   560     004D                     ?___eecpymem:	
   561                           ; 1 bytes @ 0x0
   562                           
   563     004D                     __beep@CCPR1L_val:	
   564                           ; 1 bytes @ 0x0
   565                           
   566     004D                     clearstr@str:	
   567                           ; 1 bytes @ 0x0
   568                           
   569     004D                     LCD_waitbf@busy:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     004D                     ___eecpymem@from:	
   573                           ; 1 bytes @ 0x0
   574                           
   575                           
   576                           ; 1 bytes @ 0x0
   577     004D                     	ds	1
   578     004E                     ??_LCD_wrdata:
   579     004E                     ??__beep:	
   580                           ; 1 bytes @ 0x1
   581                           
   582     004E                     __beep@PR2_val:	
   583                           ; 1 bytes @ 0x1
   584                           
   585     004E                     ___eecpymem@size:	
   586                           ; 1 bytes @ 0x1
   587                           
   588                           
   589                           ; 1 bytes @ 0x1
   590     004E                     	ds	1
   591     004F                     ??___eecpymem:
   592     004F                     LCD_wrdata@data:	
   593                           ; 1 bytes @ 0x2
   594                           
   595     004F                     ___eecpymem@cp:	
   596                           ; 1 bytes @ 0x2
   597                           
   598                           
   599                           ; 1 bytes @ 0x2
   600     004F                     	ds	1
   601     0050                     ??_LCD_init:
   602     0050                     ?_LCD_gotoxy:	
   603                           ; 1 bytes @ 0x3
   604                           
   605     0050                     ??_LCD_putc:	
   606                           ; 1 bytes @ 0x3
   607                           
   608     0050                     ??_LCD_set_cgram_addr:	
   609                           ; 1 bytes @ 0x3
   610                           
   611     0050                     LCD_set_cgram_addr@addr:	
   612                           ; 1 bytes @ 0x3
   613                           
   614     0050                     LCD_gotoxy@y:	
   615                           ; 1 bytes @ 0x3
   616                           
   617     0050                     LCD_putc@chr:	
   618                           ; 1 bytes @ 0x3
   619                           
   620     0050                     ___eecpymem@to:	
   621                           ; 1 bytes @ 0x3
   622                           
   623                           
   624                           ; 1 bytes @ 0x3
   625     0050                     	ds	1
   626     0051                     ??_LCD_gotoxy:
   627     0051                     ?_LCD_puts:	
   628                           ; 1 bytes @ 0x4
   629                           
   630     0051                     ??___eetoc:	
   631                           ; 1 bytes @ 0x4
   632                           
   633     0051                     ___eetoc@addr:	
   634                           ; 1 bytes @ 0x4
   635                           
   636     0051                     LCD_puts@str:	
   637                           ; 1 bytes @ 0x4
   638                           
   639                           
   640                           ; 2 bytes @ 0x4
   641     0051                     	ds	1
   642     0052                     LCD_gotoxy@x:
   643     0052                     LCD_init@i:	
   644                           ; 1 bytes @ 0x5
   645                           
   646     0052                     ___eetoc@data:	
   647                           ; 1 bytes @ 0x5
   648                           
   649                           
   650                           ; 1 bytes @ 0x5
   651     0052                     	ds	1
   652     0053                     ?_LCD_wr_custom_char:
   653     0053                     ??_LCD_puts:	
   654                           ; 1 bytes @ 0x6
   655                           
   656     0053                     ??_rand_tile:	
   657                           ; 1 bytes @ 0x6
   658                           
   659     0053                     rand_tile@res:	
   660                           ; 1 bytes @ 0x6
   661                           
   662     0053                     LCD_wr_custom_char@dataarr:	
   663                           ; 1 bytes @ 0x6
   664                           
   665                           
   666                           ; 1 bytes @ 0x6
   667     0053                     	ds	1
   668     0054                     ??_LCD_wr_custom_char:
   669                           
   670                           ; 1 bytes @ 0x7
   671     0054                     	ds	1
   672     0055                     LCD_wr_custom_char@code:
   673                           
   674                           ; 1 bytes @ 0x8
   675     0055                     	ds	1
   676     0056                     LCD_wr_custom_char@cnt:
   677                           
   678                           ; 1 bytes @ 0x9
   679     0056                     	ds	1
   680     0057                     ??_main:
   681                           
   682                           ; 1 bytes @ 0xA
   683     0057                     	ds	3
   684     005A                     main@_key:
   685                           
   686                           ; 1 bytes @ 0xD
   687     005A                     	ds	1
   688     005B                     main@xpos:
   689                           
   690                           ; 1 bytes @ 0xE
   691     005B                     	ds	1
   692     005C                     main@hits:
   693                           
   694                           ; 1 bytes @ 0xF
   695     005C                     	ds	1
   696     005D                     main@ypos:
   697                           
   698                           ; 1 bytes @ 0x10
   699     005D                     	ds	1
   700     005E                     main@i:
   701                           
   702                           ; 1 bytes @ 0x11
   703     005E                     	ds	1
   704                           
   705                           	psect	maintext
   706     001D                     __pmaintext:	
   707 ;;
   708 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   709 ;;
   710 ;; *************** function _main *****************
   711 ;; Defined at:
   712 ;;		line 104 in file "main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;  _key            1   13[BANK0 ] unsigned char 
   717 ;;  ypos            1   16[BANK0 ] unsigned char 
   718 ;;  hits            1   15[BANK0 ] struct .
   719 ;;  xpos            1   14[BANK0 ] unsigned char 
   720 ;;  i               1   17[BANK0 ] unsigned char 
   721 ;; Return value:  Size  Location     Type
   722 ;;                  1    wreg      void 
   723 ;; Registers used:
   724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   725 ;; Tracked objects:
   726 ;;		On entry : B00/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   730 ;;      Params:         0       0       0       0
   731 ;;      Locals:         0       5       0       0
   732 ;;      Temps:          0       3       0       0
   733 ;;      Totals:         0       8       0       0
   734 ;;Total ram usage:        8 bytes
   735 ;; Hardware stack levels required when called: 6
   736 ;; This function calls:
   737 ;;		_LCD_gotoxy
   738 ;;		_LCD_init
   739 ;;		_LCD_putc
   740 ;;		_LCD_puts
   741 ;;		_LCD_wr_custom_char
   742 ;;		_LCD_wrdata
   743 ;;		___eetoc
   744 ;;		__beep
   745 ;;		_clearstr
   746 ;;		_init
   747 ;;		_rand_tile
   748 ;; This function is called by:
   749 ;;		Startup code after reset
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753     001D                     _main:	
   754                           ;psect for function _main
   755                           
   756                           
   757                           ;main.c: 107: init();
   758                           
   759                           ;incstack = 0
   760                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   761     001D  237E               	fcall	_init
   762                           
   763                           ;main.c: 109: uint8_t i = 16 - 1;
   764     001E  300F               	movlw	15
   765     001F  00DE               	movwf	main@i
   766     0020                     l1536:
   767                           
   768                           ;main.c: 111: keys[i] = eeprom_keys[i];
   769     0020  085E               	movf	main@i,w
   770     0021  3E38               	addlw	low _eeprom_keys
   771     0022  23D4               	fcall	___eetoc
   772     0023  00FF               	movwf	127
   773     0024  085E               	movf	main@i,w
   774     0025  3E20               	addlw	(low (_keys| 0))& (0+255)
   775     0026  0084               	movwf	4
   776     0027  087F               	movf	127,w
   777     0028  1383               	bcf	3,7	;select IRP bank0
   778     0029  0080               	movwf	0
   779                           
   780                           ;main.c: 112: gameA_line_buf[i] = ' ';
   781     002A  085E               	movf	main@i,w
   782     002B  3E3C               	addlw	(low (_gameA_line_buf| 0))& (0+255)
   783     002C  0084               	movwf	4
   784     002D  3020               	movlw	32
   785     002E  0080               	movwf	0
   786                           
   787                           ;main.c: 113: } while (i--);
   788     002F  3001               	movlw	1
   789     0030  02DE               	subwf	main@i,f
   790     0031  0A5E               	incf	main@i,w
   791     0032  1D03               	btfss	3,2
   792     0033  2820               	goto	l1536
   793                           
   794                           ;main.c: 114: gameA_line_buf[16] = 0;
   795     0034  01CC               	clrf	_gameA_line_buf+16
   796                           
   797                           ;main.c: 117: LCD_init();
   798     0035  222F               	fcall	_LCD_init
   799                           
   800                           ;main.c: 120: LCD_wr_custom_char(0, eeprom_cgram_data[0]);
   801     0036  3000               	movlw	(low _eeprom_cgram_data)& (0+255)
   802     0037  00D3               	movwf	LCD_wr_custom_char@dataarr
   803     0038  3000               	movlw	0
   804     0039  231D               	fcall	_LCD_wr_custom_char
   805                           
   806                           ;main.c: 121: LCD_wr_custom_char(1, eeprom_cgram_data[1]);
   807     003A  3008               	movlw	(low (_eeprom_cgram_data+8))& (0+255)
   808     003B  00D3               	movwf	LCD_wr_custom_char@dataarr
   809     003C  3001               	movlw	1
   810     003D  231D               	fcall	_LCD_wr_custom_char
   811                           
   812                           ;main.c: 122: LCD_wr_custom_char(2, eeprom_cgram_data[2]);
   813     003E  3010               	movlw	(low (_eeprom_cgram_data+16))& (0+255)
   814     003F  00D3               	movwf	LCD_wr_custom_char@dataarr
   815     0040  3002               	movlw	2
   816     0041  231D               	fcall	_LCD_wr_custom_char
   817                           
   818                           ;main.c: 123: LCD_wr_custom_char(3, eeprom_cgram_data[3]);
   819     0042  3018               	movlw	(low (_eeprom_cgram_data+24))& (0+255)
   820     0043  00D3               	movwf	LCD_wr_custom_char@dataarr
   821     0044  3003               	movlw	3
   822     0045  231D               	fcall	_LCD_wr_custom_char
   823                           
   824                           ;main.c: 124: LCD_wr_custom_char(4, eeprom_cgram_data[4]);
   825     0046  3020               	movlw	(low (_eeprom_cgram_data+32))& (0+255)
   826     0047  00D3               	movwf	LCD_wr_custom_char@dataarr
   827     0048  3004               	movlw	4
   828     0049  231D               	fcall	_LCD_wr_custom_char
   829                           
   830                           ;main.c: 125: LCD_wr_custom_char(5, eeprom_cgram_data[5]);
   831     004A  3028               	movlw	(low (_eeprom_cgram_data+40))& (0+255)
   832     004B  00D3               	movwf	LCD_wr_custom_char@dataarr
   833     004C  3005               	movlw	5
   834     004D  231D               	fcall	_LCD_wr_custom_char
   835                           
   836                           ;main.c: 126: LCD_wr_custom_char(6, eeprom_cgram_data[6]);
   837     004E  3030               	movlw	(low (_eeprom_cgram_data+48))& (0+255)
   838     004F  00D3               	movwf	LCD_wr_custom_char@dataarr
   839     0050  3006               	movlw	6
   840     0051  231D               	fcall	_LCD_wr_custom_char
   841                           
   842                           ;main.c: 128: LCD.DisplayControl |= 0b00000100;
   843     0052  1531               	bsf	_LCD+1,2
   844                           
   845                           ;main.c: 129: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.DisplayControl);;
   846     0053  1205               	bcf	5,4	;volatile
   847     0054  0831               	movf	_LCD+1,w
   848     0055  227F               	fcall	_LCD_wrdata
   849                           
   850                           ;main.c: 132: INTCON = 0b10100000;
   851     0056  30A0               	movlw	160
   852     0057  008B               	movwf	11	;volatile
   853     0058                     l1568:
   854                           
   855                           ;main.c: 138: LCD_gotoxy(0, 0);
   856     0058  1283               	bcf	3,5	;RP0=0, select bank0
   857     0059  1303               	bcf	3,6	;RP1=0, select bank0
   858     005A  01D0               	clrf	LCD_gotoxy@y
   859     005B  3000               	movlw	0
   860     005C  23B1               	fcall	_LCD_gotoxy
   861                           
   862                           ;main.c: 139: LCD_puts("Select game!\0");
   863     005D  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   864     005E  00D1               	movwf	LCD_puts@str
   865     005F  3080               	movlw	128
   866     0060  00D2               	movwf	LCD_puts@str+1
   867     0061  2369               	fcall	_LCD_puts
   868                           
   869                           ;main.c: 140: LCD_gotoxy(0, 1);
   870     0062  01D0               	clrf	LCD_gotoxy@y
   871     0063  0AD0               	incf	LCD_gotoxy@y,f
   872     0064  3000               	movlw	0
   873     0065  23B1               	fcall	_LCD_gotoxy
   874                           
   875                           ;main.c: 141: LCD_puts("A / B\0");
   876     0066  300F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   877     0067  00D1               	movwf	LCD_puts@str
   878     0068  3080               	movlw	128
   879     0069  00D2               	movwf	LCD_puts@str+1
   880     006A  2369               	fcall	_LCD_puts
   881     006B                     l1576:
   882                           
   883                           ;main.c: 145: key = '\0'; while (!key) { };
   884     006B  01BB               	clrf	_key
   885     006C                     l1578:
   886     006C  083B               	movf	_key,w
   887     006D  1D03               	btfss	3,2
   888     006E  29B1               	goto	l1730
   889     006F  286C               	goto	l1578
   890     0070                     l101:	
   891                           ;main.c: 147: case 'A':
   892                           
   893                           
   894                           ;main.c: 151: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00000001);; _delay((unsigned lon
      +                          g)((50)*(4000000/4000.0)));;
   895     0070  1205               	bcf	5,4	;volatile
   896     0071  3001               	movlw	1
   897     0072  227F               	fcall	_LCD_wrdata
   898     0073  3041               	movlw	65
   899     0074  1283               	bcf	3,5	;RP0=0, select bank0
   900     0075  1303               	bcf	3,6	;RP1=0, select bank0
   901     0076  00D8               	movwf	??_main+1
   902     0077  30EE               	movlw	238
   903     0078  00D7               	movwf	??_main
   904     0079                     u877:
   905     0079  0BD7               	decfsz	??_main,f
   906     007A  2879               	goto	u877
   907     007B  0BD8               	decfsz	??_main+1,f
   908     007C  2879               	goto	u877
   909                           
   910                           ;main.c: 152: LCD.DisplayControl |= 0b00000001;
   911     007D  1283               	bcf	3,5	;RP0=0, select bank0
   912     007E  1303               	bcf	3,6	;RP1=0, select bank0
   913     007F  1431               	bsf	_LCD+1,0
   914                           
   915                           ;main.c: 153: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.DisplayControl);;
   916     0080  1205               	bcf	5,4	;volatile
   917     0081  0831               	movf	_LCD+1,w
   918     0082  227F               	fcall	_LCD_wrdata
   919                           
   920                           ;main.c: 155: uint8_t xpos = 0, ypos = 0;
   921     0083  01DB               	clrf	main@xpos
   922     0084  01DD               	clrf	main@ypos
   923     0085                     l1594:
   924                           
   925                           ;main.c: 158: key = '\0'; while (!key) { };
   926     0085  01BB               	clrf	_key
   927     0086                     l1596:
   928     0086  083B               	movf	_key,w
   929     0087  1D03               	btfss	3,2
   930     0088  28CC               	goto	l1628
   931     0089  2886               	goto	l1596
   932     008A                     l1598:
   933                           
   934                           ;main.c: 162: clearstr(gameA_line_buf);
   935     008A  303C               	movlw	(low (_gameA_line_buf| 0))& (0+255)
   936     008B  2392               	fcall	_clearstr
   937                           
   938                           ;main.c: 164: goto back_to_main;
   939     008C  29B9               	goto	l1732
   940     008D                     l1600:
   941                           
   942                           ;main.c: 167: xpos = 0;
   943     008D  01DB               	clrf	main@xpos
   944                           
   945                           ;main.c: 168: if (!ypos) {
   946     008E  085D               	movf	main@ypos,w
   947     008F  1D03               	btfss	3,2
   948     0090  289A               	goto	l110
   949                           
   950                           ;main.c: 169: LCD_gotoxy(0, ++ypos);
   951     0091  3001               	movlw	1
   952     0092  00FF               	movwf	127
   953     0093  087F               	movf	127,w
   954     0094  07DD               	addwf	main@ypos,f
   955     0095  085D               	movf	main@ypos,w
   956     0096  00D0               	movwf	LCD_gotoxy@y
   957     0097  3000               	movlw	0
   958     0098  23B1               	fcall	_LCD_gotoxy
   959                           
   960                           ;main.c: 170: } else {
   961     0099  2885               	goto	l1594
   962     009A                     l110:
   963                           
   964                           ;main.c: 171: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00000001);; _delay((unsigned lon
      +                          g)((50)*(4000000/4000.0)));;
   965     009A  1205               	bcf	5,4	;volatile
   966     009B  3001               	movlw	1
   967     009C  227F               	fcall	_LCD_wrdata
   968     009D  3041               	movlw	65
   969     009E  1283               	bcf	3,5	;RP0=0, select bank0
   970     009F  1303               	bcf	3,6	;RP1=0, select bank0
   971     00A0  00D8               	movwf	??_main+1
   972     00A1  30EE               	movlw	238
   973     00A2  00D7               	movwf	??_main
   974     00A3                     u887:
   975     00A3  0BD7               	decfsz	??_main,f
   976     00A4  28A3               	goto	u887
   977     00A5  0BD8               	decfsz	??_main+1,f
   978     00A6  28A3               	goto	u887
   979                           
   980                           ;main.c: 173: LCD_gotoxy(0, 0);
   981     00A7  1283               	bcf	3,5	;RP0=0, select bank0
   982     00A8  1303               	bcf	3,6	;RP1=0, select bank0
   983     00A9  01D0               	clrf	LCD_gotoxy@y
   984     00AA  3000               	movlw	0
   985     00AB  23B1               	fcall	_LCD_gotoxy
   986                           
   987                           ;main.c: 174: LCD_puts(gameA_line_buf);
   988     00AC  303C               	movlw	(low (_gameA_line_buf| 0))& (0+255)
   989     00AD  00D1               	movwf	LCD_puts@str
   990     00AE  3000               	movlw	0
   991     00AF  00D2               	movwf	LCD_puts@str+1
   992     00B0  2369               	fcall	_LCD_puts
   993                           
   994                           ;main.c: 175: LCD_gotoxy(0, 1);
   995     00B1  01D0               	clrf	LCD_gotoxy@y
   996     00B2  0AD0               	incf	LCD_gotoxy@y,f
   997     00B3  3000               	movlw	0
   998     00B4  23B1               	fcall	_LCD_gotoxy
   999                           
  1000                           ;main.c: 177: clearstr(gameA_line_buf);
  1001     00B5  303C               	movlw	(low (_gameA_line_buf| 0))& (0+255)
  1002     00B6  2392               	fcall	_clearstr
  1003     00B7  2885               	goto	l1594
  1004     00B8                     l1618:
  1005                           
  1006                           ;main.c: 181: if (xpos < (16 - 1)) {
  1007     00B8  300F               	movlw	15
  1008     00B9  025B               	subwf	main@xpos,w
  1009     00BA  1803               	skipnc
  1010     00BB  2885               	goto	l1594
  1011                           
  1012                           ;main.c: 182: LCD_putc(key);
  1013     00BC  083B               	movf	_key,w
  1014     00BD  23EB               	fcall	_LCD_putc
  1015                           
  1016                           ;main.c: 184: if (ypos) {
  1017     00BE  085D               	movf	main@ypos,w
  1018     00BF  1903               	btfsc	3,2
  1019     00C0  28C7               	goto	l1626
  1020                           
  1021                           ;main.c: 185: gameA_line_buf[xpos] = key;
  1022     00C1  085B               	movf	main@xpos,w
  1023     00C2  3E3C               	addlw	(low (_gameA_line_buf| 0))& (0+255)
  1024     00C3  0084               	movwf	4
  1025     00C4  083B               	movf	_key,w
  1026     00C5  1383               	bcf	3,7	;select IRP bank0
  1027     00C6  0080               	movwf	0
  1028     00C7                     l1626:
  1029                           
  1030                           ;main.c: 186: };main.c: 188: xpos++;
  1031     00C7  3001               	movlw	1
  1032     00C8  00FF               	movwf	127
  1033     00C9  087F               	movf	127,w
  1034     00CA  07DB               	addwf	main@xpos,f
  1035     00CB  2885               	goto	l1594
  1036     00CC                     l1628:
  1037     00CC  083B               	movf	_key,w
  1038                           
  1039                           ; Switch size 1, requested type "simple"
  1040                           ; Number of cases is 2, Range of values is 35 to 42
  1041                           ; switch strategies available:
  1042                           ; Name         Instructions Cycles
  1043                           ; simple_byte            7     4 (average)
  1044                           ; direct_byte           17     9 (fixed)
  1045                           ; jumptable            263     9 (fixed)
  1046                           ;	Chosen strategy is simple_byte
  1047     00CD  3A23               	xorlw	35	; case 35
  1048     00CE  1903               	skipnz
  1049     00CF  288D               	goto	l1600
  1050     00D0  3A09               	xorlw	9	; case 42
  1051     00D1  1903               	skipnz
  1052     00D2  288A               	goto	l1598
  1053     00D3  28B8               	goto	l1618
  1054     00D4                     l1630:
  1055                           
  1056                           ;main.c: 197: key = '\0';
  1057     00D4  01BB               	clrf	_key
  1058                           
  1059                           ;main.c: 199: i = 16 - 1;
  1060     00D5  300F               	movlw	15
  1061     00D6  00DE               	movwf	main@i
  1062     00D7                     l1634:
  1063                           
  1064                           ;main.c: 201: gameB_track[0][i] = ' ';
  1065     00D7  085E               	movf	main@i,w
  1066     00D8  3EA0               	addlw	(low (_gameB_track| 0))& (0+255)
  1067     00D9  0084               	movwf	4
  1068     00DA  3020               	movlw	32
  1069     00DB  1383               	bcf	3,7	;select IRP bank1
  1070     00DC  0080               	movwf	0
  1071                           
  1072                           ;main.c: 202: gameB_track[1][i] = ' ';
  1073     00DD  085E               	movf	main@i,w
  1074     00DE  3EB1               	addlw	(low ((_gameB_track| 0+17)))& (0+255)
  1075     00DF  0084               	movwf	4
  1076     00E0  3020               	movlw	32
  1077     00E1  0080               	movwf	0
  1078                           
  1079                           ;main.c: 203: } while (i--);
  1080     00E2  3001               	movlw	1
  1081     00E3  02DE               	subwf	main@i,f
  1082     00E4  0A5E               	incf	main@i,w
  1083     00E5  1D03               	btfss	3,2
  1084     00E6  28D7               	goto	l1634
  1085                           
  1086                           ;main.c: 205: gameB_track[0][16] = '\0';
  1087     00E7  1683               	bsf	3,5	;RP0=1, select bank1
  1088     00E8  01B0               	clrf	(_gameB_track^(0+128)+16)
  1089                           
  1090                           ;main.c: 206: gameB_track[1][16] = '\0';
  1091     00E9  01C1               	clrf	(_gameB_track^(0+128)+33)
  1092                           
  1093                           ;main.c: 208: gameB_spd = 40;
  1094     00EA  3028               	movlw	40
  1095     00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1096     00EC  00BA               	movwf	_gameB_spd
  1097                           
  1098                           ;main.c: 209: gameB_difficulty = 14;
  1099     00ED  300E               	movlw	14
  1100     00EE  00B6               	movwf	_gameB_difficulty
  1101                           
  1102                           ;main.c: 211: union {;main.c: 212: struct {;main.c: 213: unsigned trashbin: 1;;main.c: 2
      +                          14: unsigned obstacle: 1;;main.c: 215: };;main.c: 216: uint8_t bval;;main.c: 217: } hits
      +                          ;;main.c: 219: gameB_cnt_ena = 1;
  1103     00EF  01B4               	clrf	_gameB_cnt_ena
  1104     00F0  0AB4               	incf	_gameB_cnt_ena,f
  1105     00F1                     l123:	
  1106                           ;main.c: 224: redraw:
  1107                           
  1108                           
  1109                           ;main.c: 227: hits.bval = 0;
  1110     00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1111     00F2  01DC               	clrf	main@hits
  1112                           
  1113                           ;main.c: 228: i = 2;
  1114     00F3  3002               	movlw	2
  1115     00F4  00DE               	movwf	main@i
  1116     00F5  2908               	goto	l1650
  1117     00F6                     l128:	
  1118                           ;main.c: 233: case 3:
  1119                           
  1120                           
  1121                           ;main.c: 234: hits.trashbin = 1;
  1122     00F6  145C               	bsf	main@hits,0
  1123                           
  1124                           ;main.c: 235: break;
  1125     00F7  28F9               	goto	l1652
  1126     00F8                     l129:	
  1127                           ;main.c: 236: default:
  1128                           
  1129                           
  1130                           ;main.c: 237: hits.obstacle = 1;
  1131     00F8  14DC               	bsf	main@hits,1
  1132     00F9                     l1652:	
  1133                           ;main.c: 238: }
  1134                           
  1135                           
  1136                           ;main.c: 240: gameB_track[gameB_truckpos][i] = ' ';
  1137     00F9  0E38               	swapf	_gameB_truckpos,w
  1138     00FA  39F0               	andlw	240
  1139     00FB  0738               	addwf	_gameB_truckpos,w
  1140     00FC  3EA0               	addlw	(low (_gameB_track| 0))& (0+255)
  1141     00FD  075E               	addwf	main@i,w
  1142     00FE  00D7               	movwf	??_main
  1143     00FF  0857               	movf	??_main,w
  1144     0100  0084               	movwf	4
  1145     0101  3020               	movlw	32
  1146     0102  0080               	movwf	0
  1147                           
  1148                           ;main.c: 241: } while (i--);
  1149     0103  3001               	movlw	1
  1150     0104  02DE               	subwf	main@i,f
  1151     0105  0A5E               	incf	main@i,w
  1152     0106  1903               	btfsc	3,2
  1153     0107  291A               	goto	l130
  1154     0108                     l1650:
  1155     0108  0E38               	swapf	_gameB_truckpos,w
  1156     0109  39F0               	andlw	240
  1157     010A  0738               	addwf	_gameB_truckpos,w
  1158     010B  3EA0               	addlw	(low (_gameB_track| 0))& (0+255)
  1159     010C  075E               	addwf	main@i,w
  1160     010D  00D7               	movwf	??_main
  1161     010E  0857               	movf	??_main,w
  1162     010F  0084               	movwf	4
  1163     0110  1383               	bcf	3,7	;select IRP bank1
  1164     0111  0800               	movf	0,w
  1165                           
  1166                           ; Switch size 1, requested type "simple"
  1167                           ; Number of cases is 2, Range of values is 3 to 32
  1168                           ; switch strategies available:
  1169                           ; Name         Instructions Cycles
  1170                           ; simple_byte            7     4 (average)
  1171                           ; direct_byte           39     9 (fixed)
  1172                           ; jumptable            263     9 (fixed)
  1173                           ;	Chosen strategy is simple_byte
  1174     0112  3A03               	xorlw	3	; case 3
  1175     0113  1903               	skipnz
  1176     0114  28F6               	goto	l128
  1177     0115  3A23               	xorlw	35	; case 32
  1178     0116  1903               	skipnz
  1179     0117  28F9               	goto	l1652
  1180     0118  28F8               	goto	l129
  1181     0119  28F9               	goto	l1652
  1182     011A                     l130:
  1183                           
  1184                           ;main.c: 243: if (hits.obstacle) {
  1185     011A  1CDC               	btfss	main@hits,1
  1186     011B  2941               	goto	l131
  1187                           
  1188                           ;main.c: 246: _beep(240, 120);
  1189     011C  3078               	movlw	120
  1190     011D  00CD               	movwf	__beep@CCPR1L_val
  1191     011E  30F0               	movlw	240
  1192     011F  23C0               	fcall	__beep
  1193                           
  1194                           ;main.c: 247: flash_lcd = 1;
  1195     0120  01B5               	clrf	_flash_lcd
  1196     0121  0AB5               	incf	_flash_lcd,f
  1197                           
  1198                           ;main.c: 248: gameB_cnt_ena = 0;
  1199     0122  01B4               	clrf	_gameB_cnt_ena
  1200                           
  1201                           ;main.c: 249: _delay((unsigned long)((800)*(4000000/4000.0)));
  1202     0123  3005               	movlw	5
  1203     0124  1283               	bcf	3,5	;RP0=0, select bank0
  1204     0125  1303               	bcf	3,6	;RP1=0, select bank0
  1205     0126  00D9               	movwf	??_main+2
  1206     0127  300F               	movlw	15
  1207     0128  00D8               	movwf	??_main+1
  1208     0129  30F0               	movlw	240
  1209     012A  00D7               	movwf	??_main
  1210     012B                     u897:
  1211     012B  0BD7               	decfsz	??_main,f
  1212     012C  292B               	goto	u897
  1213     012D  0BD8               	decfsz	??_main+1,f
  1214     012E  292B               	goto	u897
  1215     012F  0BD9               	decfsz	??_main+2,f
  1216     0130  292B               	goto	u897
  1217     0131  2932               	nop2
  1218                           
  1219                           ;main.c: 250: gameB_cnt_ena = 1;
  1220     0132  1283               	bcf	3,5	;RP0=0, select bank0
  1221     0133  1303               	bcf	3,6	;RP1=0, select bank0
  1222     0134  01B4               	clrf	_gameB_cnt_ena
  1223     0135  0AB4               	incf	_gameB_cnt_ena,f
  1224                           
  1225                           ;main.c: 251: flash_lcd = 0;
  1226     0136  01B5               	clrf	_flash_lcd
  1227                           
  1228                           ;main.c: 252: PORTBbits.RB2 = 1;
  1229     0137  1506               	bsf	6,2	;volatile
  1230                           
  1231                           ;main.c: 253: if (gameB_spd < 40) gameB_spd++;
  1232     0138  3028               	movlw	40
  1233     0139  023A               	subwf	_gameB_spd,w
  1234     013A  1803               	skipnc
  1235     013B  2955               	goto	l1684
  1236     013C  3001               	movlw	1
  1237     013D  00FF               	movwf	127
  1238     013E  087F               	movf	127,w
  1239     013F  07BA               	addwf	_gameB_spd,f
  1240     0140  2955               	goto	l1684
  1241     0141                     l131:
  1242     0141  1C5C               	btfss	main@hits,0
  1243     0142  2955               	goto	l1684
  1244                           
  1245                           ;main.c: 255: _beep(60, 30);
  1246     0143  301E               	movlw	30
  1247     0144  00CD               	movwf	__beep@CCPR1L_val
  1248     0145  303C               	movlw	60
  1249     0146  23C0               	fcall	__beep
  1250                           
  1251                           ;main.c: 256: gameB_difficulty -= 2;
  1252     0147  3002               	movlw	2
  1253     0148  02B6               	subwf	_gameB_difficulty,f
  1254                           
  1255                           ;main.c: 257: if (gameB_difficulty == 6) {
  1256     0149  3006               	movlw	6
  1257     014A  0636               	xorwf	_gameB_difficulty,w
  1258     014B  1D03               	btfss	3,2
  1259     014C  2955               	goto	l1684
  1260                           
  1261                           ;main.c: 258: gameB_difficulty = 14;
  1262     014D  300E               	movlw	14
  1263     014E  00B6               	movwf	_gameB_difficulty
  1264                           
  1265                           ;main.c: 259: if (gameB_spd > 20) gameB_spd--;
  1266     014F  3015               	movlw	21
  1267     0150  023A               	subwf	_gameB_spd,w
  1268     0151  1C03               	skipc
  1269     0152  2955               	goto	l1684
  1270     0153  3001               	movlw	1
  1271     0154  02BA               	subwf	_gameB_spd,f
  1272     0155                     l1684:
  1273                           
  1274                           ;main.c: 260: };main.c: 261: };main.c: 264: LCD_gotoxy(0, 0);
  1275     0155  01D0               	clrf	LCD_gotoxy@y
  1276     0156  3000               	movlw	0
  1277     0157  23B1               	fcall	_LCD_gotoxy
  1278                           
  1279                           ;main.c: 265: LCD_puts(gameB_track[0]);
  1280     0158  30A0               	movlw	(low (_gameB_track| 0))& (0+255)
  1281     0159  00D1               	movwf	LCD_puts@str
  1282     015A  3000               	movlw	0
  1283     015B  00D2               	movwf	LCD_puts@str+1
  1284     015C  2369               	fcall	_LCD_puts
  1285                           
  1286                           ;main.c: 266: LCD_gotoxy(0, 1);
  1287     015D  01D0               	clrf	LCD_gotoxy@y
  1288     015E  0AD0               	incf	LCD_gotoxy@y,f
  1289     015F  3000               	movlw	0
  1290     0160  23B1               	fcall	_LCD_gotoxy
  1291                           
  1292                           ;main.c: 267: LCD_puts(gameB_track[1]);
  1293     0161  30B1               	movlw	(low ((_gameB_track| 0+17)))& (0+255)
  1294     0162  00D1               	movwf	LCD_puts@str
  1295     0163  3000               	movlw	0
  1296     0164  00D2               	movwf	LCD_puts@str+1
  1297     0165  2369               	fcall	_LCD_puts
  1298                           
  1299                           ;main.c: 269: LCD_gotoxy(0, gameB_truckpos);
  1300     0166  0838               	movf	_gameB_truckpos,w
  1301     0167  00D0               	movwf	LCD_gotoxy@y
  1302     0168  3000               	movlw	0
  1303     0169  23B1               	fcall	_LCD_gotoxy
  1304                           
  1305                           ;main.c: 270: LCD_putc(0);
  1306     016A  3000               	movlw	0
  1307     016B  23EB               	fcall	_LCD_putc
  1308                           
  1309                           ;main.c: 271: LCD_putc(1);
  1310     016C  3001               	movlw	1
  1311     016D  23EB               	fcall	_LCD_putc
  1312                           
  1313                           ;main.c: 272: LCD_putc(2);
  1314     016E  3002               	movlw	2
  1315     016F  23EB               	fcall	_LCD_putc
  1316     0170                     l137:	
  1317                           ;main.c: 274: do {
  1318                           
  1319                           
  1320                           ;main.c: 275: if (key) {
  1321     0170  083B               	movf	_key,w
  1322     0171  1903               	btfsc	3,2
  1323     0172  2987               	goto	l1710
  1324                           
  1325                           ;main.c: 276: uint8_t _key = key;
  1326     0173  083B               	movf	_key,w
  1327     0174  00DA               	movwf	main@_key
  1328                           
  1329                           ;main.c: 277: key = '\0';
  1330     0175  01BB               	clrf	_key
  1331                           
  1332                           ;main.c: 279: switch(_key) {
  1333     0176  297C               	goto	l1708
  1334     0177                     l1704:
  1335                           
  1336                           ;main.c: 284: gameB_truckpos = 0;
  1337     0177  01B8               	clrf	_gameB_truckpos
  1338                           
  1339                           ;main.c: 285: goto redraw;
  1340     0178  28F1               	goto	l123
  1341     0179                     l142:	
  1342                           ;main.c: 287: case 'B':
  1343                           
  1344                           
  1345                           ;main.c: 288: gameB_truckpos = 1;
  1346     0179  01B8               	clrf	_gameB_truckpos
  1347     017A  0AB8               	incf	_gameB_truckpos,f
  1348                           
  1349                           ;main.c: 289: goto redraw;
  1350     017B  28F1               	goto	l123
  1351     017C                     l1708:
  1352     017C  085A               	movf	main@_key,w
  1353                           
  1354                           ; Switch size 1, requested type "simple"
  1355                           ; Number of cases is 3, Range of values is 42 to 66
  1356                           ; switch strategies available:
  1357                           ; Name         Instructions Cycles
  1358                           ; simple_byte           10     6 (average)
  1359                           ; direct_byte           34     9 (fixed)
  1360                           ; jumptable            263     9 (fixed)
  1361                           ;	Chosen strategy is simple_byte
  1362     017D  3A2A               	xorlw	42	; case 42
  1363     017E  1903               	skipnz
  1364     017F  29B9               	goto	l1732
  1365     0180  3A6B               	xorlw	107	; case 65
  1366     0181  1903               	skipnz
  1367     0182  2977               	goto	l1704
  1368     0183  3A03               	xorlw	3	; case 66
  1369     0184  1903               	skipnz
  1370     0185  2979               	goto	l142
  1371     0186  2987               	goto	l1710
  1372     0187                     l1710:
  1373                           
  1374                           ;main.c: 291: };main.c: 292: } while (gameB_spd_cnt);
  1375     0187  0839               	movf	_gameB_spd_cnt,w
  1376     0188  1D03               	btfss	3,2
  1377     0189  2970               	goto	l137
  1378                           
  1379                           ;main.c: 294: gameB_spd_cnt = gameB_spd;
  1380     018A  083A               	movf	_gameB_spd,w
  1381     018B  00B9               	movwf	_gameB_spd_cnt
  1382                           
  1383                           ;main.c: 297: for (i = 0; i < 15; i++) {
  1384     018C  01DE               	clrf	main@i
  1385     018D                     l1720:
  1386                           
  1387                           ;main.c: 298: gameB_track[0][i] = gameB_track[0][i + 1];
  1388     018D  085E               	movf	main@i,w
  1389     018E  3EA1               	addlw	(low ((_gameB_track| 0+1)))& (0+255)
  1390     018F  0084               	movwf	4
  1391     0190  1383               	bcf	3,7	;select IRP bank1
  1392     0191  0800               	movf	0,w
  1393     0192  00FF               	movwf	127
  1394     0193  085E               	movf	main@i,w
  1395     0194  3EA0               	addlw	(low (_gameB_track| 0))& (0+255)
  1396     0195  0084               	movwf	4
  1397     0196  087F               	movf	127,w
  1398     0197  0080               	movwf	0
  1399                           
  1400                           ;main.c: 299: gameB_track[1][i] = gameB_track[1][i + 1];
  1401     0198  085E               	movf	main@i,w
  1402     0199  3EB2               	addlw	(low ((_gameB_track| 0+18)))& (0+255)
  1403     019A  0084               	movwf	4
  1404     019B  0800               	movf	0,w
  1405     019C  00FF               	movwf	127
  1406     019D  085E               	movf	main@i,w
  1407     019E  3EB1               	addlw	(low ((_gameB_track| 0+17)))& (0+255)
  1408     019F  0084               	movwf	4
  1409     01A0  087F               	movf	127,w
  1410     01A1  0080               	movwf	0
  1411     01A2  3001               	movlw	1
  1412     01A3  00FF               	movwf	127
  1413     01A4  087F               	movf	127,w
  1414     01A5  07DE               	addwf	main@i,f
  1415     01A6  300F               	movlw	15
  1416     01A7  025E               	subwf	main@i,w
  1417     01A8  1C03               	skipc
  1418     01A9  298D               	goto	l1720
  1419                           
  1420                           ;main.c: 300: };main.c: 303: gameB_track[0][15] = rand_tile();
  1421     01AA  2338               	fcall	_rand_tile
  1422     01AB  1683               	bsf	3,5	;RP0=1, select bank1
  1423     01AC  00AF               	movwf	(_gameB_track^(0+128)+15)
  1424                           
  1425                           ;main.c: 304: gameB_track[1][15] = rand_tile();
  1426     01AD  2338               	fcall	_rand_tile
  1427     01AE  1683               	bsf	3,5	;RP0=1, select bank1
  1428     01AF  00C0               	movwf	(_gameB_track^(0+128)+32)
  1429     01B0  28F1               	goto	l123
  1430     01B1                     l1730:
  1431     01B1  083B               	movf	_key,w
  1432                           
  1433                           ; Switch size 1, requested type "simple"
  1434                           ; Number of cases is 2, Range of values is 65 to 66
  1435                           ; switch strategies available:
  1436                           ; Name         Instructions Cycles
  1437                           ; simple_byte            7     4 (average)
  1438                           ; direct_byte           11     9 (fixed)
  1439                           ; jumptable            263     9 (fixed)
  1440                           ;	Chosen strategy is simple_byte
  1441     01B2  3A41               	xorlw	65	; case 65
  1442     01B3  1903               	skipnz
  1443     01B4  2870               	goto	l101
  1444     01B5  3A03               	xorlw	3	; case 66
  1445     01B6  1903               	skipnz
  1446     01B7  28D4               	goto	l1630
  1447     01B8  286B               	goto	l1576
  1448     01B9                     l1732:
  1449                           
  1450                           ;main.c: 316: LCD.DisplayControl &= 0b11111101 & 0b11111110;
  1451     01B9  30FC               	movlw	252
  1452     01BA  00FF               	movwf	127
  1453     01BB  087F               	movf	127,w
  1454     01BC  05B1               	andwf	_LCD+1,f
  1455                           
  1456                           ;main.c: 317: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.DisplayControl);;
  1457     01BD  1205               	bcf	5,4	;volatile
  1458     01BE  0831               	movf	_LCD+1,w
  1459     01BF  227F               	fcall	_LCD_wrdata
  1460                           
  1461                           ;main.c: 319: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00000001);; _delay((unsigned lon
      +                          g)((50)*(4000000/4000.0)));;
  1462     01C0  1205               	bcf	5,4	;volatile
  1463     01C1  3001               	movlw	1
  1464     01C2  227F               	fcall	_LCD_wrdata
  1465     01C3  3041               	movlw	65
  1466     01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1467     01C5  1303               	bcf	3,6	;RP1=0, select bank0
  1468     01C6  00D8               	movwf	??_main+1
  1469     01C7  30EE               	movlw	238
  1470     01C8  00D7               	movwf	??_main
  1471     01C9                     u907:
  1472     01C9  0BD7               	decfsz	??_main,f
  1473     01CA  29C9               	goto	u907
  1474     01CB  0BD8               	decfsz	??_main+1,f
  1475     01CC  29C9               	goto	u907
  1476     01CD  2858               	goto	l1568
  1477     01CE                     __end_of_main:
  1478                           
  1479                           	psect	text1
  1480     0338                     __ptext1:	
  1481 ;; *************** function _rand_tile *****************
  1482 ;; Defined at:
  1483 ;;		line 413 in file "main.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;		None
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;  res             1    6[BANK0 ] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      unsigned char 
  1490 ;; Registers used:
  1491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : 200/0
  1494 ;;		On exit  : 300/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1497 ;;      Params:         0       0       0       0
  1498 ;;      Locals:         0       1       0       0
  1499 ;;      Temps:          0       0       0       0
  1500 ;;      Totals:         0       1       0       0
  1501 ;;Total ram usage:        1 bytes
  1502 ;; Hardware stack levels used: 1
  1503 ;; Hardware stack levels required when called: 4
  1504 ;; This function calls:
  1505 ;;		___eetoc
  1506 ;; This function is called by:
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511     0338                     _rand_tile:	
  1512                           ;psect for function _rand_tile
  1513                           
  1514                           
  1515                           ;main.c: 415: static uint8_t psrand_seed;;main.c: 416: uint8_t res = (TMR0 ^ TMR2 + psra
      +                          nd_seed) & 0x07;
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in _rand_tile: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1519     0338  1283               	bcf	3,5	;RP0=0, select bank0
  1520     0339  0832               	movf	rand_tile@psrand_seed,w
  1521     033A  0711               	addwf	17,w	;volatile
  1522     033B  0601               	xorwf	1,w	;volatile
  1523     033C  3907               	andlw	7
  1524     033D  00D3               	movwf	rand_tile@res
  1525                           
  1526                           ;main.c: 418: psrand_seed = res;
  1527     033E  0853               	movf	rand_tile@res,w
  1528     033F  00B2               	movwf	rand_tile@psrand_seed
  1529                           
  1530                           ;main.c: 420: if (gameB_obstacle_delay) {
  1531     0340  0837               	movf	_gameB_obstacle_delay,w
  1532     0341  1903               	btfsc	3,2
  1533     0342  2B47               	goto	l1506
  1534                           
  1535                           ;main.c: 421: gameB_obstacle_delay--;
  1536     0343  3001               	movlw	1
  1537     0344  02B7               	subwf	_gameB_obstacle_delay,f
  1538                           
  1539                           ;main.c: 422: return ' ';
  1540     0345  3020               	movlw	32
  1541     0346  0008               	return
  1542     0347                     l1506:
  1543                           
  1544                           ;main.c: 423: };main.c: 425: if (res > 2) {
  1545     0347  3003               	movlw	3
  1546     0348  0253               	subwf	rand_tile@res,w
  1547     0349  1C03               	skipc
  1548     034A  2B4D               	goto	l1510
  1549                           
  1550                           ;main.c: 426: gameB_obstacle_delay = gameB_difficulty;
  1551     034B  0836               	movf	_gameB_difficulty,w
  1552     034C  00B7               	movwf	_gameB_obstacle_delay
  1553     034D                     l1510:
  1554                           
  1555                           ;main.c: 427: };main.c: 429: return tile_set[res];
  1556     034D  0853               	movf	rand_tile@res,w
  1557     034E  3E49               	addlw	low _tile_set
  1558     034F  23D4               	fcall	___eetoc
  1559     0350  0008               	return
  1560     0351                     __end_of_rand_tile:
  1561                           
  1562                           	psect	text2
  1563     037E                     __ptext2:	
  1564 ;; *************** function _init *****************
  1565 ;; Defined at:
  1566 ;;		line 447 in file "main.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;		None
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  1    wreg      void 
  1573 ;; Registers used:
  1574 ;;		wreg, status,2
  1575 ;; Tracked objects:
  1576 ;;		On entry : B00/0
  1577 ;;		On exit  : B00/0
  1578 ;;		Unchanged: 800/0
  1579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1580 ;;      Params:         0       0       0       0
  1581 ;;      Locals:         0       0       0       0
  1582 ;;      Temps:          0       0       0       0
  1583 ;;      Totals:         0       0       0       0
  1584 ;;Total ram usage:        0 bytes
  1585 ;; Hardware stack levels used: 1
  1586 ;; Hardware stack levels required when called: 2
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594     037E                     _init:	
  1595                           ;psect for function _init
  1596                           
  1597                           
  1598                           ;main.c: 450: PCONbits.OSCF = 1;
  1599                           
  1600                           ;incstack = 0
  1601                           ; Regs used in _init: [wreg+status,2]
  1602     037E  1683               	bsf	3,5	;RP0=1, select bank1
  1603     037F  158E               	bsf	14,3	;volatile
  1604                           
  1605                           ;main.c: 453: CMCON = 7;
  1606     0380  3007               	movlw	7
  1607     0381  1283               	bcf	3,5	;RP0=0, select bank0
  1608     0382  009F               	movwf	31	;volatile
  1609                           
  1610                           ;main.c: 456: TRISA = 0x0c;
  1611     0383  300C               	movlw	12
  1612     0384  1683               	bsf	3,5	;RP0=1, select bank1
  1613     0385  0085               	movwf	5	;volatile
  1614                           
  1615                           ;main.c: 460: TRISB = 0xf0;
  1616     0386  30F0               	movlw	240
  1617     0387  0086               	movwf	6	;volatile
  1618                           
  1619                           ;main.c: 464: OPTION_REG = 0x85;
  1620     0388  3085               	movlw	133
  1621     0389  0081               	movwf	1	;volatile
  1622                           
  1623                           ;main.c: 469: CCPR1L = 0;
  1624     038A  1283               	bcf	3,5	;RP0=0, select bank0
  1625     038B  0195               	clrf	21	;volatile
  1626                           
  1627                           ;main.c: 470: CCP1CON = 0x0C;
  1628     038C  300C               	movlw	12
  1629     038D  0097               	movwf	23	;volatile
  1630                           
  1631                           ;main.c: 471: T2CON = 0x07;
  1632     038E  3007               	movlw	7
  1633     038F  0092               	movwf	18	;volatile
  1634                           
  1635                           ;main.c: 474: PORTBbits.RB2 = 1;
  1636     0390  1506               	bsf	6,2	;volatile
  1637     0391  0008               	return
  1638     0392                     __end_of_init:
  1639                           
  1640                           	psect	text3
  1641     0392                     __ptext3:	
  1642 ;; *************** function _clearstr *****************
  1643 ;; Defined at:
  1644 ;;		line 437 in file "main.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  str             1    wreg     PTR unsigned char 
  1647 ;;		 -> gameA_line_buf(17), 
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  str             1    0[BANK0 ] PTR unsigned char 
  1650 ;;		 -> gameA_line_buf(17), 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1655 ;; Tracked objects:
  1656 ;;		On entry : 300/0
  1657 ;;		On exit  : B00/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1660 ;;      Params:         0       0       0       0
  1661 ;;      Locals:         0       1       0       0
  1662 ;;      Temps:          0       0       0       0
  1663 ;;      Totals:         0       1       0       0
  1664 ;;Total ram usage:        1 bytes
  1665 ;; Hardware stack levels used: 1
  1666 ;; Hardware stack levels required when called: 2
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_main
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674     0392                     _clearstr:	
  1675                           ;psect for function _clearstr
  1676                           
  1677                           
  1678                           ;incstack = 0
  1679                           ; Regs used in _clearstr: [wreg-fsr0h+status,2+status,0+btemp+1]
  1680                           ;clearstr@str stored from wreg
  1681     0392  00CD               	movwf	clearstr@str
  1682     0393                     l1490:	
  1683                           ;main.c: 438: while (*str) {
  1684                           
  1685     0393  084D               	movf	clearstr@str,w
  1686     0394  0084               	movwf	4
  1687     0395  1383               	bcf	3,7	;select IRP bank0
  1688     0396  0800               	movf	0,w
  1689     0397  1903               	btfsc	3,2
  1690     0398  0008               	return
  1691                           
  1692                           ;main.c: 439: *str = ' ';
  1693     0399  084D               	movf	clearstr@str,w
  1694     039A  0084               	movwf	4
  1695     039B  3020               	movlw	32
  1696     039C  0080               	movwf	0
  1697                           
  1698                           ;main.c: 440: str++;
  1699     039D  3001               	movlw	1
  1700     039E  00FF               	movwf	127
  1701     039F  087F               	movf	127,w
  1702     03A0  07CD               	addwf	clearstr@str,f
  1703     03A1  2B93               	goto	l1490
  1704     03A2                     __end_of_clearstr:
  1705                           
  1706                           	psect	text4
  1707     03C0                     __ptext4:	
  1708 ;; *************** function __beep *****************
  1709 ;; Defined at:
  1710 ;;		line 396 in file "main.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  PR2_val         1    wreg     unsigned char 
  1713 ;;  CCPR1L_val      1    0[BANK0 ] unsigned char 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  PR2_val         1    1[BANK0 ] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg
  1720 ;; Tracked objects:
  1721 ;;		On entry : B00/0
  1722 ;;		On exit  : B00/0
  1723 ;;		Unchanged: 800/0
  1724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1725 ;;      Params:         0       1       0       0
  1726 ;;      Locals:         0       1       0       0
  1727 ;;      Temps:          0       0       0       0
  1728 ;;      Totals:         0       2       0       0
  1729 ;;Total ram usage:        2 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 2
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739     03C0                     __beep:	
  1740                           ;psect for function __beep
  1741                           
  1742                           
  1743                           ;incstack = 0
  1744                           ; Regs used in __beep: [wreg]
  1745                           ;__beep@PR2_val stored from wreg
  1746     03C0  00CE               	movwf	__beep@PR2_val
  1747                           
  1748                           ;main.c: 402: beep_delay = 6;
  1749     03C1  3006               	movlw	6
  1750     03C2  00FD               	movwf	_beep_delay
  1751                           
  1752                           ;main.c: 403: PR2 = PR2_val;
  1753     03C3  084E               	movf	__beep@PR2_val,w
  1754     03C4  1683               	bsf	3,5	;RP0=1, select bank1
  1755     03C5  0092               	movwf	18	;volatile
  1756                           
  1757                           ;main.c: 404: CCPR1L = CCPR1L_val;
  1758     03C6  1283               	bcf	3,5	;RP0=0, select bank0
  1759     03C7  084D               	movf	__beep@CCPR1L_val,w
  1760     03C8  0095               	movwf	21	;volatile
  1761     03C9  0008               	return
  1762     03CA                     __end_of__beep:
  1763                           
  1764                           	psect	text5
  1765     031D                     __ptext5:	
  1766 ;; *************** function _LCD_wr_custom_char *****************
  1767 ;; Defined at:
  1768 ;;		line 109 in file "lcd_hd44780.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;  code            1    wreg     unsigned char 
  1771 ;;  dataarr         1    6[BANK0 ] PTR const unsigned char 
  1772 ;;		 -> eeprom_cgram_data(56), 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  code            1    8[BANK0 ] unsigned char 
  1775 ;;  cnt             1    9[BANK0 ] unsigned char 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : 300/0
  1782 ;;		On exit  : 300/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1785 ;;      Params:         0       1       0       0
  1786 ;;      Locals:         0       2       0       0
  1787 ;;      Temps:          0       1       0       0
  1788 ;;      Totals:         0       4       0       0
  1789 ;;Total ram usage:        4 bytes
  1790 ;; Hardware stack levels used: 1
  1791 ;; Hardware stack levels required when called: 5
  1792 ;; This function calls:
  1793 ;;		_LCD_putc
  1794 ;;		_LCD_set_cgram_addr
  1795 ;;		___eetoc
  1796 ;; This function is called by:
  1797 ;;		_main
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801     031D                     _LCD_wr_custom_char:	
  1802                           ;psect for function _LCD_wr_custom_char
  1803                           
  1804                           
  1805                           ;incstack = 0
  1806                           ; Regs used in _LCD_wr_custom_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1807                           ;LCD_wr_custom_char@code stored from wreg
  1808     031D  00D5               	movwf	LCD_wr_custom_char@code
  1809                           
  1810                           ;lcd_hd44780.c: 110: LCD_set_cgram_addr(code << 3);
  1811     031E  0855               	movf	LCD_wr_custom_char@code,w
  1812     031F  00D4               	movwf	??_LCD_wr_custom_char
  1813     0320  3002               	movlw	2
  1814     0321                     u505:
  1815     0321  1003               	clrc
  1816     0322  0DD4               	rlf	??_LCD_wr_custom_char,f
  1817     0323  3EFF               	addlw	-1
  1818     0324  1D03               	skipz
  1819     0325  2B21               	goto	u505
  1820     0326  1003               	clrc
  1821     0327  0D54               	rlf	??_LCD_wr_custom_char,w
  1822     0328  23E5               	fcall	_LCD_set_cgram_addr
  1823                           
  1824                           ;lcd_hd44780.c: 112: uint8_t cnt = 7;
  1825     0329  3007               	movlw	7
  1826     032A  00D6               	movwf	LCD_wr_custom_char@cnt
  1827     032B                     l1466:
  1828                           
  1829                           ;lcd_hd44780.c: 114: LCD_putc(*dataarr++);
  1830     032B  0853               	movf	LCD_wr_custom_char@dataarr,w
  1831     032C  23D4               	fcall	___eetoc
  1832     032D  23EB               	fcall	_LCD_putc
  1833     032E  3001               	movlw	1
  1834     032F  00FF               	movwf	127
  1835     0330  087F               	movf	127,w
  1836     0331  07D3               	addwf	LCD_wr_custom_char@dataarr,f
  1837                           
  1838                           ;lcd_hd44780.c: 115: } while (cnt--);
  1839     0332  3001               	movlw	1
  1840     0333  02D6               	subwf	LCD_wr_custom_char@cnt,f
  1841     0334  0A56               	incf	LCD_wr_custom_char@cnt,w
  1842     0335  1903               	btfsc	3,2
  1843     0336  0008               	return
  1844     0337  2B2B               	goto	l1466
  1845     0338                     __end_of_LCD_wr_custom_char:
  1846                           
  1847                           	psect	text6
  1848     03D4                     __ptext6:	
  1849 ;; *************** function ___eetoc *****************
  1850 ;; Defined at:
  1851 ;;		line 104 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\pic\__eeprom.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  addr            1    wreg     PTR eeprom void 
  1854 ;;		 -> tile_set(8), eeprom_cgram_data(56), eeprom_keys(17), 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  addr            1    4[BANK0 ] PTR eeprom void 
  1857 ;;		 -> tile_set(8), eeprom_cgram_data(56), eeprom_keys(17), 
  1858 ;;  data            1    5[BANK0 ] unsigned char 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      unsigned char 
  1861 ;; Registers used:
  1862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 300/0
  1865 ;;		On exit  : 300/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1868 ;;      Params:         0       0       0       0
  1869 ;;      Locals:         0       2       0       0
  1870 ;;      Temps:          0       0       0       0
  1871 ;;      Totals:         0       2       0       0
  1872 ;;Total ram usage:        2 bytes
  1873 ;; Hardware stack levels used: 1
  1874 ;; Hardware stack levels required when called: 3
  1875 ;; This function calls:
  1876 ;;		___eecpymem
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;;		_rand_tile
  1880 ;;		_LCD_wr_custom_char
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884     03D4                     ___eetoc:	
  1885                           ;psect for function ___eetoc
  1886                           
  1887                           
  1888                           ;incstack = 0
  1889                           ; Regs used in ___eetoc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1890                           ;___eetoc@addr stored from wreg
  1891     03D4  00D1               	movwf	___eetoc@addr
  1892                           
  1893                           ;__eeprom.c: 106: unsigned char data;;__eeprom.c: 107: __eecpymem((unsigned char *) &dat
      +                          a,addr,1);
  1894     03D5  0851               	movf	___eetoc@addr,w
  1895     03D6  00CD               	movwf	___eecpymem@from
  1896     03D7  01CE               	clrf	___eecpymem@size
  1897     03D8  0ACE               	incf	___eecpymem@size,f
  1898     03D9  3052               	movlw	(low (___eetoc@data| 0))& (0+255)
  1899     03DA  22AE               	fcall	___eecpymem
  1900                           
  1901                           ;__eeprom.c: 108: return data;
  1902     03DB  0852               	movf	___eetoc@data,w
  1903     03DC  0008               	return
  1904     03DD                     __end_of___eetoc:
  1905                           
  1906                           	psect	text7
  1907     02AE                     __ptext7:	
  1908 ;; *************** function ___eecpymem *****************
  1909 ;; Defined at:
  1910 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\pic\__eeprom.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  to              1    wreg     PTR volatile unsigned ch
  1913 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1914 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1915 ;;  from            1    0[BANK0 ] PTR eeprom unsigned char
  1916 ;;		 -> tile_set(8), eeprom_cgram_data(56), eeprom_keys(17), 
  1917 ;;  size            1    1[BANK0 ] unsigned char 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  to              1    3[BANK0 ] PTR volatile unsigned ch
  1920 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1921 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1922 ;;  cp              1    2[BANK0 ] PTR volatile unsigned ch
  1923 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1924 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  1    wreg      void 
  1927 ;; Registers used:
  1928 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1929 ;; Tracked objects:
  1930 ;;		On entry : 300/0
  1931 ;;		On exit  : 300/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1934 ;;      Params:         0       2       0       0
  1935 ;;      Locals:         0       2       0       0
  1936 ;;      Temps:          0       0       0       0
  1937 ;;      Totals:         0       4       0       0
  1938 ;;Total ram usage:        4 bytes
  1939 ;; Hardware stack levels used: 1
  1940 ;; Hardware stack levels required when called: 2
  1941 ;; This function calls:
  1942 ;;		Nothing
  1943 ;; This function is called by:
  1944 ;;		___eetoc
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948     02AE                     ___eecpymem:	
  1949                           ;psect for function ___eecpymem
  1950                           
  1951                           
  1952                           ;incstack = 0
  1953                           ; Regs used in ___eecpymem: [wreg-fsr0h+status,2+status,0+btemp+1]
  1954                           ;___eecpymem@to stored from wreg
  1955     02AE  00D0               	movwf	___eecpymem@to
  1956                           
  1957                           ;__eeprom.c: 8: volatile unsigned char *cp = to;
  1958     02AF  0850               	movf	___eecpymem@to,w
  1959     02B0  00CF               	movwf	___eecpymem@cp
  1960     02B1                     l271:	
  1961                           ;__eeprom.c: 10: while (EECON1bits.WR) continue;
  1962                           
  1963     02B1  1683               	bsf	3,5	;RP0=1, select bank1
  1964     02B2  189C               	btfsc	28,1	;volsfr
  1965     02B3  2AB1               	goto	l271
  1966                           
  1967                           ;__eeprom.c: 11: EEADR = (unsigned char)from;
  1968     02B4  1283               	bcf	3,5	;RP0=0, select bank0
  1969     02B5  084D               	movf	___eecpymem@from,w
  1970     02B6  1683               	bsf	3,5	;RP0=1, select bank1
  1971     02B7  009B               	movwf	27	;volatile
  1972     02B8                     l1382:	
  1973                           ;__eeprom.c: 12: while(size--) {
  1974                           
  1975     02B8  3001               	movlw	1
  1976     02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1977     02BA  02CE               	subwf	___eecpymem@size,f
  1978     02BB  0A4E               	incf	___eecpymem@size,w
  1979     02BC  1903               	btfsc	3,2
  1980     02BD  0008               	return
  1981     02BE                     l276:
  1982     02BE  1683               	bsf	3,5	;RP0=1, select bank1
  1983     02BF  189C               	btfsc	28,1	;volsfr
  1984     02C0  2ABE               	goto	l276
  1985                           
  1986                           ;__eeprom.c: 15: EECON1 &= 0x7F;
  1987     02C1  307F               	movlw	127
  1988     02C2  00FF               	movwf	127
  1989     02C3  087F               	movf	127,w
  1990     02C4  059C               	andwf	28,f	;volsfr
  1991                           
  1992                           ;__eeprom.c: 17: EECON1bits.RD = 1;
  1993     02C5  141C               	bsf	28,0	;volsfr
  1994                           
  1995                           ;__eeprom.c: 18: *cp++ = EEDATA;
  1996     02C6  1283               	bcf	3,5	;RP0=0, select bank0
  1997     02C7  084F               	movf	___eecpymem@cp,w
  1998     02C8  0084               	movwf	4
  1999     02C9  1683               	bsf	3,5	;RP0=1, select bank1
  2000     02CA  081A               	movf	26,w	;volatile
  2001     02CB  1383               	bcf	3,7	;select IRP bank0
  2002     02CC  0080               	movwf	0
  2003     02CD  3001               	movlw	1
  2004     02CE  00FF               	movwf	127
  2005     02CF  087F               	movf	127,w
  2006     02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2007     02D1  07CF               	addwf	___eecpymem@cp,f
  2008                           
  2009                           ;__eeprom.c: 19: ++EEADR;
  2010     02D2  3001               	movlw	1
  2011     02D3  00FF               	movwf	127
  2012     02D4  087F               	movf	127,w
  2013     02D5  1683               	bsf	3,5	;RP0=1, select bank1
  2014     02D6  079B               	addwf	27,f	;volatile
  2015     02D7  2AB8               	goto	l1382
  2016     02D8                     __end_of___eecpymem:
  2017                           
  2018                           	psect	text8
  2019     03E5                     __ptext8:	
  2020 ;; *************** function _LCD_set_cgram_addr *****************
  2021 ;; Defined at:
  2022 ;;		line 90 in file "lcd_hd44780.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;  addr            1    wreg     unsigned char 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  addr            1    3[BANK0 ] unsigned char 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 300/0
  2033 ;;		On exit  : 300/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2036 ;;      Params:         0       0       0       0
  2037 ;;      Locals:         0       1       0       0
  2038 ;;      Temps:          0       0       0       0
  2039 ;;      Totals:         0       1       0       0
  2040 ;;Total ram usage:        1 bytes
  2041 ;; Hardware stack levels used: 1
  2042 ;; Hardware stack levels required when called: 4
  2043 ;; This function calls:
  2044 ;;		_LCD_wrdata
  2045 ;; This function is called by:
  2046 ;;		_LCD_wr_custom_char
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050     03E5                     _LCD_set_cgram_addr:	
  2051                           ;psect for function _LCD_set_cgram_addr
  2052                           
  2053                           
  2054                           ;incstack = 0
  2055                           ; Regs used in _LCD_set_cgram_addr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2056                           ;LCD_set_cgram_addr@addr stored from wreg
  2057     03E5  00D0               	movwf	LCD_set_cgram_addr@addr
  2058                           
  2059                           ;lcd_hd44780.c: 91: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b01000000 | addr);;
  2060     03E6  1205               	bcf	5,4	;volatile
  2061     03E7  0850               	movf	LCD_set_cgram_addr@addr,w
  2062     03E8  3840               	iorlw	64
  2063     03E9  227F               	fcall	_LCD_wrdata
  2064     03EA  0008               	return
  2065     03EB                     __end_of_LCD_set_cgram_addr:
  2066                           
  2067                           	psect	text9
  2068     0369                     __ptext9:	
  2069 ;; *************** function _LCD_puts *****************
  2070 ;; Defined at:
  2071 ;;		line 98 in file "lcd_hd44780.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  str             2    4[BANK0 ] PTR const unsigned char 
  2074 ;;		 -> gameB_track(34), STR_2(7), STR_1(14), gameA_line_buf(17), 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 300/0
  2083 ;;		On exit  : 300/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2086 ;;      Params:         0       2       0       0
  2087 ;;      Locals:         0       0       0       0
  2088 ;;      Temps:          0       0       0       0
  2089 ;;      Totals:         0       2       0       0
  2090 ;;Total ram usage:        2 bytes
  2091 ;; Hardware stack levels used: 1
  2092 ;; Hardware stack levels required when called: 5
  2093 ;; This function calls:
  2094 ;;		_LCD_putc
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100     0369                     _LCD_puts:	
  2101                           ;psect for function _LCD_puts
  2102                           
  2103     0369                     l1482:	
  2104                           ;lcd_hd44780.c: 99: while (*str) {
  2105                           
  2106                           ;incstack = 0
  2107                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2108                           
  2109     0369  0852               	movf	LCD_puts@str+1,w
  2110     036A  00FF               	movwf	127
  2111     036B  0851               	movf	LCD_puts@str,w
  2112     036C  0084               	movwf	4
  2113     036D  22D8               	fcall	stringtab
  2114     036E  3A00               	xorlw	0
  2115     036F  1903               	btfsc	3,2
  2116     0370  0008               	return
  2117                           
  2118                           ;lcd_hd44780.c: 100: LCD_putc(*str++);
  2119     0371  0852               	movf	LCD_puts@str+1,w
  2120     0372  00FF               	movwf	127
  2121     0373  0851               	movf	LCD_puts@str,w
  2122     0374  0084               	movwf	4
  2123     0375  22D8               	fcall	stringtab
  2124     0376  23EB               	fcall	_LCD_putc
  2125     0377  3001               	movlw	1
  2126     0378  07D1               	addwf	LCD_puts@str,f
  2127     0379  1803               	skipnc
  2128     037A  0AD2               	incf	LCD_puts@str+1,f
  2129     037B  3000               	movlw	0
  2130     037C  07D2               	addwf	LCD_puts@str+1,f
  2131     037D  2B69               	goto	l1482
  2132     037E                     __end_of_LCD_puts:
  2133                           
  2134                           	psect	text10
  2135     03EB                     __ptext10:	
  2136 ;; *************** function _LCD_putc *****************
  2137 ;; Defined at:
  2138 ;;		line 104 in file "lcd_hd44780.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  chr             1    wreg     unsigned char 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  chr             1    3[BANK0 ] unsigned char 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 300/0
  2149 ;;		On exit  : 300/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2152 ;;      Params:         0       0       0       0
  2153 ;;      Locals:         0       1       0       0
  2154 ;;      Temps:          0       0       0       0
  2155 ;;      Totals:         0       1       0       0
  2156 ;;Total ram usage:        1 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; Hardware stack levels required when called: 4
  2159 ;; This function calls:
  2160 ;;		_LCD_wrdata
  2161 ;; This function is called by:
  2162 ;;		_main
  2163 ;;		_LCD_puts
  2164 ;;		_LCD_wr_custom_char
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168     03EB                     _LCD_putc:	
  2169                           ;psect for function _LCD_putc
  2170                           
  2171                           
  2172                           ;incstack = 0
  2173                           ; Regs used in _LCD_putc: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2174                           ;LCD_putc@chr stored from wreg
  2175     03EB  00D0               	movwf	LCD_putc@chr
  2176                           
  2177                           ;lcd_hd44780.c: 105: PORTAbits.RA4 = 1;
  2178     03EC  1605               	bsf	5,4	;volatile
  2179                           
  2180                           ;lcd_hd44780.c: 106: LCD_wrdata(chr);
  2181     03ED  0850               	movf	LCD_putc@chr,w
  2182     03EE  227F               	fcall	_LCD_wrdata
  2183     03EF  0008               	return
  2184     03F0                     __end_of_LCD_putc:
  2185                           
  2186                           	psect	text11
  2187     022F                     __ptext11:	
  2188 ;; *************** function _LCD_init *****************
  2189 ;; Defined at:
  2190 ;;		line 118 in file "lcd_hd44780.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;  i               1    5[BANK0 ] unsigned char 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : B00/0
  2201 ;;		On exit  : 300/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2204 ;;      Params:         0       0       0       0
  2205 ;;      Locals:         0       1       0       0
  2206 ;;      Temps:          0       2       0       0
  2207 ;;      Totals:         0       3       0       0
  2208 ;;Total ram usage:        3 bytes
  2209 ;; Hardware stack levels used: 1
  2210 ;; Hardware stack levels required when called: 4
  2211 ;; This function calls:
  2212 ;;		_LCD_waitbf
  2213 ;;		_LCD_wrdata
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219     022F                     _LCD_init:	
  2220                           ;psect for function _LCD_init
  2221                           
  2222                           
  2223                           ;lcd_hd44780.c: 120: LCD.DisplayControl = 0b00001000;
  2224                           
  2225                           ;incstack = 0
  2226                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2227     022F  3008               	movlw	8
  2228     0230  00B1               	movwf	_LCD+1
  2229                           
  2230                           ;lcd_hd44780.c: 122: TRISA &= 0xF0;
  2231     0231  30F0               	movlw	240
  2232     0232  00FF               	movwf	127
  2233     0233  087F               	movf	127,w
  2234     0234  1683               	bsf	3,5	;RP0=1, select bank1
  2235     0235  0585               	andwf	5,f	;volatile
  2236                           
  2237                           ;lcd_hd44780.c: 123: PORTAbits.RA4 = 0;
  2238     0236  1283               	bcf	3,5	;RP0=0, select bank0
  2239     0237  1205               	bcf	5,4	;volatile
  2240                           
  2241                           ;lcd_hd44780.c: 125: uint8_t i = 3;
  2242     0238  3003               	movlw	3
  2243     0239  00D2               	movwf	LCD_init@i
  2244     023A                     l1418:
  2245                           
  2246                           ;lcd_hd44780.c: 127: _delay((unsigned long)((50)*(4000000/4000.0)));
  2247     023A  3041               	movlw	65
  2248     023B  1283               	bcf	3,5	;RP0=0, select bank0
  2249     023C  1303               	bcf	3,6	;RP1=0, select bank0
  2250     023D  00D1               	movwf	??_LCD_init+1
  2251     023E  30EE               	movlw	238
  2252     023F  00D0               	movwf	??_LCD_init
  2253     0240                     u917:
  2254     0240  0BD0               	decfsz	??_LCD_init,f
  2255     0241  2A40               	goto	u917
  2256     0242  0BD1               	decfsz	??_LCD_init+1,f
  2257     0243  2A40               	goto	u917
  2258                           
  2259                           ;lcd_hd44780.c: 129: PORTAbits.RA6 = 1;
  2260     0244  1283               	bcf	3,5	;RP0=0, select bank0
  2261     0245  1303               	bcf	3,6	;RP1=0, select bank0
  2262     0246  1705               	bsf	5,6	;volatile
  2263                           
  2264                           ;lcd_hd44780.c: 130: PORTA = (PORTA & 0xf0) | 0x03;
  2265     0247  0805               	movf	5,w	;volatile
  2266     0248  39F0               	andlw	240
  2267     0249  3803               	iorlw	3
  2268     024A  0085               	movwf	5	;volatile
  2269                           
  2270                           ;lcd_hd44780.c: 131: __nop();
  2271     024B  0000               	nop
  2272                           
  2273                           ;lcd_hd44780.c: 132: __nop();
  2274     024C  0000               	nop
  2275                           
  2276                           ;lcd_hd44780.c: 133: PORTAbits.RA6 = 0;
  2277     024D  1283               	bcf	3,5	;RP0=0, select bank0
  2278     024E  1303               	bcf	3,6	;RP1=0, select bank0
  2279     024F  1305               	bcf	5,6	;volatile
  2280                           
  2281                           ;lcd_hd44780.c: 134: } while (i--);
  2282     0250  3001               	movlw	1
  2283     0251  02D2               	subwf	LCD_init@i,f
  2284     0252  0A52               	incf	LCD_init@i,w
  2285     0253  1D03               	btfss	3,2
  2286     0254  2A3A               	goto	l1418
  2287                           
  2288                           ;lcd_hd44780.c: 136: __nop();
  2289     0255  0000               	nop
  2290                           
  2291                           ;lcd_hd44780.c: 137: __nop();
  2292     0256  0000               	nop
  2293                           
  2294                           ;lcd_hd44780.c: 140: PORTAbits.RA6 = 1;
  2295     0257  1283               	bcf	3,5	;RP0=0, select bank0
  2296     0258  1303               	bcf	3,6	;RP1=0, select bank0
  2297     0259  1705               	bsf	5,6	;volatile
  2298                           
  2299                           ;lcd_hd44780.c: 141: PORTA = (PORTA & 0xf0) | 0x02;
  2300     025A  0805               	movf	5,w	;volatile
  2301     025B  39F0               	andlw	240
  2302     025C  3802               	iorlw	2
  2303     025D  0085               	movwf	5	;volatile
  2304                           
  2305                           ;lcd_hd44780.c: 142: __nop();
  2306     025E  0000               	nop
  2307                           
  2308                           ;lcd_hd44780.c: 143: __nop();
  2309     025F  0000               	nop
  2310                           
  2311                           ;lcd_hd44780.c: 144: PORTAbits.RA6 = 0;
  2312     0260  1283               	bcf	3,5	;RP0=0, select bank0
  2313     0261  1303               	bcf	3,6	;RP1=0, select bank0
  2314     0262  1305               	bcf	5,6	;volatile
  2315                           
  2316                           ;lcd_hd44780.c: 147: LCD_waitbf();
  2317     0263  22FD               	fcall	_LCD_waitbf
  2318                           
  2319                           ;lcd_hd44780.c: 151: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00100000 | (uint8_t) 0b00
      +                          001000 | 0b00000000);;
  2320     0264  1205               	bcf	5,4	;volatile
  2321     0265  3028               	movlw	40
  2322     0266  227F               	fcall	_LCD_wrdata
  2323                           
  2324                           ;lcd_hd44780.c: 155: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.DisplayControl);;
  2325     0267  1205               	bcf	5,4	;volatile
  2326     0268  0831               	movf	_LCD+1,w
  2327     0269  227F               	fcall	_LCD_wrdata
  2328                           
  2329                           ;lcd_hd44780.c: 156: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00000001);; _delay((unsig
      +                          ned long)((50)*(4000000/4000.0)));;
  2330     026A  1205               	bcf	5,4	;volatile
  2331     026B  3001               	movlw	1
  2332     026C  227F               	fcall	_LCD_wrdata
  2333     026D  3041               	movlw	65
  2334     026E  1283               	bcf	3,5	;RP0=0, select bank0
  2335     026F  1303               	bcf	3,6	;RP1=0, select bank0
  2336     0270  00D1               	movwf	??_LCD_init+1
  2337     0271  30EE               	movlw	238
  2338     0272  00D0               	movwf	??_LCD_init
  2339     0273                     u927:
  2340     0273  0BD0               	decfsz	??_LCD_init,f
  2341     0274  2A73               	goto	u927
  2342     0275  0BD1               	decfsz	??_LCD_init+1,f
  2343     0276  2A73               	goto	u927
  2344                           
  2345                           ;lcd_hd44780.c: 158: LCD.EntryMode = 0b00000100 | 0b00000010;
  2346     0277  3006               	movlw	6
  2347     0278  1283               	bcf	3,5	;RP0=0, select bank0
  2348     0279  1303               	bcf	3,6	;RP1=0, select bank0
  2349     027A  00B0               	movwf	_LCD
  2350                           
  2351                           ;lcd_hd44780.c: 159: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.EntryMode);;
  2352     027B  1205               	bcf	5,4	;volatile
  2353     027C  0830               	movf	_LCD,w
  2354     027D  227F               	fcall	_LCD_wrdata
  2355     027E  0008               	return
  2356     027F                     __end_of_LCD_init:
  2357                           
  2358                           	psect	text12
  2359     03B1                     __ptext12:	
  2360 ;; *************** function _LCD_gotoxy *****************
  2361 ;; Defined at:
  2362 ;;		line 94 in file "lcd_hd44780.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  x               1    wreg     unsigned char 
  2365 ;;  y               1    3[BANK0 ] unsigned char 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  x               1    5[BANK0 ] unsigned char 
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      void 
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2372 ;; Tracked objects:
  2373 ;;		On entry : 300/0
  2374 ;;		On exit  : 300/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2377 ;;      Params:         0       1       0       0
  2378 ;;      Locals:         0       1       0       0
  2379 ;;      Temps:          0       1       0       0
  2380 ;;      Totals:         0       3       0       0
  2381 ;;Total ram usage:        3 bytes
  2382 ;; Hardware stack levels used: 1
  2383 ;; Hardware stack levels required when called: 4
  2384 ;; This function calls:
  2385 ;;		_LCD_wrdata
  2386 ;; This function is called by:
  2387 ;;		_main
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391     03B1                     _LCD_gotoxy:	
  2392                           ;psect for function _LCD_gotoxy
  2393                           
  2394                           
  2395                           ;incstack = 0
  2396                           ; Regs used in _LCD_gotoxy: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2397                           ;LCD_gotoxy@x stored from wreg
  2398     03B1  00D2               	movwf	LCD_gotoxy@x
  2399                           
  2400                           ;lcd_hd44780.c: 95: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b10000000 | (uint8_t) y * 0
      +                          x40 + x);;
  2401     03B2  1205               	bcf	5,4	;volatile
  2402     03B3  0850               	movf	LCD_gotoxy@y,w
  2403     03B4  00D1               	movwf	??_LCD_gotoxy
  2404     03B5  3006               	movlw	6
  2405     03B6                     u525:
  2406     03B6  1003               	clrc
  2407     03B7  0DD1               	rlf	??_LCD_gotoxy,f
  2408     03B8  3EFF               	addlw	-1
  2409     03B9  1D03               	skipz
  2410     03BA  2BB6               	goto	u525
  2411     03BB  0852               	movf	LCD_gotoxy@x,w
  2412     03BC  0751               	addwf	??_LCD_gotoxy,w
  2413     03BD  3880               	iorlw	128
  2414     03BE  227F               	fcall	_LCD_wrdata
  2415     03BF  0008               	return
  2416     03C0                     __end_of_LCD_gotoxy:
  2417                           
  2418                           	psect	text13
  2419     027F                     __ptext13:	
  2420 ;; *************** function _LCD_wrdata *****************
  2421 ;; Defined at:
  2422 ;;		line 34 in file "lcd_hd44780.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;  data            1    wreg     unsigned char 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  data            1    2[BANK0 ] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 300/0
  2433 ;;		On exit  : 300/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2436 ;;      Params:         0       0       0       0
  2437 ;;      Locals:         0       1       0       0
  2438 ;;      Temps:          0       1       0       0
  2439 ;;      Totals:         0       2       0       0
  2440 ;;Total ram usage:        2 bytes
  2441 ;; Hardware stack levels used: 1
  2442 ;; Hardware stack levels required when called: 3
  2443 ;; This function calls:
  2444 ;;		_LCD_waitbf
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;;		_LCD_set_cgram_addr
  2448 ;;		_LCD_gotoxy
  2449 ;;		_LCD_putc
  2450 ;;		_LCD_init
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454     027F                     _LCD_wrdata:	
  2455                           ;psect for function _LCD_wrdata
  2456                           
  2457                           
  2458                           ;incstack = 0
  2459                           ; Regs used in _LCD_wrdata: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2460                           ;LCD_wrdata@data stored from wreg
  2461     027F  00CF               	movwf	LCD_wrdata@data
  2462                           
  2463                           ;lcd_hd44780.c: 35: TRISA &= 0xF0;
  2464     0280  30F0               	movlw	240
  2465     0281  00FF               	movwf	127
  2466     0282  087F               	movf	127,w
  2467     0283  1683               	bsf	3,5	;RP0=1, select bank1
  2468     0284  0585               	andwf	5,f	;volatile
  2469                           
  2470                           ;lcd_hd44780.c: 38: PORTAbits.RA6 = 1;
  2471     0285  1283               	bcf	3,5	;RP0=0, select bank0
  2472     0286  1705               	bsf	5,6	;volatile
  2473                           
  2474                           ;lcd_hd44780.c: 39: __nop();
  2475     0287  0000               	nop
  2476                           
  2477                           ;lcd_hd44780.c: 40: PORTA = (PORTA & 0xF0) | data >> 4;
  2478     0288  1283               	bcf	3,5	;RP0=0, select bank0
  2479     0289  1303               	bcf	3,6	;RP1=0, select bank0
  2480     028A  084F               	movf	LCD_wrdata@data,w
  2481     028B  00CE               	movwf	??_LCD_wrdata
  2482     028C  3004               	movlw	4
  2483     028D                     u455:
  2484     028D  1003               	clrc
  2485     028E  0CCE               	rrf	??_LCD_wrdata,f
  2486     028F  3EFF               	addlw	-1
  2487     0290  1D03               	skipz
  2488     0291  2A8D               	goto	u455
  2489     0292  0805               	movf	5,w	;volatile
  2490     0293  39F0               	andlw	240
  2491     0294  044E               	iorwf	??_LCD_wrdata,w
  2492     0295  0085               	movwf	5	;volatile
  2493                           
  2494                           ;lcd_hd44780.c: 41: __nop();
  2495     0296  0000               	nop
  2496                           
  2497                           ;lcd_hd44780.c: 42: PORTAbits.RA6 = 0;
  2498     0297  1283               	bcf	3,5	;RP0=0, select bank0
  2499     0298  1303               	bcf	3,6	;RP1=0, select bank0
  2500     0299  1305               	bcf	5,6	;volatile
  2501                           
  2502                           ;lcd_hd44780.c: 44: __nop();
  2503     029A  0000               	nop
  2504                           
  2505                           ;lcd_hd44780.c: 47: PORTAbits.RA6 = 1;
  2506     029B  1283               	bcf	3,5	;RP0=0, select bank0
  2507     029C  1303               	bcf	3,6	;RP1=0, select bank0
  2508     029D  1705               	bsf	5,6	;volatile
  2509                           
  2510                           ;lcd_hd44780.c: 48: __nop();
  2511     029E  0000               	nop
  2512                           
  2513                           ;lcd_hd44780.c: 49: PORTA = (PORTA & 0xF0) | (data & 0x0f);
  2514     029F  300F               	movlw	15
  2515     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2516     02A1  1303               	bcf	3,6	;RP1=0, select bank0
  2517     02A2  054F               	andwf	LCD_wrdata@data,w
  2518     02A3  00CE               	movwf	??_LCD_wrdata
  2519     02A4  0805               	movf	5,w	;volatile
  2520     02A5  39F0               	andlw	240
  2521     02A6  044E               	iorwf	??_LCD_wrdata,w
  2522     02A7  0085               	movwf	5	;volatile
  2523                           
  2524                           ;lcd_hd44780.c: 50: __nop();
  2525     02A8  0000               	nop
  2526                           
  2527                           ;lcd_hd44780.c: 51: PORTAbits.RA6 = 0;
  2528     02A9  1283               	bcf	3,5	;RP0=0, select bank0
  2529     02AA  1303               	bcf	3,6	;RP1=0, select bank0
  2530     02AB  1305               	bcf	5,6	;volatile
  2531                           
  2532                           ;lcd_hd44780.c: 55: LCD_waitbf();
  2533     02AC  22FD               	fcall	_LCD_waitbf
  2534     02AD  0008               	return
  2535     02AE                     __end_of_LCD_wrdata:
  2536                           
  2537                           	psect	text14
  2538     02FD                     __ptext14:	
  2539 ;; *************** function _LCD_waitbf *****************
  2540 ;; Defined at:
  2541 ;;		line 62 in file "lcd_hd44780.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;		None
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  busy            1    0[BANK0 ] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, btemp+1
  2550 ;; Tracked objects:
  2551 ;;		On entry : 300/0
  2552 ;;		On exit  : 300/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2555 ;;      Params:         0       0       0       0
  2556 ;;      Locals:         0       1       0       0
  2557 ;;      Temps:          0       0       0       0
  2558 ;;      Totals:         0       1       0       0
  2559 ;;Total ram usage:        1 bytes
  2560 ;; Hardware stack levels used: 1
  2561 ;; Hardware stack levels required when called: 2
  2562 ;; This function calls:
  2563 ;;		Nothing
  2564 ;; This function is called by:
  2565 ;;		_LCD_wrdata
  2566 ;;		_LCD_init
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570     02FD                     _LCD_waitbf:	
  2571                           ;psect for function _LCD_waitbf
  2572                           
  2573                           
  2574                           ;lcd_hd44780.c: 64: bool busy;;lcd_hd44780.c: 66: PORTAbits.RA4 = 0;
  2575                           
  2576                           ;incstack = 0
  2577                           ; Regs used in _LCD_waitbf: [wreg+status,2+status,0+btemp+1]
  2578     02FD  1205               	bcf	5,4	;volatile
  2579                           
  2580                           ;lcd_hd44780.c: 67: PORTAbits.RA7 = 1;
  2581     02FE  1785               	bsf	5,7	;volatile
  2582                           
  2583                           ;lcd_hd44780.c: 69: TRISA |= 0x0f;
  2584     02FF  300F               	movlw	15
  2585     0300  00FF               	movwf	127
  2586     0301  087F               	movf	127,w
  2587     0302  1683               	bsf	3,5	;RP0=1, select bank1
  2588     0303  0485               	iorwf	5,f	;volatile
  2589     0304                     l1322:
  2590                           
  2591                           ;lcd_hd44780.c: 72: PORTAbits.RA6 = 1;
  2592     0304  1283               	bcf	3,5	;RP0=0, select bank0
  2593     0305  1705               	bsf	5,6	;volatile
  2594                           
  2595                           ;lcd_hd44780.c: 73: __nop();
  2596     0306  0000               	nop
  2597                           
  2598                           ;lcd_hd44780.c: 75: busy = PORTA & 0x08;
  2599     0307  1283               	bcf	3,5	;RP0=0, select bank0
  2600     0308  1303               	bcf	3,6	;RP1=0, select bank0
  2601     0309  0805               	movf	5,w	;volatile
  2602     030A  3908               	andlw	8
  2603     030B  00CD               	movwf	LCD_waitbf@busy
  2604                           
  2605                           ;lcd_hd44780.c: 77: PORTAbits.RA6 = 0;
  2606     030C  1305               	bcf	5,6	;volatile
  2607                           
  2608                           ;lcd_hd44780.c: 78: __nop();
  2609     030D  0000               	nop
  2610                           
  2611                           ;lcd_hd44780.c: 80: PORTAbits.RA6 = 1;
  2612     030E  1283               	bcf	3,5	;RP0=0, select bank0
  2613     030F  1303               	bcf	3,6	;RP1=0, select bank0
  2614     0310  1705               	bsf	5,6	;volatile
  2615                           
  2616                           ;lcd_hd44780.c: 81: __nop();
  2617     0311  0000               	nop
  2618                           
  2619                           ;lcd_hd44780.c: 82: PORTAbits.RA6 = 0;
  2620     0312  1283               	bcf	3,5	;RP0=0, select bank0
  2621     0313  1303               	bcf	3,6	;RP1=0, select bank0
  2622     0314  1305               	bcf	5,6	;volatile
  2623                           
  2624                           ;lcd_hd44780.c: 83: __nop();
  2625     0315  0000               	nop
  2626                           
  2627                           ;lcd_hd44780.c: 84: } while (busy);
  2628     0316  1283               	bcf	3,5	;RP0=0, select bank0
  2629     0317  1303               	bcf	3,6	;RP1=0, select bank0
  2630     0318  084D               	movf	LCD_waitbf@busy,w
  2631     0319  1D03               	btfss	3,2
  2632     031A  2B04               	goto	l1322
  2633                           
  2634                           ;lcd_hd44780.c: 86: PORTAbits.RA7 = 0;
  2635     031B  1385               	bcf	5,7	;volatile
  2636     031C  0008               	return
  2637     031D                     __end_of_LCD_waitbf:
  2638                           
  2639                           	psect	text15
  2640     01CE                     __ptext15:	
  2641 ;; *************** function _isr *****************
  2642 ;; Defined at:
  2643 ;;		line 326 in file "main.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;  _key            1   10[COMMON] unsigned char 
  2648 ;;  _col            1    8[COMMON] unsigned char 
  2649 ;;  _row            1    9[COMMON] unsigned char 
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2659 ;;      Params:         0       0       0       0
  2660 ;;      Locals:         3       0       0       0
  2661 ;;      Temps:          5       0       0       0
  2662 ;;      Totals:         8       0       0       0
  2663 ;;Total ram usage:        8 bytes
  2664 ;; Hardware stack levels used: 1
  2665 ;; Hardware stack levels required when called: 1
  2666 ;; This function calls:
  2667 ;;		_kbd_eval
  2668 ;;		i1__beep
  2669 ;; This function is called by:
  2670 ;;		Interrupt level 1
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674     01CE                     _isr:	
  2675                           ;psect for function _isr
  2676                           
  2677                           
  2678                           ;main.c: 328: static char prev_key = '\0';;main.c: 329: static uint8_t key_col_select;;m
      +                          ain.c: 330: static uint8_t kbd_skip_t0_cyc = 0;;main.c: 337: if (T0IF) {
  2679     01CE  1D0B               	btfss	11,2	;volatile
  2680     01CF  2A24               	goto	i1l174
  2681                           
  2682                           ;main.c: 338: T0IF = 0;
  2683     01D0  110B               	bcf	11,2	;volatile
  2684                           
  2685                           ;main.c: 341: uint8_t _row = PORTB;
  2686     01D1  1283               	bcf	3,5	;RP0=0, select bank0
  2687     01D2  1303               	bcf	3,6	;RP1=0, select bank0
  2688     01D3  0806               	movf	6,w	;volatile
  2689     01D4  00F9               	movwf	isr@_row
  2690                           
  2691                           ;main.c: 345: if (kbd_skip_t0_cyc) {
  2692     01D5  087B               	movf	isr@kbd_skip_t0_cyc,w
  2693     01D6  1903               	btfsc	3,2
  2694     01D7  29DA               	goto	i1l1754
  2695                           
  2696                           ;main.c: 346: kbd_skip_t0_cyc--;
  2697     01D8  3001               	movlw	1
  2698     01D9  02FB               	subwf	isr@kbd_skip_t0_cyc,f
  2699     01DA                     i1l1754:
  2700                           
  2701                           ;main.c: 347: };main.c: 349: if (_row & 0xf0 && !key) {
  2702     01DA  0879               	movf	isr@_row,w
  2703     01DB  39F0               	andlw	240
  2704     01DC  1903               	btfsc	3,2
  2705     01DD  29FA               	goto	i1l1770
  2706     01DE  083B               	movf	_key,w
  2707     01DF  1D03               	btfss	3,2
  2708     01E0  29FA               	goto	i1l1770
  2709                           
  2710                           ;main.c: 350: uint8_t _col = key_col_select & 0x03;
  2711     01E1  087C               	movf	isr@key_col_select,w
  2712     01E2  3903               	andlw	3
  2713     01E3  00F8               	movwf	isr@_col
  2714                           
  2715                           ;main.c: 351: uint8_t _key;;main.c: 353: _key = kbd_eval(_row, _col);
  2716     01E4  0878               	movf	isr@_col,w
  2717     01E5  00F0               	movwf	kbd_eval@col
  2718     01E6  0879               	movf	isr@_row,w
  2719     01E7  2351               	fcall	_kbd_eval
  2720     01E8  00FA               	movwf	isr@_key
  2721                           
  2722                           ;main.c: 356: if (_key != prev_key || !kbd_skip_t0_cyc) {
  2723     01E9  087A               	movf	isr@_key,w
  2724     01EA  0633               	xorwf	isr@prev_key,w
  2725     01EB  1D03               	skipz
  2726     01EC  29F0               	goto	i1l1766
  2727     01ED  087B               	movf	isr@kbd_skip_t0_cyc,w
  2728     01EE  1D03               	btfss	3,2
  2729     01EF  29FA               	goto	i1l1770
  2730     01F0                     i1l1766:
  2731                           
  2732                           ;main.c: 357: kbd_skip_t0_cyc = 12;
  2733     01F0  300C               	movlw	12
  2734     01F1  00FB               	movwf	isr@kbd_skip_t0_cyc
  2735                           
  2736                           ;main.c: 358: key = _key;
  2737     01F2  087A               	movf	isr@_key,w
  2738     01F3  00BB               	movwf	_key
  2739                           
  2740                           ;main.c: 359: prev_key = _key;
  2741     01F4  087A               	movf	isr@_key,w
  2742     01F5  00B3               	movwf	isr@prev_key
  2743                           
  2744                           ;main.c: 360: _beep(120, 60);
  2745     01F6  303C               	movlw	60
  2746     01F7  00F0               	movwf	i1__beep@CCPR1L_val
  2747     01F8  3078               	movlw	120
  2748     01F9  23CA               	fcall	i1__beep
  2749     01FA                     i1l1770:
  2750                           
  2751                           ;main.c: 361: };main.c: 362: };main.c: 365: key_col_select++;
  2752     01FA  3001               	movlw	1
  2753     01FB  00FF               	movwf	127
  2754     01FC  087F               	movf	127,w
  2755     01FD  07FC               	addwf	isr@key_col_select,f
  2756                           
  2757                           ;main.c: 366: PORTB = (PORTB & 0xFC) | (key_col_select & 0x03);
  2758     01FE  3003               	movlw	3
  2759     01FF  057C               	andwf	isr@key_col_select,w
  2760     0200  00F3               	movwf	??_isr
  2761     0201  0806               	movf	6,w	;volatile
  2762     0202  39FC               	andlw	252
  2763     0203  0473               	iorwf	??_isr,w
  2764     0204  0086               	movwf	6	;volatile
  2765                           
  2766                           ;main.c: 369: if (CCPR1L) {
  2767     0205  0815               	movf	21,w	;volatile
  2768     0206  1903               	btfsc	3,2
  2769     0207  2A0F               	goto	i1l1782
  2770                           
  2771                           ;main.c: 371: if (beep_delay) {
  2772     0208  087D               	movf	_beep_delay,w
  2773     0209  1903               	btfsc	3,2
  2774     020A  2A0E               	goto	i1l1780
  2775                           
  2776                           ;main.c: 372: beep_delay--;
  2777     020B  3001               	movlw	1
  2778     020C  02FD               	subwf	_beep_delay,f
  2779                           
  2780                           ;main.c: 373: } else {
  2781     020D  2A0F               	goto	i1l1782
  2782     020E                     i1l1780:
  2783                           
  2784                           ;main.c: 375: CCPR1L = 0;
  2785     020E  0195               	clrf	21	;volatile
  2786     020F                     i1l1782:
  2787                           
  2788                           ;main.c: 376: };main.c: 377: };main.c: 380: if (gameB_spd_cnt && gameB_cnt_ena) {
  2789     020F  0839               	movf	_gameB_spd_cnt,w
  2790     0210  1903               	btfsc	3,2
  2791     0211  2A17               	goto	i1l172
  2792     0212  0834               	movf	_gameB_cnt_ena,w
  2793     0213  1903               	btfsc	3,2
  2794     0214  2A17               	goto	i1l172
  2795                           
  2796                           ;main.c: 381: gameB_spd_cnt--;
  2797     0215  3001               	movlw	1
  2798     0216  02B9               	subwf	_gameB_spd_cnt,f
  2799     0217                     i1l172:
  2800                           
  2801                           ;main.c: 382: };main.c: 384: if (flash_lcd) {
  2802     0217  0835               	movf	_flash_lcd,w
  2803     0218  1903               	btfsc	3,2
  2804     0219  2A24               	goto	i1l174
  2805                           
  2806                           ;main.c: 385: PORTBbits.RB2 = TMR2 & 0x01;
  2807     021A  0811               	movf	17,w	;volatile
  2808     021B  3901               	andlw	1
  2809     021C  00F3               	movwf	??_isr
  2810     021D  0DF3               	rlf	??_isr,f
  2811     021E  0DF3               	rlf	??_isr,f
  2812     021F  0806               	movf	6,w	;volatile
  2813     0220  0673               	xorwf	??_isr,w
  2814     0221  39FB               	andlw	-5
  2815     0222  0673               	xorwf	??_isr,w
  2816     0223  0086               	movwf	6	;volatile
  2817     0224                     i1l174:
  2818     0224  0877               	movf	??_isr+4,w
  2819     0225  00FF               	movwf	127
  2820     0226  0876               	movf	??_isr+3,w
  2821     0227  008A               	movwf	10
  2822     0228  0875               	movf	??_isr+2,w
  2823     0229  0084               	movwf	4
  2824     022A  0E74               	swapf	??_isr+1,w
  2825     022B  0083               	movwf	3
  2826     022C  0EFE               	swapf	126,f
  2827     022D  0E7E               	swapf	126,w
  2828     022E  0009               	retfie
  2829     022F                     __end_of_isr:
  2830                           
  2831                           	psect	intentry
  2832     0004                     __pintentry:	
  2833                           ;incstack = 0
  2834                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2835                           
  2836     0004                     interrupt_function:
  2837     007E                     saved_w	set	btemp
  2838     0004  00FE               	movwf	btemp
  2839     0005  0E03               	swapf	3,w
  2840     0006  00F4               	movwf	??_isr+1
  2841     0007  0804               	movf	4,w
  2842     0008  00F5               	movwf	??_isr+2
  2843     0009  080A               	movf	10,w
  2844     000A  00F6               	movwf	??_isr+3
  2845     000B  087F               	movf	btemp+1,w
  2846     000C  00F7               	movwf	??_isr+4
  2847     000D  29CE               	ljmp	_isr
  2848                           
  2849                           	psect	text16
  2850     03CA                     __ptext16:	
  2851 ;; *************** function i1__beep *****************
  2852 ;; Defined at:
  2853 ;;		line 396 in file "main.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  PR2_val         1    wreg     unsigned char 
  2856 ;;  CCPR1L_val      1    0[COMMON] unsigned char 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  PR2_val         1    1[COMMON] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg
  2863 ;; Tracked objects:
  2864 ;;		On entry : B00/0
  2865 ;;		On exit  : B00/0
  2866 ;;		Unchanged: 800/0
  2867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2868 ;;      Params:         1       0       0       0
  2869 ;;      Locals:         1       0       0       0
  2870 ;;      Temps:          0       0       0       0
  2871 ;;      Totals:         2       0       0       0
  2872 ;;Total ram usage:        2 bytes
  2873 ;; Hardware stack levels used: 1
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_isr
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881     03CA                     i1__beep:	
  2882                           ;psect for function i1__beep
  2883                           
  2884                           
  2885                           ;incstack = 0
  2886                           ; Regs used in i1__beep: [wreg]
  2887                           ;i1__beep@PR2_val stored from wreg
  2888     03CA  00F1               	movwf	i1__beep@PR2_val
  2889                           
  2890                           ;main.c: 402: beep_delay = 6;
  2891     03CB  3006               	movlw	6
  2892     03CC  00FD               	movwf	_beep_delay
  2893                           
  2894                           ;main.c: 403: PR2 = PR2_val;
  2895     03CD  0871               	movf	i1__beep@PR2_val,w
  2896     03CE  1683               	bsf	3,5	;RP0=1, select bank1
  2897     03CF  0092               	movwf	18	;volatile
  2898                           
  2899                           ;main.c: 404: CCPR1L = CCPR1L_val;
  2900     03D0  0870               	movf	i1__beep@CCPR1L_val,w
  2901     03D1  1283               	bcf	3,5	;RP0=0, select bank0
  2902     03D2  0095               	movwf	21	;volatile
  2903     03D3  0008               	return
  2904     03D4                     __end_ofi1__beep:
  2905                           
  2906                           	psect	text17
  2907     0351                     __ptext17:	
  2908 ;; *************** function _kbd_eval *****************
  2909 ;; Defined at:
  2910 ;;		line 11 in file "keypad.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  row             1    wreg     unsigned char 
  2913 ;;  col             1    0[COMMON] unsigned char 
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  row             1    2[COMMON] unsigned char 
  2916 ;;  key_ptr         1    1[COMMON] unsigned char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      unsigned char 
  2919 ;; Registers used:
  2920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2921 ;; Tracked objects:
  2922 ;;		On entry : 300/0
  2923 ;;		On exit  : B00/0
  2924 ;;		Unchanged: 300/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2926 ;;      Params:         1       0       0       0
  2927 ;;      Locals:         2       0       0       0
  2928 ;;      Temps:          0       0       0       0
  2929 ;;      Totals:         3       0       0       0
  2930 ;;Total ram usage:        3 bytes
  2931 ;; Hardware stack levels used: 1
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_isr
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939     0351                     _kbd_eval:	
  2940                           ;psect for function _kbd_eval
  2941                           
  2942                           
  2943                           ;incstack = 0
  2944                           ; Regs used in _kbd_eval: [wreg-fsr0h+status,2+status,0+btemp+1]
  2945                           ;kbd_eval@row stored from wreg
  2946     0351  00F2               	movwf	kbd_eval@row
  2947                           
  2948                           ;keypad.c: 13: uint8_t key_ptr = 0x00;
  2949     0352  01F1               	clrf	kbd_eval@key_ptr
  2950                           
  2951                           ;keypad.c: 16: if (row & 0x20) {
  2952     0353  1EF2               	btfss	kbd_eval@row,5
  2953     0354  2B57               	goto	i1l249
  2954                           
  2955                           ;keypad.c: 17: key_ptr = 4;
  2956     0355  3004               	movlw	4
  2957     0356  2B5E               	goto	L1
  2958     0357                     i1l249:	
  2959                           ;keypad.c: 18: } else if (row & 0x40) {
  2960                           
  2961     0357  1F72               	btfss	kbd_eval@row,6
  2962     0358  2B5B               	goto	i1l251
  2963                           
  2964                           ;keypad.c: 19: key_ptr = 8;
  2965     0359  3008               	movlw	8
  2966     035A  2B5E               	goto	L1
  2967     035B                     i1l251:	
  2968                           ;keypad.c: 20: } else if (row & 0x80) {
  2969                           
  2970     035B  1FF2               	btfss	kbd_eval@row,7
  2971     035C  2B5F               	goto	i1l1524
  2972                           
  2973                           ;keypad.c: 21: key_ptr = 12;
  2974     035D  300C               	movlw	12
  2975     035E                     L1:
  2976     035E  00F1               	movwf	kbd_eval@key_ptr
  2977     035F                     i1l1524:
  2978                           
  2979                           ;keypad.c: 22: };keypad.c: 26: key_ptr |= col;
  2980     035F  0870               	movf	kbd_eval@col,w
  2981     0360  00FF               	movwf	127
  2982     0361  087F               	movf	127,w
  2983     0362  04F1               	iorwf	kbd_eval@key_ptr,f
  2984                           
  2985                           ;keypad.c: 28: return keys[key_ptr];
  2986     0363  0871               	movf	kbd_eval@key_ptr,w
  2987     0364  3E20               	addlw	(low (_keys| 0))& (0+255)
  2988     0365  0084               	movwf	4
  2989     0366  1383               	bcf	3,7	;select IRP bank0
  2990     0367  0800               	movf	0,w
  2991     0368  0008               	return
  2992     0369                     __end_of_kbd_eval:
  2993     007E                     btemp	set	126	;btemp
  2994     007E                     wtemp0	set	126
  2995                           
  2996                           	psect	idloc
  2997                           
  2998                           ;Config register IDLOC0 @ 0x2000
  2999                           ;	unspecified, using default values
  3000     2000                     	org	8192
  3001     2000  3FFF               	dw	16383
  3002                           
  3003                           ;Config register IDLOC1 @ 0x2001
  3004                           ;	unspecified, using default values
  3005     2001                     	org	8193
  3006     2001  3FFF               	dw	16383
  3007                           
  3008                           ;Config register IDLOC2 @ 0x2002
  3009                           ;	unspecified, using default values
  3010     2002                     	org	8194
  3011     2002  3FFF               	dw	16383
  3012                           
  3013                           ;Config register IDLOC3 @ 0x2003
  3014                           ;	unspecified, using default values
  3015     2003                     	org	8195
  3016     2003  3FFF               	dw	16383
  3017                           
  3018                           	psect	config
  3019                           
  3020                           ;Config register CONFIG @ 0x2007
  3021                           ;	Oscillator Selection bits
  3022                           ;	FOSC = INTOSCIO, INTRC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function o
      +                          n RA7/OSC1/CLKIN
  3023                           ;	Watchdog Timer Enable bit
  3024                           ;	WDTE = OFF, WDT disabled
  3025                           ;	Power-up Timer Enable bit
  3026                           ;	PWRTE = OFF, PWRT disabled
  3027                           ;	RA5/MCLR pin function select
  3028                           ;	MCLRE = OFF, RA5/MCLR pin function is digital input, MCLR internally tied to VDD
  3029                           ;	Brown-out Reset Enable bit
  3030                           ;	BOREN = ON, BOD Reset enabled
  3031                           ;	Low-Voltage Programming Enable bit
  3032                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  3033                           ;	Data Code Protection bit
  3034                           ;	CPD = OFF, Data memory code protection off
  3035                           ;	Code Protection bits
  3036                           ;	CP = OFF, Program memory code protection off
  3037     2007                     	org	8199
  3038     2007  3F58               	dw	16216

Data Sizes:
    Strings     21
    Constant    0
    Data        81
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     18      63
    BANK1            80      0      34
    BANK2            48      0       0

Pointer List with Targets:

    __eetoc@addr	PTR eeprom void  size(1) Largest target is 56
		 -> tile_set(EEDATA[8]), eeprom_cgram_data(EEDATA[56]), eeprom_keys(EEDATA[17]), 

    __eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 56
		 -> tile_set(EEDATA[8]), eeprom_cgram_data(EEDATA[56]), eeprom_keys(EEDATA[17]), 

    __eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(BANK0[1]), 

    __eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(BANK0[1]), 

    LCD_wr_custom_char@dataarr	PTR const unsigned char  size(1) Largest target is 56
		 -> eeprom_cgram_data(EEDATA[56]), 

    LCD_puts@str	PTR const unsigned char  size(2) Largest target is 34
		 -> gameB_track(BANK1[34]), STR_2(CODE[7]), STR_1(CODE[14]), gameA_line_buf(BANK0[17]), 

    clearstr@str	PTR unsigned char  size(1) Largest target is 17
		 -> gameA_line_buf(BANK0[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_kbd_eval

Critical Paths under _main in BANK0

    _main->_LCD_wr_custom_char
    _rand_tile->___eetoc
    _LCD_wr_custom_char->___eetoc
    ___eetoc->___eecpymem
    _LCD_set_cgram_addr->_LCD_wrdata
    _LCD_puts->_LCD_putc
    _LCD_putc->_LCD_wrdata
    _LCD_init->_LCD_wrdata
    _LCD_gotoxy->_LCD_wrdata
    _LCD_wrdata->_LCD_waitbf

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    7193
                                             10 BANK0      8     8      0
                         _LCD_gotoxy
                           _LCD_init
                           _LCD_putc
                           _LCD_puts
                 _LCD_wr_custom_char
                         _LCD_wrdata
                            ___eetoc
                              __beep
                           _clearstr
                               _init
                          _rand_tile
 ---------------------------------------------------------------------------------
 (1) _rand_tile                                            1     1      0    1383
                                              6 BANK0      1     1      0
                            ___eetoc
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clearstr                                             1     1      0     111
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) __beep                                                2     1      1     246
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCD_wr_custom_char                                   4     3      1    2094
                                              6 BANK0      4     3      1
                           _LCD_putc
                 _LCD_set_cgram_addr
                            ___eetoc
 ---------------------------------------------------------------------------------
 (2) ___eetoc                                              2     2      0    1316
                                              4 BANK0      2     2      0
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (3) ___eecpymem                                           4     2      2    1229
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _LCD_set_cgram_addr                                   1     1      0      89
                                              3 BANK0      1     1      0
                         _LCD_wrdata
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             2     0      2     514
                                              4 BANK0      2     0      2
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             1     1      0      89
                                              3 BANK0      1     1      0
                         _LCD_wrdata
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0     113
                                              3 BANK0      3     3      0
                         _LCD_waitbf
                         _LCD_wrdata
 ---------------------------------------------------------------------------------
 (1) _LCD_gotoxy                                           3     2      1     719
                                              3 BANK0      3     2      1
                         _LCD_wrdata
 ---------------------------------------------------------------------------------
 (1) _LCD_wrdata                                           2     2      0      67
                                              1 BANK0      2     2      0
                         _LCD_waitbf
 ---------------------------------------------------------------------------------
 (2) _LCD_waitbf                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  8     8      0     396
                                              3 COMMON     8     8      0
                           _kbd_eval
                            i1__beep
 ---------------------------------------------------------------------------------
 (6) i1__beep                                              2     1      1      70
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (6) _kbd_eval                                             3     2      1     191
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_gotoxy
     _LCD_wrdata
       _LCD_waitbf
   _LCD_init
     _LCD_waitbf
     _LCD_wrdata
   _LCD_putc
     _LCD_wrdata
   _LCD_puts
     _LCD_putc
   _LCD_wr_custom_char
     _LCD_putc
     _LCD_set_cgram_addr
       _LCD_wrdata
     ___eetoc
       ___eecpymem
   _LCD_wrdata
   ___eetoc
   __beep
   _clearstr
   _init
   _rand_tile
     ___eetoc

 _isr (ROOT)
   _kbd_eval
   i1__beep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      22       7       42.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      3F       3       78.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6F      10        0.0%
ABS                  0      0      6F       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0      51       0       63.3%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Thu Dec 28 22:27:39 2023

                         pc 0002                          fsr 0004                         l101 0070  
                       l110 009A                         l130 011A                         l131 0141  
                       l123 00F1                         l142 0179                         l128 00F6  
                       l137 0170                         l129 00F8                         l271 02B1  
                       l276 02BE                         _LCD 0030                         _PR2 0092  
                       u505 0321                         u525 03B6                         u455 028D  
                       u907 01C9                         u917 0240                         u927 0273  
                       u877 0079                         u887 00A3                         u897 012B  
               ?_LCD_gotoxy 0050                         _key 003B                         _isr 01CE  
                       fsr0 0004                         indf 0000                 ?_LCD_waitbf 0070  
      _gameB_obstacle_delay 0037                 ?_LCD_wrdata 0070                        l1322 0304  
                      l1510 034D                        l1600 008D                        l1418 023A  
                      l1506 0347                        l1382 02B8                        l1710 0187  
                      l1630 00D4                        l1720 018D                        l1704 0177  
                      l1536 0020                        l1482 0369                        l1466 032B  
                      l1490 0393                        l1650 0108                        l1634 00D7  
                      l1626 00C7                        l1618 00B8                        l1730 01B1  
                      l1708 017C                        l1652 00F9                        l1732 01B9  
                      l1628 00CC                        l1576 006B                        l1568 0058  
                      l1594 0085                        l1578 006C                        l1684 0155  
                      l1596 0086                        l1598 008A                        ?_isr 0070  
                      STR_1 02E8                        STR_2 02F6                        _T0IF 005A  
                      _TMR0 0001                        _TMR2 0011              _gameA_line_buf 003C  
                      _main 001D                        _init 037E                        _keys 0020  
                      btemp 007E             __end_ofi1__beep 03D4                        start 000E  
                     ??_isr 0073            __end_of_LCD_init 027F            __end_of_LCD_putc 03F0  
          __end_of_LCD_puts 037E                       ?_main 0070             __end_of___eetoc 03DD  
                     ?_init 0070                       _EEADR 009B                       _CMCON 001F  
                     _T2CON 0012              _gameB_truckpos 0038                       i1l251 035B  
                     i1l172 0217                       i1l174 0224                       i1l249 0357  
                     _PORTA 0005                       _PORTB 0006                       _TRISA 0085  
                     _TRISB 0086                       __beep 03C0             i1__beep@PR2_val 0071  
                     main@i 005E                       pclath 000A                       status 0003  
                     wtemp0 007E             __initialization 000F                __end_of_main 01CE  
              __end_of_init 0392                 LCD_gotoxy@x 0052                 LCD_gotoxy@y 0050  
                    ??_main 0057            _gameB_difficulty 0036                      ??_init 004D  
               LCD_putc@chr 0050                 LCD_puts@str 0051                      ?__beep 004D  
                    _EEDATA 009A          _LCD_set_cgram_addr 03E5                      _CCPR1L 0015  
                    _EECON1 009C          _LCD_wr_custom_char 031D                   ??i1__beep 0071  
                    i1l1524 035F                      i1l1770 01FA                      i1l1754 01DA  
                    i1l1780 020E                      i1l1782 020F                      i1l1766 01F0  
                    _INTCON 000B         ?_LCD_set_cgram_addr 0070         ?_LCD_wr_custom_char 0053  
          __end_of_clearstr 03A2            __end_of_kbd_eval 0369              LCD_waitbf@busy 004D  
               isr@prev_key 0033                   ??___eetoc 0051        ??_LCD_set_cgram_addr 0050  
              __pdataEEDATA 0000        ??_LCD_wr_custom_char 0054                      saved_w 007E  
                ___eecpymem 02AE     __end_of__initialization 001B                   ?_LCD_init 0070  
                 ?_LCD_putc 0070                   ?_LCD_puts 0051              __pcstackCOMMON 0070  
             __end_of__beep 03CA           _eeprom_cgram_data 0000                   LCD_init@i 0052  
              ??_LCD_gotoxy 0051                ??_LCD_waitbf 004D                ??_LCD_wrdata 004E  
                _beep_delay 007D                     ??__beep 004E              LCD_wrdata@data 004F  
                __pbssBANK0 0020                  __pbssBANK1 00A0                  ??_LCD_init 0050  
                ??_LCD_putc 0050                  ??_LCD_puts 0053          isr@kbd_skip_t0_cyc 007B  
                __pmaintext 001D          __end_of_LCD_gotoxy 03C0          __end_of_LCD_waitbf 031D  
        __end_of_LCD_wrdata 02AE                  __pintentry 0004                     _CCP1CON 0017  
                 ?_clearstr 0070                   ?_kbd_eval 0070                     i1__beep 03CA  
                __stringtab 02D8                 ?___eecpymem 004D                     ___eetoc 03D4  
                   __ptext1 0338                     __ptext2 037E                     __ptext3 0392  
                   __ptext4 03C0                     __ptext5 031D                     __ptext6 03D4  
                   __ptext7 02AE                     __ptext8 03E5                     __ptext9 0369  
                ??_clearstr 004D           __end_of_rand_tile 0351                  ??_kbd_eval 0071  
                   clrloop0 03DE        end_of_initialization 001B                     isr@_col 0078  
                   isr@_key 007A                     isr@_row 0079                   _PORTAbits 0005  
                 _PORTBbits 0006            __beep@CCPR1L_val 004D               _gameB_cnt_ena 0034  
           kbd_eval@key_ptr 0071               _gameB_spd_cnt 0039               __pidataEEDATA 0000  
       start_initialization 000F                 __end_of_isr 022F                rand_tile@res 0053  
                init_fetch0 03A2                 __pbssCOMMON 007B                   ___latbits 0000  
             __pcstackBANK0 004D                 _gameB_track 00A0                    ?i1__beep 0070  
              ??___eecpymem 004F                   _gameB_spd 003A   LCD_wr_custom_char@dataarr 0053  
                  ?___eetoc 0070          i1__beep@CCPR1L_val 0070                   _flash_lcd 0035  
                 __pstrings 02D8          __end_of___eecpymem 02D8        rand_tile@psrand_seed 0032  
                 _rand_tile 0338           interrupt_function 0004                    _LCD_init 022F  
                 clear_ram0 03DD                    _LCD_putc 03EB                 _eeprom_keys 0038  
                  _LCD_puts 0369                    _PCONbits 008E                 __stringbase 02E7  
                ?_rand_tile 0070                  _EECON1bits 009C          __end_of__stringtab 02E8  
                  _clearstr 0392                    __ptext10 03EB                    __ptext11 022F  
                  __ptext12 03B1                    __ptext13 027F                    __ptext14 02FD  
                  __ptext15 01CE                    __ptext16 03CA                    __ptext17 0351  
                  _kbd_eval 0351      LCD_set_cgram_addr@addr 0050                    _tile_set 0049  
                  main@_key 005A                    main@hits 005C  __end_of_LCD_set_cgram_addr 03EB  
__end_of_LCD_wr_custom_char 0338                    main@xpos 005B                    main@ypos 005D  
    LCD_wr_custom_char@code 0055             ___eecpymem@from 004D             ___eecpymem@size 004E  
                _LCD_gotoxy 03B1                  _LCD_waitbf 02FD                  _LCD_wrdata 027F  
                  init_ram0 03A6                    intlevel1 0000                 ??_rand_tile 0053  
               clearstr@str 004D                   stringcode 02E2       LCD_wr_custom_char@cnt 0056  
                _OPTION_REG 0081               __beep@PR2_val 004E                    stringdir 02E2  
         isr@key_col_select 007C                    stringtab 02D8                 kbd_eval@col 0070  
               kbd_eval@row 0072               ___eecpymem@cp 004F               ___eecpymem@to 0050  
              ___eetoc@addr 0051                ___eetoc@data 0052  
