

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Nov 06 23:25:56 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F627
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37     0000                     
    38                           ; Generated 22/03/2023 GMT
    39                           ; 
    40                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F627 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72     0000                     	;# 
    73     0001                     	;# 
    74     0002                     	;# 
    75     0003                     	;# 
    76     0004                     	;# 
    77     0005                     	;# 
    78     0006                     	;# 
    79     000A                     	;# 
    80     000B                     	;# 
    81     000C                     	;# 
    82     000E                     	;# 
    83     000E                     	;# 
    84     000F                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0015                     	;# 
    89     0015                     	;# 
    90     0016                     	;# 
    91     0017                     	;# 
    92     0018                     	;# 
    93     0019                     	;# 
    94     001A                     	;# 
    95     001F                     	;# 
    96     0081                     	;# 
    97     0085                     	;# 
    98     0086                     	;# 
    99     008C                     	;# 
   100     008E                     	;# 
   101     0092                     	;# 
   102     0098                     	;# 
   103     0099                     	;# 
   104     009A                     	;# 
   105     009B                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009F                     	;# 
   109     0000                     	;# 
   110     0001                     	;# 
   111     0002                     	;# 
   112     0003                     	;# 
   113     0004                     	;# 
   114     0005                     	;# 
   115     0006                     	;# 
   116     000A                     	;# 
   117     000B                     	;# 
   118     000C                     	;# 
   119     000E                     	;# 
   120     000E                     	;# 
   121     000F                     	;# 
   122     0010                     	;# 
   123     0011                     	;# 
   124     0012                     	;# 
   125     0015                     	;# 
   126     0015                     	;# 
   127     0016                     	;# 
   128     0017                     	;# 
   129     0018                     	;# 
   130     0019                     	;# 
   131     001A                     	;# 
   132     001F                     	;# 
   133     0081                     	;# 
   134     0085                     	;# 
   135     0086                     	;# 
   136     008C                     	;# 
   137     008E                     	;# 
   138     0092                     	;# 
   139     0098                     	;# 
   140     0099                     	;# 
   141     009A                     	;# 
   142     009B                     	;# 
   143     009C                     	;# 
   144     009D                     	;# 
   145     009F                     	;# 
   146     0000                     	;# 
   147     0001                     	;# 
   148     0002                     	;# 
   149     0003                     	;# 
   150     0004                     	;# 
   151     0005                     	;# 
   152     0006                     	;# 
   153     000A                     	;# 
   154     000B                     	;# 
   155     000C                     	;# 
   156     000E                     	;# 
   157     000E                     	;# 
   158     000F                     	;# 
   159     0010                     	;# 
   160     0011                     	;# 
   161     0012                     	;# 
   162     0015                     	;# 
   163     0015                     	;# 
   164     0016                     	;# 
   165     0017                     	;# 
   166     0018                     	;# 
   167     0019                     	;# 
   168     001A                     	;# 
   169     001F                     	;# 
   170     0081                     	;# 
   171     0085                     	;# 
   172     0086                     	;# 
   173     008C                     	;# 
   174     008E                     	;# 
   175     0092                     	;# 
   176     0098                     	;# 
   177     0099                     	;# 
   178     009A                     	;# 
   179     009B                     	;# 
   180     009C                     	;# 
   181     009D                     	;# 
   182     009F                     	;# 
   183                           
   184                           	psect	idataEEDATA
   185     0000                     __pidataEEDATA:
   186     0000                     _eeprom_cgram_data:	
   187                           ;initializer for _eeprom_cgram_data
   188                           
   189     0000  0007               	db	7
   190     0001  0005               	db	5
   191     0002  000D               	db	13
   192     0003  0009               	db	9
   193     0004  001B               	db	27
   194     0005  001F               	db	31
   195     0006  001D               	db	29
   196     0007  0002               	db	2
   197     0008  001F               	db	31
   198     0009  0015               	db	21
   199     000A  000A               	db	10
   200     000B  0015               	db	21
   201     000C  000A               	db	10
   202     000D  001F               	db	31
   203     000E  0017               	db	23
   204     000F  0008               	db	8
   205     0010  001C               	db	28
   206     0011  000A               	db	10
   207     0012  0019               	db	25
   208     0013  000D               	db	13
   209     0014  001F               	db	31
   210     0015  001F               	db	31
   211     0016  001B               	db	27
   212     0017  0004               	db	4
   213     0018  0000               	db	0
   214     0019  000E               	db	14
   215     001A  001B               	db	27
   216     001B  001F               	db	31
   217     001C  0015               	db	21
   218     001D  0015               	db	21
   219     001E  0015               	db	21
   220     001F  001F               	db	31
   221     0020  0000               	db	0
   222     0021  0004               	db	4
   223     0022  000A               	db	10
   224     0023  0004               	db	4
   225     0024  001F               	db	31
   226     0025  0004               	db	4
   227     0026  000A               	db	10
   228     0027  0011               	db	17
   229     0028  000A               	db	10
   230     0029  0015               	db	21
   231     002A  000A               	db	10
   232     002B  0015               	db	21
   233     002C  000A               	db	10
   234     002D  0004               	db	4
   235     002E  0004               	db	4
   236     002F  0004               	db	4
   237     0030                     _eeprom_keys:	
   238                           ;initializer for _eeprom_keys
   239                           
   240     0030  0031               	db	49
   241     0031  0032               	db	50
   242     0032  0033               	db	51
   243     0033  0041               	db	65
   244     0034  0034               	db	52
   245     0035  0035               	db	53
   246     0036  0036               	db	54
   247     0037  0042               	db	66
   248     0038  0037               	db	55
   249     0039  0038               	db	56
   250     003A  0039               	db	57
   251     003B  0043               	db	67
   252     003C  002A               	db	42
   253     003D  0030               	db	48
   254     003E  0023               	db	35
   255     003F  0044               	db	68
   256     0040  0000               	db	0
   257     0041                     _tile_set:	
   258                           ;initializer for _tile_set
   259                           
   260     0041  0020               	db	32
   261     0042  0003               	db	3
   262     0043  0004               	db	4
   263     0044  0003               	db	3
   264     0045  0005               	db	5
   265     0046  0003               	db	3
   266     0047  0004               	db	4
   267     0048  0005               	db	5
   268     0005                     _PORTA	set	5
   269     0012                     _T2CON	set	18
   270     0017                     _CCP1CON	set	23
   271     001F                     _CMCON	set	31
   272     0001                     _TMR0	set	1
   273     0011                     _TMR2	set	17
   274     0015                     _CCPR1L	set	21
   275     0006                     _PORTB	set	6
   276     0006                     _PORTBbits	set	6
   277     000B                     _INTCON	set	11
   278     0005                     _PORTAbits	set	5
   279     005A                     _T0IF	set	90
   280     009A                     _EEDATA	set	154
   281     009C                     _EECON1	set	156
   282     009B                     _EEADR	set	155
   283     009C                     _EECON1bits	set	156
   284     0081                     _OPTION_REG	set	129
   285     0086                     _TRISB	set	134
   286     0085                     _TRISA	set	133
   287     008E                     _PCONbits	set	142
   288     0092                     _PR2	set	146
   289                           
   290                           	psect	strings
   291     02D1                     __pstrings:
   292     02D1                     stringtab:
   293     02D1                     __stringtab:
   294                           
   295                           ;	String table - string pointers are 1 byte each
   296     02D1  1BFF               	btfsc	btemp+1,7
   297     02D2  2ADB               	ljmp	stringcode
   298     02D3  1383               	bcf	3,7
   299     02D4  187F               	btfsc	btemp+1,0
   300     02D5  1783               	bsf	3,7
   301     02D6  0800               	movf	0,w
   302     02D7  0A84               	incf	4,f
   303     02D8  1903               	skipnz
   304     02D9  0AFF               	incf	btemp+1,f
   305     02DA  0008               	return
   306     02DB                     stringcode:
   307     02DB                     stringdir:
   308     02DB  3002               	movlw	high stringdir
   309     02DC  008A               	movwf	10
   310     02DD  0804               	movf	4,w
   311     02DE  0A84               	incf	4,f
   312     02DF  0782               	addwf	2,f
   313     02E0                     __stringbase:
   314     02E0  3400               	retlw	0
   315     02E1                     __end_of__stringtab:
   316     02E1                     STR_1:
   317     02E1  3453               	retlw	83	;'S'
   318     02E2  3465               	retlw	101	;'e'
   319     02E3  346C               	retlw	108	;'l'
   320     02E4  3465               	retlw	101	;'e'
   321     02E5  3463               	retlw	99	;'c'
   322     02E6  3474               	retlw	116	;'t'
   323     02E7  3420               	retlw	32	;' '
   324     02E8  3467               	retlw	103	;'g'
   325     02E9  3461               	retlw	97	;'a'
   326     02EA  346D               	retlw	109	;'m'
   327     02EB  3465               	retlw	101	;'e'
   328     02EC  3421               	retlw	33	;'!'
   329     02ED  3400               	retlw	0
   330     02EE  3400               	retlw	0
   331     02EF                     STR_2:
   332     02EF  3441               	retlw	65	;'A'
   333     02F0  3420               	retlw	32	;' '
   334     02F1  342F               	retlw	47	;'/'
   335     02F2  3420               	retlw	32	;' '
   336     02F3  3442               	retlw	66	;'B'
   337     02F4  3400               	retlw	0
   338     02F5  3400               	retlw	0
   339                           
   340                           	psect	cinit
   341     000F                     start_initialization:	
   342                           ; #config settings
   343                           
   344     000F                     __initialization:
   345                           
   346                           ; Clear objects allocated to BANK1
   347     000F  1383               	bcf	3,7	;select IRP bank0
   348     0010  30A0               	movlw	low __pbssBANK1
   349     0011  0084               	movwf	4
   350     0012  30C2               	movlw	low (__pbssBANK1+34)
   351     0013  23DC               	fcall	clear_ram0
   352                           
   353                           ; Clear objects allocated to BANK0
   354     0014  3020               	movlw	low __pbssBANK0
   355     0015  0084               	movwf	4
   356     0016  304D               	movlw	low (__pbssBANK0+45)
   357     0017  23DC               	fcall	clear_ram0
   358                           
   359                           ; Clear objects allocated to COMMON
   360     0018  01FB               	clrf	__pbssCOMMON& (0+127)
   361     0019  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   362     001A  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   363     001B                     end_of_initialization:	
   364                           ;End of C runtime variable initialization code
   365                           
   366     001B                     __end_of__initialization:
   367     001B  0183               	clrf	3
   368     001C  281D               	ljmp	_main	;jump to C main() function
   369                           
   370                           	psect	dataEEDATA
   371     0000                     __pdataEEDATA:
   372                           
   373                           	psect	bssCOMMON
   374     007B                     __pbssCOMMON:
   375     007B                     isr@kbd_skip_t0_cyc:
   376     007B                     	ds	1
   377     007C                     isr@key_col_select:
   378     007C                     	ds	1
   379     007D                     _beep_delay:
   380     007D                     	ds	1
   381                           
   382                           	psect	bssBANK0
   383     0020                     __pbssBANK0:
   384     0020                     _keys:
   385     0020                     	ds	16
   386     0030                     _LCD:
   387     0030                     	ds	2
   388     0032                     rand_tile@psrand_seed:
   389     0032                     	ds	1
   390     0033                     isr@prev_key:
   391     0033                     	ds	1
   392     0034                     _gameB_cnt_ena:
   393     0034                     	ds	1
   394     0035                     _flash_lcd:
   395     0035                     	ds	1
   396     0036                     _gameB_difficulty:
   397     0036                     	ds	1
   398     0037                     _gameB_obstacle_delay:
   399     0037                     	ds	1
   400     0038                     _gameB_truckpos:
   401     0038                     	ds	1
   402     0039                     _gameB_spd_cnt:
   403     0039                     	ds	1
   404     003A                     _gameB_spd:
   405     003A                     	ds	1
   406     003B                     _key:
   407     003B                     	ds	1
   408     003C                     _gameA_line_buf:
   409     003C                     	ds	17
   410                           
   411                           	psect	bssBANK1
   412     00A0                     __pbssBANK1:
   413     00A0                     _gameB_track:
   414     00A0                     	ds	34
   415                           
   416                           	psect	inittext
   417     039B                     init_fetch0:	
   418                           ;	Called with low address in FSR and high address in W
   419                           
   420     039B  087E               	movf	126,w
   421     039C  008A               	movwf	10
   422     039D  087F               	movf	127,w
   423     039E  0082               	movwf	2
   424     039F                     init_ram0:	
   425                           ;Called with:
   426                           ;	high address of idata address in btemp 
   427                           ;	low address of idata address in btemp+1 
   428                           ;	low address of data in FSR
   429                           ;	high address + 1 of data in btemp-1
   430                           
   431     039F  239B               	fcall	init_fetch0
   432     03A0  0080               	movwf	0
   433     03A1  0A84               	incf	4,f
   434     03A2  0804               	movf	4,w
   435     03A3  067D               	xorwf	125,w
   436     03A4  1903               	btfsc	3,2
   437     03A5  3400               	retlw	0
   438     03A6  0AFF               	incf	127,f
   439     03A7  1903               	btfsc	3,2
   440     03A8  0AFE               	incf	126,f
   441     03A9  2B9F               	goto	init_ram0
   442                           
   443                           	psect	clrtext
   444     03DC                     clear_ram0:	
   445                           ;	Called with FSR containing the base address, and
   446                           ;	W with the last address+1
   447                           
   448     03DC  0064               	clrwdt	;clear the watchdog before getting into this loop
   449     03DD                     clrloop0:
   450     03DD  0180               	clrf	0	;clear RAM location pointed to by FSR
   451     03DE  0A84               	incf	4,f	;increment pointer
   452     03DF  0604               	xorwf	4,w	;XOR with final address
   453     03E0  1903               	btfsc	3,2	;have we reached the end yet?
   454     03E1  3400               	retlw	0	;all done for this memory range, return
   455     03E2  0604               	xorwf	4,w	;XOR again to restore value
   456     03E3  2BDD               	goto	clrloop0	;do the next byte
   457                           
   458                           	psect	cstackCOMMON
   459     0070                     __pcstackCOMMON:
   460     0070                     ?_init:
   461     0070                     ?_LCD_init:	
   462                           ; 1 bytes @ 0x0
   463                           
   464     0070                     ?_LCD_wrdata:	
   465                           ; 1 bytes @ 0x0
   466                           
   467     0070                     ?_clearstr:	
   468                           ; 1 bytes @ 0x0
   469                           
   470     0070                     ?_LCD_putc:	
   471                           ; 1 bytes @ 0x0
   472                           
   473     0070                     ?_rand_tile:	
   474                           ; 1 bytes @ 0x0
   475                           
   476     0070                     ?_kbd_eval:	
   477                           ; 1 bytes @ 0x0
   478                           
   479     0070                     ?_LCD_waitbf:	
   480                           ; 1 bytes @ 0x0
   481                           
   482     0070                     ?_main:	
   483                           ; 1 bytes @ 0x0
   484                           
   485     0070                     ?_isr:	
   486                           ; 1 bytes @ 0x0
   487                           
   488     0070                     ?_LCD_set_cgram_addr:	
   489                           ; 1 bytes @ 0x0
   490                           
   491     0070                     ?___eetoc:	
   492                           ; 1 bytes @ 0x0
   493                           
   494     0070                     ?i1__beep:	
   495                           ; 1 bytes @ 0x0
   496                           
   497     0070                     kbd_eval@col:	
   498                           ; 1 bytes @ 0x0
   499                           
   500     0070                     i1__beep@CCPR1L_val:	
   501                           ; 1 bytes @ 0x0
   502                           
   503                           
   504                           ; 1 bytes @ 0x0
   505     0070                     	ds	1
   506     0071                     ??_kbd_eval:
   507     0071                     ??i1__beep:	
   508                           ; 1 bytes @ 0x1
   509                           
   510     0071                     kbd_eval@key_ptr:	
   511                           ; 1 bytes @ 0x1
   512                           
   513     0071                     i1__beep@PR2_val:	
   514                           ; 1 bytes @ 0x1
   515                           
   516                           
   517                           ; 1 bytes @ 0x1
   518     0071                     	ds	1
   519     0072                     kbd_eval@row:
   520                           
   521                           ; 1 bytes @ 0x2
   522     0072                     	ds	1
   523     0073                     ??_isr:
   524                           
   525                           ; 1 bytes @ 0x3
   526     0073                     	ds	5
   527     0078                     isr@_col:
   528                           
   529                           ; 1 bytes @ 0x8
   530     0078                     	ds	1
   531     0079                     isr@_row:
   532                           
   533                           ; 1 bytes @ 0x9
   534     0079                     	ds	1
   535     007A                     isr@_key:
   536                           
   537                           ; 1 bytes @ 0xA
   538     007A                     	ds	1
   539                           
   540                           	psect	cstackBANK0
   541     004D                     __pcstackBANK0:
   542     004D                     ??_init:
   543     004D                     ??_clearstr:	
   544                           ; 1 bytes @ 0x0
   545                           
   546     004D                     ?__beep:	
   547                           ; 1 bytes @ 0x0
   548                           
   549     004D                     ??_LCD_waitbf:	
   550                           ; 1 bytes @ 0x0
   551                           
   552     004D                     ?___eecpymem:	
   553                           ; 1 bytes @ 0x0
   554                           
   555     004D                     __beep@CCPR1L_val:	
   556                           ; 1 bytes @ 0x0
   557                           
   558     004D                     clearstr@str:	
   559                           ; 1 bytes @ 0x0
   560                           
   561     004D                     LCD_waitbf@busy:	
   562                           ; 1 bytes @ 0x0
   563                           
   564     004D                     ___eecpymem@from:	
   565                           ; 1 bytes @ 0x0
   566                           
   567                           
   568                           ; 1 bytes @ 0x0
   569     004D                     	ds	1
   570     004E                     ??_LCD_wrdata:
   571     004E                     ??__beep:	
   572                           ; 1 bytes @ 0x1
   573                           
   574     004E                     __beep@PR2_val:	
   575                           ; 1 bytes @ 0x1
   576                           
   577     004E                     ___eecpymem@size:	
   578                           ; 1 bytes @ 0x1
   579                           
   580                           
   581                           ; 1 bytes @ 0x1
   582     004E                     	ds	1
   583     004F                     ??___eecpymem:
   584     004F                     LCD_wrdata@data:	
   585                           ; 1 bytes @ 0x2
   586                           
   587     004F                     ___eecpymem@cp:	
   588                           ; 1 bytes @ 0x2
   589                           
   590                           
   591                           ; 1 bytes @ 0x2
   592     004F                     	ds	1
   593     0050                     ??_LCD_init:
   594     0050                     ?_LCD_gotoxy:	
   595                           ; 1 bytes @ 0x3
   596                           
   597     0050                     ??_LCD_putc:	
   598                           ; 1 bytes @ 0x3
   599                           
   600     0050                     ??_LCD_set_cgram_addr:	
   601                           ; 1 bytes @ 0x3
   602                           
   603     0050                     LCD_set_cgram_addr@addr:	
   604                           ; 1 bytes @ 0x3
   605                           
   606     0050                     LCD_gotoxy@y:	
   607                           ; 1 bytes @ 0x3
   608                           
   609     0050                     LCD_putc@chr:	
   610                           ; 1 bytes @ 0x3
   611                           
   612     0050                     ___eecpymem@to:	
   613                           ; 1 bytes @ 0x3
   614                           
   615                           
   616                           ; 1 bytes @ 0x3
   617     0050                     	ds	1
   618     0051                     ??_LCD_gotoxy:
   619     0051                     ?_LCD_puts:	
   620                           ; 1 bytes @ 0x4
   621                           
   622     0051                     ??___eetoc:	
   623                           ; 1 bytes @ 0x4
   624                           
   625     0051                     ___eetoc@addr:	
   626                           ; 1 bytes @ 0x4
   627                           
   628     0051                     LCD_puts@str:	
   629                           ; 1 bytes @ 0x4
   630                           
   631                           
   632                           ; 2 bytes @ 0x4
   633     0051                     	ds	1
   634     0052                     LCD_gotoxy@x:
   635     0052                     LCD_init@i:	
   636                           ; 1 bytes @ 0x5
   637                           
   638     0052                     ___eetoc@data:	
   639                           ; 1 bytes @ 0x5
   640                           
   641                           
   642                           ; 1 bytes @ 0x5
   643     0052                     	ds	1
   644     0053                     ?_LCD_wr_custom_char:
   645     0053                     ??_LCD_puts:	
   646                           ; 1 bytes @ 0x6
   647                           
   648     0053                     ??_rand_tile:	
   649                           ; 1 bytes @ 0x6
   650                           
   651     0053                     rand_tile@res:	
   652                           ; 1 bytes @ 0x6
   653                           
   654     0053                     LCD_wr_custom_char@dataarr:	
   655                           ; 1 bytes @ 0x6
   656                           
   657                           
   658                           ; 1 bytes @ 0x6
   659     0053                     	ds	1
   660     0054                     ??_LCD_wr_custom_char:
   661                           
   662                           ; 1 bytes @ 0x7
   663     0054                     	ds	1
   664     0055                     LCD_wr_custom_char@code:
   665                           
   666                           ; 1 bytes @ 0x8
   667     0055                     	ds	1
   668     0056                     LCD_wr_custom_char@cnt:
   669                           
   670                           ; 1 bytes @ 0x9
   671     0056                     	ds	1
   672     0057                     ??_main:
   673                           
   674                           ; 1 bytes @ 0xA
   675     0057                     	ds	3
   676     005A                     main@_key:
   677                           
   678                           ; 1 bytes @ 0xD
   679     005A                     	ds	1
   680     005B                     main@xpos:
   681                           
   682                           ; 1 bytes @ 0xE
   683     005B                     	ds	1
   684     005C                     main@hits:
   685                           
   686                           ; 1 bytes @ 0xF
   687     005C                     	ds	1
   688     005D                     main@ypos:
   689                           
   690                           ; 1 bytes @ 0x10
   691     005D                     	ds	1
   692     005E                     main@i:
   693                           
   694                           ; 1 bytes @ 0x11
   695     005E                     	ds	1
   696                           
   697                           	psect	maintext
   698     001D                     __pmaintext:	
   699 ;;
   700 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   701 ;;
   702 ;; *************** function _main *****************
   703 ;; Defined at:
   704 ;;		line 103 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  _key            1   13[BANK0 ] unsigned char 
   709 ;;  ypos            1   16[BANK0 ] unsigned char 
   710 ;;  hits            1   15[BANK0 ] struct .
   711 ;;  xpos            1   14[BANK0 ] unsigned char 
   712 ;;  i               1   17[BANK0 ] unsigned char 
   713 ;; Return value:  Size  Location     Type
   714 ;;                  1    wreg      void 
   715 ;; Registers used:
   716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   717 ;; Tracked objects:
   718 ;;		On entry : B00/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   722 ;;      Params:         0       0       0       0
   723 ;;      Locals:         0       5       0       0
   724 ;;      Temps:          0       3       0       0
   725 ;;      Totals:         0       8       0       0
   726 ;;Total ram usage:        8 bytes
   727 ;; Hardware stack levels required when called: 6
   728 ;; This function calls:
   729 ;;		_LCD_gotoxy
   730 ;;		_LCD_init
   731 ;;		_LCD_putc
   732 ;;		_LCD_puts
   733 ;;		_LCD_wr_custom_char
   734 ;;		_LCD_wrdata
   735 ;;		___eetoc
   736 ;;		__beep
   737 ;;		_clearstr
   738 ;;		_init
   739 ;;		_rand_tile
   740 ;; This function is called by:
   741 ;;		Startup code after reset
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745     001D                     _main:	
   746                           ;psect for function _main
   747                           
   748                           
   749                           ;main.c: 106: init();
   750                           
   751                           ;incstack = 0
   752                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   753     001D  2377               	fcall	_init
   754                           
   755                           ;main.c: 108: uint8_t i = 16 - 1;
   756     001E  300F               	movlw	15
   757     001F  00DE               	movwf	main@i
   758     0020                     l1549:
   759                           
   760                           ;main.c: 110: keys[i] = eeprom_keys[i];
   761     0020  085E               	movf	main@i,w
   762     0021  3E30               	addlw	low _eeprom_keys
   763     0022  23D3               	fcall	___eetoc
   764     0023  00FF               	movwf	127
   765     0024  085E               	movf	main@i,w
   766     0025  3E20               	addlw	(low (_keys| 0))& (0+255)
   767     0026  0084               	movwf	4
   768     0027  087F               	movf	127,w
   769     0028  1383               	bcf	3,7	;select IRP bank0
   770     0029  0080               	movwf	0
   771                           
   772                           ;main.c: 111: gameA_line_buf[i] = ' ';
   773     002A  085E               	movf	main@i,w
   774     002B  3E3C               	addlw	(low (_gameA_line_buf| 0))& (0+255)
   775     002C  0084               	movwf	4
   776     002D  3020               	movlw	32
   777     002E  0080               	movwf	0
   778                           
   779                           ;main.c: 112: } while (i--);
   780     002F  3001               	movlw	1
   781     0030  02DE               	subwf	main@i,f
   782     0031  0A5E               	incf	main@i,w
   783     0032  1D03               	btfss	3,2
   784     0033  2820               	goto	l1549
   785                           
   786                           ;main.c: 113: gameA_line_buf[16] = 0;
   787     0034  01CC               	clrf	_gameA_line_buf+16
   788                           
   789                           ;main.c: 116: LCD_init();
   790     0035  2228               	fcall	_LCD_init
   791                           
   792                           ;main.c: 119: LCD_wr_custom_char(0, eeprom_cgram_data[0]);
   793     0036  3000               	movlw	(low _eeprom_cgram_data)& (0+255)
   794     0037  00D3               	movwf	LCD_wr_custom_char@dataarr
   795     0038  3000               	movlw	0
   796     0039  2316               	fcall	_LCD_wr_custom_char
   797                           
   798                           ;main.c: 120: LCD_wr_custom_char(1, eeprom_cgram_data[1]);
   799     003A  3008               	movlw	(low (_eeprom_cgram_data+8))& (0+255)
   800     003B  00D3               	movwf	LCD_wr_custom_char@dataarr
   801     003C  3001               	movlw	1
   802     003D  2316               	fcall	_LCD_wr_custom_char
   803                           
   804                           ;main.c: 121: LCD_wr_custom_char(2, eeprom_cgram_data[2]);
   805     003E  3010               	movlw	(low (_eeprom_cgram_data+16))& (0+255)
   806     003F  00D3               	movwf	LCD_wr_custom_char@dataarr
   807     0040  3002               	movlw	2
   808     0041  2316               	fcall	_LCD_wr_custom_char
   809                           
   810                           ;main.c: 122: LCD_wr_custom_char(3, eeprom_cgram_data[3]);
   811     0042  3018               	movlw	(low (_eeprom_cgram_data+24))& (0+255)
   812     0043  00D3               	movwf	LCD_wr_custom_char@dataarr
   813     0044  3003               	movlw	3
   814     0045  2316               	fcall	_LCD_wr_custom_char
   815                           
   816                           ;main.c: 123: LCD_wr_custom_char(4, eeprom_cgram_data[4]);
   817     0046  3020               	movlw	(low (_eeprom_cgram_data+32))& (0+255)
   818     0047  00D3               	movwf	LCD_wr_custom_char@dataarr
   819     0048  3004               	movlw	4
   820     0049  2316               	fcall	_LCD_wr_custom_char
   821                           
   822                           ;main.c: 124: LCD_wr_custom_char(5, eeprom_cgram_data[5]);
   823     004A  3028               	movlw	(low (_eeprom_cgram_data+40))& (0+255)
   824     004B  00D3               	movwf	LCD_wr_custom_char@dataarr
   825     004C  3005               	movlw	5
   826     004D  2316               	fcall	_LCD_wr_custom_char
   827                           
   828                           ;main.c: 126: LCD.DisplayControl |= 0b00000100;
   829     004E  1531               	bsf	_LCD+1,2
   830                           
   831                           ;main.c: 127: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.DisplayControl);;
   832     004F  1205               	bcf	5,4	;volatile
   833     0050  0831               	movf	_LCD+1,w
   834     0051  2278               	fcall	_LCD_wrdata
   835                           
   836                           ;main.c: 130: INTCON = 0b10100000;
   837     0052  30A0               	movlw	160
   838     0053  008B               	movwf	11	;volatile
   839     0054                     l1579:
   840                           
   841                           ;main.c: 136: LCD_gotoxy(0, 0);
   842     0054  1283               	bcf	3,5	;RP0=0, select bank0
   843     0055  1303               	bcf	3,6	;RP1=0, select bank0
   844     0056  01D0               	clrf	LCD_gotoxy@y
   845     0057  3000               	movlw	0
   846     0058  23AA               	fcall	_LCD_gotoxy
   847                           
   848                           ;main.c: 137: LCD_puts("Select game!\0");
   849     0059  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   850     005A  00D1               	movwf	LCD_puts@str
   851     005B  3080               	movlw	128
   852     005C  00D2               	movwf	LCD_puts@str+1
   853     005D  2362               	fcall	_LCD_puts
   854                           
   855                           ;main.c: 138: LCD_gotoxy(0, 1);
   856     005E  01D0               	clrf	LCD_gotoxy@y
   857     005F  0AD0               	incf	LCD_gotoxy@y,f
   858     0060  3000               	movlw	0
   859     0061  23AA               	fcall	_LCD_gotoxy
   860                           
   861                           ;main.c: 139: LCD_puts("A / B\0");
   862     0062  300F               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   863     0063  00D1               	movwf	LCD_puts@str
   864     0064  3080               	movlw	128
   865     0065  00D2               	movwf	LCD_puts@str+1
   866     0066  2362               	fcall	_LCD_puts
   867     0067                     l1587:
   868                           
   869                           ;main.c: 143: key = '\0'; while (!key) { };
   870     0067  01BB               	clrf	_key
   871     0068                     l1589:
   872     0068  083B               	movf	_key,w
   873     0069  1D03               	btfss	3,2
   874     006A  29AA               	goto	l1739
   875     006B  2868               	goto	l1589
   876     006C                     l101:	
   877                           ;main.c: 145: case 'A':
   878                           
   879                           
   880                           ;main.c: 149: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00000001);; _delay((unsigned lon
      +                          g)((50)*(4000000/4000.0)));;
   881     006C  1205               	bcf	5,4	;volatile
   882     006D  3001               	movlw	1
   883     006E  2278               	fcall	_LCD_wrdata
   884     006F  3041               	movlw	65
   885     0070  1283               	bcf	3,5	;RP0=0, select bank0
   886     0071  1303               	bcf	3,6	;RP1=0, select bank0
   887     0072  00D8               	movwf	??_main+1
   888     0073  30EE               	movlw	238
   889     0074  00D7               	movwf	??_main
   890     0075                     u917:
   891     0075  0BD7               	decfsz	??_main,f
   892     0076  2875               	goto	u917
   893     0077  0BD8               	decfsz	??_main+1,f
   894     0078  2875               	goto	u917
   895                           
   896                           ;main.c: 150: LCD.DisplayControl |= 0b00000001;
   897     0079  1283               	bcf	3,5	;RP0=0, select bank0
   898     007A  1303               	bcf	3,6	;RP1=0, select bank0
   899     007B  1431               	bsf	_LCD+1,0
   900                           
   901                           ;main.c: 151: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.DisplayControl);;
   902     007C  1205               	bcf	5,4	;volatile
   903     007D  0831               	movf	_LCD+1,w
   904     007E  2278               	fcall	_LCD_wrdata
   905                           
   906                           ;main.c: 153: uint8_t xpos = 0, ypos = 0;
   907     007F  01DB               	clrf	main@xpos
   908     0080  01DD               	clrf	main@ypos
   909     0081                     l1605:
   910                           
   911                           ;main.c: 156: key = '\0'; while (!key) { };
   912     0081  01BB               	clrf	_key
   913     0082                     l1607:
   914     0082  083B               	movf	_key,w
   915     0083  1D03               	btfss	3,2
   916     0084  28C5               	goto	l1637
   917     0085  2882               	goto	l1607
   918     0086                     l1609:
   919                           
   920                           ;main.c: 163: xpos = 0;
   921     0086  01DB               	clrf	main@xpos
   922                           
   923                           ;main.c: 164: if (!ypos) {
   924     0087  085D               	movf	main@ypos,w
   925     0088  1D03               	btfss	3,2
   926     0089  2893               	goto	l110
   927                           
   928                           ;main.c: 165: LCD_gotoxy(0, ++ypos);
   929     008A  3001               	movlw	1
   930     008B  00FF               	movwf	127
   931     008C  087F               	movf	127,w
   932     008D  07DD               	addwf	main@ypos,f
   933     008E  085D               	movf	main@ypos,w
   934     008F  00D0               	movwf	LCD_gotoxy@y
   935     0090  3000               	movlw	0
   936     0091  23AA               	fcall	_LCD_gotoxy
   937                           
   938                           ;main.c: 166: } else {
   939     0092  2881               	goto	l1605
   940     0093                     l110:
   941                           
   942                           ;main.c: 167: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00000001);; _delay((unsigned lon
      +                          g)((50)*(4000000/4000.0)));;
   943     0093  1205               	bcf	5,4	;volatile
   944     0094  3001               	movlw	1
   945     0095  2278               	fcall	_LCD_wrdata
   946     0096  3041               	movlw	65
   947     0097  1283               	bcf	3,5	;RP0=0, select bank0
   948     0098  1303               	bcf	3,6	;RP1=0, select bank0
   949     0099  00D8               	movwf	??_main+1
   950     009A  30EE               	movlw	238
   951     009B  00D7               	movwf	??_main
   952     009C                     u927:
   953     009C  0BD7               	decfsz	??_main,f
   954     009D  289C               	goto	u927
   955     009E  0BD8               	decfsz	??_main+1,f
   956     009F  289C               	goto	u927
   957                           
   958                           ;main.c: 169: LCD_gotoxy(0, 0);
   959     00A0  1283               	bcf	3,5	;RP0=0, select bank0
   960     00A1  1303               	bcf	3,6	;RP1=0, select bank0
   961     00A2  01D0               	clrf	LCD_gotoxy@y
   962     00A3  3000               	movlw	0
   963     00A4  23AA               	fcall	_LCD_gotoxy
   964                           
   965                           ;main.c: 170: LCD_puts(gameA_line_buf);
   966     00A5  303C               	movlw	(low (_gameA_line_buf| 0))& (0+255)
   967     00A6  00D1               	movwf	LCD_puts@str
   968     00A7  3000               	movlw	0
   969     00A8  00D2               	movwf	LCD_puts@str+1
   970     00A9  2362               	fcall	_LCD_puts
   971                           
   972                           ;main.c: 171: LCD_gotoxy(0, 1);
   973     00AA  01D0               	clrf	LCD_gotoxy@y
   974     00AB  0AD0               	incf	LCD_gotoxy@y,f
   975     00AC  3000               	movlw	0
   976     00AD  23AA               	fcall	_LCD_gotoxy
   977                           
   978                           ;main.c: 173: clearstr(gameA_line_buf);
   979     00AE  303C               	movlw	(low (_gameA_line_buf| 0))& (0+255)
   980     00AF  238B               	fcall	_clearstr
   981     00B0  2881               	goto	l1605
   982     00B1                     l1627:
   983                           
   984                           ;main.c: 177: if (xpos < (16 - 1)) {
   985     00B1  300F               	movlw	15
   986     00B2  025B               	subwf	main@xpos,w
   987     00B3  1803               	skipnc
   988     00B4  2881               	goto	l1605
   989                           
   990                           ;main.c: 178: LCD_putc(key);
   991     00B5  083B               	movf	_key,w
   992     00B6  23EA               	fcall	_LCD_putc
   993                           
   994                           ;main.c: 180: if (ypos) {
   995     00B7  085D               	movf	main@ypos,w
   996     00B8  1903               	btfsc	3,2
   997     00B9  28C0               	goto	l1635
   998                           
   999                           ;main.c: 181: gameA_line_buf[xpos] = key;
  1000     00BA  085B               	movf	main@xpos,w
  1001     00BB  3E3C               	addlw	(low (_gameA_line_buf| 0))& (0+255)
  1002     00BC  0084               	movwf	4
  1003     00BD  083B               	movf	_key,w
  1004     00BE  1383               	bcf	3,7	;select IRP bank0
  1005     00BF  0080               	movwf	0
  1006     00C0                     l1635:
  1007                           
  1008                           ;main.c: 182: };main.c: 184: xpos++;
  1009     00C0  3001               	movlw	1
  1010     00C1  00FF               	movwf	127
  1011     00C2  087F               	movf	127,w
  1012     00C3  07DB               	addwf	main@xpos,f
  1013     00C4  2881               	goto	l1605
  1014     00C5                     l1637:
  1015     00C5  083B               	movf	_key,w
  1016                           
  1017                           ; Switch size 1, requested type "simple"
  1018                           ; Number of cases is 2, Range of values is 35 to 42
  1019                           ; switch strategies available:
  1020                           ; Name         Instructions Cycles
  1021                           ; simple_byte            7     4 (average)
  1022                           ; direct_byte           17     9 (fixed)
  1023                           ; jumptable            263     9 (fixed)
  1024                           ;	Chosen strategy is simple_byte
  1025     00C6  3A23               	xorlw	35	; case 35
  1026     00C7  1903               	skipnz
  1027     00C8  2886               	goto	l1609
  1028     00C9  3A09               	xorlw	9	; case 42
  1029     00CA  1903               	skipnz
  1030     00CB  29B2               	goto	l1741
  1031     00CC  28B1               	goto	l1627
  1032     00CD                     l1639:
  1033                           
  1034                           ;main.c: 193: key = '\0';
  1035     00CD  01BB               	clrf	_key
  1036                           
  1037                           ;main.c: 195: i = 16 - 1;
  1038     00CE  300F               	movlw	15
  1039     00CF  00DE               	movwf	main@i
  1040     00D0                     l1643:
  1041                           
  1042                           ;main.c: 197: gameB_track[0][i] = ' ';
  1043     00D0  085E               	movf	main@i,w
  1044     00D1  3EA0               	addlw	(low (_gameB_track| 0))& (0+255)
  1045     00D2  0084               	movwf	4
  1046     00D3  3020               	movlw	32
  1047     00D4  1383               	bcf	3,7	;select IRP bank1
  1048     00D5  0080               	movwf	0
  1049                           
  1050                           ;main.c: 198: gameB_track[1][i] = ' ';
  1051     00D6  085E               	movf	main@i,w
  1052     00D7  3EB1               	addlw	(low ((_gameB_track| 0+17)))& (0+255)
  1053     00D8  0084               	movwf	4
  1054     00D9  3020               	movlw	32
  1055     00DA  0080               	movwf	0
  1056                           
  1057                           ;main.c: 199: } while (i--);
  1058     00DB  3001               	movlw	1
  1059     00DC  02DE               	subwf	main@i,f
  1060     00DD  0A5E               	incf	main@i,w
  1061     00DE  1D03               	btfss	3,2
  1062     00DF  28D0               	goto	l1643
  1063                           
  1064                           ;main.c: 201: gameB_track[0][16] = '\0';
  1065     00E0  1683               	bsf	3,5	;RP0=1, select bank1
  1066     00E1  01B0               	clrf	(_gameB_track^(0+128)+16)
  1067                           
  1068                           ;main.c: 202: gameB_track[1][16] = '\0';
  1069     00E2  01C1               	clrf	(_gameB_track^(0+128)+33)
  1070                           
  1071                           ;main.c: 204: gameB_spd = 40;
  1072     00E3  3028               	movlw	40
  1073     00E4  1283               	bcf	3,5	;RP0=0, select bank0
  1074     00E5  00BA               	movwf	_gameB_spd
  1075                           
  1076                           ;main.c: 205: gameB_difficulty = 14;
  1077     00E6  300E               	movlw	14
  1078     00E7  00B6               	movwf	_gameB_difficulty
  1079                           
  1080                           ;main.c: 207: union {;main.c: 208: struct {;main.c: 209: unsigned trashbin: 1;;main.c: 2
      +                          10: unsigned obstacle: 1;;main.c: 211: };;main.c: 212: uint8_t bval;;main.c: 213: } hits
      +                          ;;main.c: 215: gameB_cnt_ena = 1;
  1081     00E8  01B4               	clrf	_gameB_cnt_ena
  1082     00E9  0AB4               	incf	_gameB_cnt_ena,f
  1083     00EA                     l123:	
  1084                           ;main.c: 220: redraw:
  1085                           
  1086                           
  1087                           ;main.c: 223: hits.bval = 0;
  1088     00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1089     00EB  01DC               	clrf	main@hits
  1090                           
  1091                           ;main.c: 224: i = 2;
  1092     00EC  3002               	movlw	2
  1093     00ED  00DE               	movwf	main@i
  1094     00EE  2901               	goto	l1659
  1095     00EF                     l128:	
  1096                           ;main.c: 229: case 3:
  1097                           
  1098                           
  1099                           ;main.c: 230: hits.trashbin = 1;
  1100     00EF  145C               	bsf	main@hits,0
  1101                           
  1102                           ;main.c: 231: break;
  1103     00F0  28F2               	goto	l1661
  1104     00F1                     l129:	
  1105                           ;main.c: 232: default:
  1106                           
  1107                           
  1108                           ;main.c: 233: hits.obstacle = 1;
  1109     00F1  14DC               	bsf	main@hits,1
  1110     00F2                     l1661:	
  1111                           ;main.c: 234: }
  1112                           
  1113                           
  1114                           ;main.c: 236: gameB_track[gameB_truckpos][i] = ' ';
  1115     00F2  0E38               	swapf	_gameB_truckpos,w
  1116     00F3  39F0               	andlw	240
  1117     00F4  0738               	addwf	_gameB_truckpos,w
  1118     00F5  3EA0               	addlw	(low (_gameB_track| 0))& (0+255)
  1119     00F6  075E               	addwf	main@i,w
  1120     00F7  00D7               	movwf	??_main
  1121     00F8  0857               	movf	??_main,w
  1122     00F9  0084               	movwf	4
  1123     00FA  3020               	movlw	32
  1124     00FB  0080               	movwf	0
  1125                           
  1126                           ;main.c: 237: } while (i--);
  1127     00FC  3001               	movlw	1
  1128     00FD  02DE               	subwf	main@i,f
  1129     00FE  0A5E               	incf	main@i,w
  1130     00FF  1903               	btfsc	3,2
  1131     0100  2913               	goto	l130
  1132     0101                     l1659:
  1133     0101  0E38               	swapf	_gameB_truckpos,w
  1134     0102  39F0               	andlw	240
  1135     0103  0738               	addwf	_gameB_truckpos,w
  1136     0104  3EA0               	addlw	(low (_gameB_track| 0))& (0+255)
  1137     0105  075E               	addwf	main@i,w
  1138     0106  00D7               	movwf	??_main
  1139     0107  0857               	movf	??_main,w
  1140     0108  0084               	movwf	4
  1141     0109  1383               	bcf	3,7	;select IRP bank1
  1142     010A  0800               	movf	0,w
  1143                           
  1144                           ; Switch size 1, requested type "simple"
  1145                           ; Number of cases is 2, Range of values is 3 to 32
  1146                           ; switch strategies available:
  1147                           ; Name         Instructions Cycles
  1148                           ; simple_byte            7     4 (average)
  1149                           ; direct_byte           39     9 (fixed)
  1150                           ; jumptable            263     9 (fixed)
  1151                           ;	Chosen strategy is simple_byte
  1152     010B  3A03               	xorlw	3	; case 3
  1153     010C  1903               	skipnz
  1154     010D  28EF               	goto	l128
  1155     010E  3A23               	xorlw	35	; case 32
  1156     010F  1903               	skipnz
  1157     0110  28F2               	goto	l1661
  1158     0111  28F1               	goto	l129
  1159     0112  28F2               	goto	l1661
  1160     0113                     l130:
  1161                           
  1162                           ;main.c: 239: if (hits.obstacle) {
  1163     0113  1CDC               	btfss	main@hits,1
  1164     0114  293A               	goto	l131
  1165                           
  1166                           ;main.c: 242: _beep(240, 120);
  1167     0115  3078               	movlw	120
  1168     0116  00CD               	movwf	__beep@CCPR1L_val
  1169     0117  30F0               	movlw	240
  1170     0118  23B9               	fcall	__beep
  1171                           
  1172                           ;main.c: 243: flash_lcd = 1;
  1173     0119  01B5               	clrf	_flash_lcd
  1174     011A  0AB5               	incf	_flash_lcd,f
  1175                           
  1176                           ;main.c: 244: gameB_cnt_ena = 0;
  1177     011B  01B4               	clrf	_gameB_cnt_ena
  1178                           
  1179                           ;main.c: 245: _delay((unsigned long)((800)*(4000000/4000.0)));
  1180     011C  3005               	movlw	5
  1181     011D  1283               	bcf	3,5	;RP0=0, select bank0
  1182     011E  1303               	bcf	3,6	;RP1=0, select bank0
  1183     011F  00D9               	movwf	??_main+2
  1184     0120  300F               	movlw	15
  1185     0121  00D8               	movwf	??_main+1
  1186     0122  30F0               	movlw	240
  1187     0123  00D7               	movwf	??_main
  1188     0124                     u937:
  1189     0124  0BD7               	decfsz	??_main,f
  1190     0125  2924               	goto	u937
  1191     0126  0BD8               	decfsz	??_main+1,f
  1192     0127  2924               	goto	u937
  1193     0128  0BD9               	decfsz	??_main+2,f
  1194     0129  2924               	goto	u937
  1195     012A  292B               	nop2
  1196                           
  1197                           ;main.c: 246: gameB_cnt_ena = 1;
  1198     012B  1283               	bcf	3,5	;RP0=0, select bank0
  1199     012C  1303               	bcf	3,6	;RP1=0, select bank0
  1200     012D  01B4               	clrf	_gameB_cnt_ena
  1201     012E  0AB4               	incf	_gameB_cnt_ena,f
  1202                           
  1203                           ;main.c: 247: flash_lcd = 0;
  1204     012F  01B5               	clrf	_flash_lcd
  1205                           
  1206                           ;main.c: 248: PORTBbits.RB2 = 1;
  1207     0130  1506               	bsf	6,2	;volatile
  1208                           
  1209                           ;main.c: 249: if (gameB_spd < 40) gameB_spd++;
  1210     0131  3028               	movlw	40
  1211     0132  023A               	subwf	_gameB_spd,w
  1212     0133  1803               	skipnc
  1213     0134  294E               	goto	l1693
  1214     0135  3001               	movlw	1
  1215     0136  00FF               	movwf	127
  1216     0137  087F               	movf	127,w
  1217     0138  07BA               	addwf	_gameB_spd,f
  1218     0139  294E               	goto	l1693
  1219     013A                     l131:
  1220     013A  1C5C               	btfss	main@hits,0
  1221     013B  294E               	goto	l1693
  1222                           
  1223                           ;main.c: 251: _beep(60, 30);
  1224     013C  301E               	movlw	30
  1225     013D  00CD               	movwf	__beep@CCPR1L_val
  1226     013E  303C               	movlw	60
  1227     013F  23B9               	fcall	__beep
  1228                           
  1229                           ;main.c: 252: gameB_difficulty -= 2;
  1230     0140  3002               	movlw	2
  1231     0141  02B6               	subwf	_gameB_difficulty,f
  1232                           
  1233                           ;main.c: 253: if (gameB_difficulty == 6) {
  1234     0142  3006               	movlw	6
  1235     0143  0636               	xorwf	_gameB_difficulty,w
  1236     0144  1D03               	btfss	3,2
  1237     0145  294E               	goto	l1693
  1238                           
  1239                           ;main.c: 254: gameB_difficulty = 14;
  1240     0146  300E               	movlw	14
  1241     0147  00B6               	movwf	_gameB_difficulty
  1242                           
  1243                           ;main.c: 255: if (gameB_spd > 20) gameB_spd--;
  1244     0148  3015               	movlw	21
  1245     0149  023A               	subwf	_gameB_spd,w
  1246     014A  1C03               	skipc
  1247     014B  294E               	goto	l1693
  1248     014C  3001               	movlw	1
  1249     014D  02BA               	subwf	_gameB_spd,f
  1250     014E                     l1693:
  1251                           
  1252                           ;main.c: 256: };main.c: 257: };main.c: 260: LCD_gotoxy(0, 0);
  1253     014E  01D0               	clrf	LCD_gotoxy@y
  1254     014F  3000               	movlw	0
  1255     0150  23AA               	fcall	_LCD_gotoxy
  1256                           
  1257                           ;main.c: 261: LCD_puts(gameB_track[0]);
  1258     0151  30A0               	movlw	(low (_gameB_track| 0))& (0+255)
  1259     0152  00D1               	movwf	LCD_puts@str
  1260     0153  3000               	movlw	0
  1261     0154  00D2               	movwf	LCD_puts@str+1
  1262     0155  2362               	fcall	_LCD_puts
  1263                           
  1264                           ;main.c: 262: LCD_gotoxy(0, 1);
  1265     0156  01D0               	clrf	LCD_gotoxy@y
  1266     0157  0AD0               	incf	LCD_gotoxy@y,f
  1267     0158  3000               	movlw	0
  1268     0159  23AA               	fcall	_LCD_gotoxy
  1269                           
  1270                           ;main.c: 263: LCD_puts(gameB_track[1]);
  1271     015A  30B1               	movlw	(low ((_gameB_track| 0+17)))& (0+255)
  1272     015B  00D1               	movwf	LCD_puts@str
  1273     015C  3000               	movlw	0
  1274     015D  00D2               	movwf	LCD_puts@str+1
  1275     015E  2362               	fcall	_LCD_puts
  1276                           
  1277                           ;main.c: 265: LCD_gotoxy(0, gameB_truckpos);
  1278     015F  0838               	movf	_gameB_truckpos,w
  1279     0160  00D0               	movwf	LCD_gotoxy@y
  1280     0161  3000               	movlw	0
  1281     0162  23AA               	fcall	_LCD_gotoxy
  1282                           
  1283                           ;main.c: 266: LCD_putc(0);
  1284     0163  3000               	movlw	0
  1285     0164  23EA               	fcall	_LCD_putc
  1286                           
  1287                           ;main.c: 267: LCD_putc(1);
  1288     0165  3001               	movlw	1
  1289     0166  23EA               	fcall	_LCD_putc
  1290                           
  1291                           ;main.c: 268: LCD_putc(2);
  1292     0167  3002               	movlw	2
  1293     0168  23EA               	fcall	_LCD_putc
  1294     0169                     l137:	
  1295                           ;main.c: 270: do {
  1296                           
  1297                           
  1298                           ;main.c: 271: if (key) {
  1299     0169  083B               	movf	_key,w
  1300     016A  1903               	btfsc	3,2
  1301     016B  2980               	goto	l1719
  1302                           
  1303                           ;main.c: 272: uint8_t _key = key;
  1304     016C  083B               	movf	_key,w
  1305     016D  00DA               	movwf	main@_key
  1306                           
  1307                           ;main.c: 273: key = '\0';
  1308     016E  01BB               	clrf	_key
  1309                           
  1310                           ;main.c: 275: switch(_key) {
  1311     016F  2975               	goto	l1717
  1312     0170                     l1713:
  1313                           
  1314                           ;main.c: 280: gameB_truckpos = 0;
  1315     0170  01B8               	clrf	_gameB_truckpos
  1316                           
  1317                           ;main.c: 281: goto redraw;
  1318     0171  28EA               	goto	l123
  1319     0172                     l142:	
  1320                           ;main.c: 283: case 'B':
  1321                           
  1322                           
  1323                           ;main.c: 284: gameB_truckpos = 1;
  1324     0172  01B8               	clrf	_gameB_truckpos
  1325     0173  0AB8               	incf	_gameB_truckpos,f
  1326                           
  1327                           ;main.c: 285: goto redraw;
  1328     0174  28EA               	goto	l123
  1329     0175                     l1717:
  1330     0175  085A               	movf	main@_key,w
  1331                           
  1332                           ; Switch size 1, requested type "simple"
  1333                           ; Number of cases is 3, Range of values is 42 to 66
  1334                           ; switch strategies available:
  1335                           ; Name         Instructions Cycles
  1336                           ; simple_byte           10     6 (average)
  1337                           ; direct_byte           34     9 (fixed)
  1338                           ; jumptable            263     9 (fixed)
  1339                           ;	Chosen strategy is simple_byte
  1340     0176  3A2A               	xorlw	42	; case 42
  1341     0177  1903               	skipnz
  1342     0178  29B2               	goto	l1741
  1343     0179  3A6B               	xorlw	107	; case 65
  1344     017A  1903               	skipnz
  1345     017B  2970               	goto	l1713
  1346     017C  3A03               	xorlw	3	; case 66
  1347     017D  1903               	skipnz
  1348     017E  2972               	goto	l142
  1349     017F  2980               	goto	l1719
  1350     0180                     l1719:
  1351                           
  1352                           ;main.c: 287: };main.c: 288: } while (gameB_spd_cnt);
  1353     0180  0839               	movf	_gameB_spd_cnt,w
  1354     0181  1D03               	btfss	3,2
  1355     0182  2969               	goto	l137
  1356                           
  1357                           ;main.c: 290: gameB_spd_cnt = gameB_spd;
  1358     0183  083A               	movf	_gameB_spd,w
  1359     0184  00B9               	movwf	_gameB_spd_cnt
  1360                           
  1361                           ;main.c: 293: for (i = 0; i < 15; i++) {
  1362     0185  01DE               	clrf	main@i
  1363     0186                     l1729:
  1364                           
  1365                           ;main.c: 294: gameB_track[0][i] = gameB_track[0][i + 1];
  1366     0186  085E               	movf	main@i,w
  1367     0187  3EA1               	addlw	(low ((_gameB_track| 0+1)))& (0+255)
  1368     0188  0084               	movwf	4
  1369     0189  1383               	bcf	3,7	;select IRP bank1
  1370     018A  0800               	movf	0,w
  1371     018B  00FF               	movwf	127
  1372     018C  085E               	movf	main@i,w
  1373     018D  3EA0               	addlw	(low (_gameB_track| 0))& (0+255)
  1374     018E  0084               	movwf	4
  1375     018F  087F               	movf	127,w
  1376     0190  0080               	movwf	0
  1377                           
  1378                           ;main.c: 295: gameB_track[1][i] = gameB_track[1][i + 1];
  1379     0191  085E               	movf	main@i,w
  1380     0192  3EB2               	addlw	(low ((_gameB_track| 0+18)))& (0+255)
  1381     0193  0084               	movwf	4
  1382     0194  0800               	movf	0,w
  1383     0195  00FF               	movwf	127
  1384     0196  085E               	movf	main@i,w
  1385     0197  3EB1               	addlw	(low ((_gameB_track| 0+17)))& (0+255)
  1386     0198  0084               	movwf	4
  1387     0199  087F               	movf	127,w
  1388     019A  0080               	movwf	0
  1389     019B  3001               	movlw	1
  1390     019C  00FF               	movwf	127
  1391     019D  087F               	movf	127,w
  1392     019E  07DE               	addwf	main@i,f
  1393     019F  300F               	movlw	15
  1394     01A0  025E               	subwf	main@i,w
  1395     01A1  1C03               	skipc
  1396     01A2  2986               	goto	l1729
  1397                           
  1398                           ;main.c: 296: };main.c: 299: gameB_track[0][15] = rand_tile();
  1399     01A3  2331               	fcall	_rand_tile
  1400     01A4  1683               	bsf	3,5	;RP0=1, select bank1
  1401     01A5  00AF               	movwf	(_gameB_track^(0+128)+15)
  1402                           
  1403                           ;main.c: 300: gameB_track[1][15] = rand_tile();
  1404     01A6  2331               	fcall	_rand_tile
  1405     01A7  1683               	bsf	3,5	;RP0=1, select bank1
  1406     01A8  00C0               	movwf	(_gameB_track^(0+128)+32)
  1407     01A9  28EA               	goto	l123
  1408     01AA                     l1739:
  1409     01AA  083B               	movf	_key,w
  1410                           
  1411                           ; Switch size 1, requested type "simple"
  1412                           ; Number of cases is 2, Range of values is 65 to 66
  1413                           ; switch strategies available:
  1414                           ; Name         Instructions Cycles
  1415                           ; simple_byte            7     4 (average)
  1416                           ; direct_byte           11     9 (fixed)
  1417                           ; jumptable            263     9 (fixed)
  1418                           ;	Chosen strategy is simple_byte
  1419     01AB  3A41               	xorlw	65	; case 65
  1420     01AC  1903               	skipnz
  1421     01AD  286C               	goto	l101
  1422     01AE  3A03               	xorlw	3	; case 66
  1423     01AF  1903               	skipnz
  1424     01B0  28CD               	goto	l1639
  1425     01B1  2867               	goto	l1587
  1426     01B2                     l1741:
  1427                           
  1428                           ;main.c: 312: LCD.DisplayControl &= 0b11111101 & 0b11111110;
  1429     01B2  30FC               	movlw	252
  1430     01B3  00FF               	movwf	127
  1431     01B4  087F               	movf	127,w
  1432     01B5  05B1               	andwf	_LCD+1,f
  1433                           
  1434                           ;main.c: 313: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.DisplayControl);;
  1435     01B6  1205               	bcf	5,4	;volatile
  1436     01B7  0831               	movf	_LCD+1,w
  1437     01B8  2278               	fcall	_LCD_wrdata
  1438                           
  1439                           ;main.c: 315: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00000001);; _delay((unsigned lon
      +                          g)((50)*(4000000/4000.0)));;
  1440     01B9  1205               	bcf	5,4	;volatile
  1441     01BA  3001               	movlw	1
  1442     01BB  2278               	fcall	_LCD_wrdata
  1443     01BC  3041               	movlw	65
  1444     01BD  1283               	bcf	3,5	;RP0=0, select bank0
  1445     01BE  1303               	bcf	3,6	;RP1=0, select bank0
  1446     01BF  00D8               	movwf	??_main+1
  1447     01C0  30EE               	movlw	238
  1448     01C1  00D7               	movwf	??_main
  1449     01C2                     u947:
  1450     01C2  0BD7               	decfsz	??_main,f
  1451     01C3  29C2               	goto	u947
  1452     01C4  0BD8               	decfsz	??_main+1,f
  1453     01C5  29C2               	goto	u947
  1454     01C6  2854               	goto	l1579
  1455     01C7                     __end_of_main:
  1456                           
  1457                           	psect	text1
  1458     0331                     __ptext1:	
  1459 ;; *************** function _rand_tile *****************
  1460 ;; Defined at:
  1461 ;;		line 409 in file "main.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  res             1    6[BANK0 ] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      unsigned char 
  1468 ;; Registers used:
  1469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 200/0
  1472 ;;		On exit  : 300/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1475 ;;      Params:         0       0       0       0
  1476 ;;      Locals:         0       1       0       0
  1477 ;;      Temps:          0       0       0       0
  1478 ;;      Totals:         0       1       0       0
  1479 ;;Total ram usage:        1 bytes
  1480 ;; Hardware stack levels used: 1
  1481 ;; Hardware stack levels required when called: 4
  1482 ;; This function calls:
  1483 ;;		___eetoc
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489     0331                     _rand_tile:	
  1490                           ;psect for function _rand_tile
  1491                           
  1492                           
  1493                           ;main.c: 411: static uint8_t psrand_seed;;main.c: 412: uint8_t res = (TMR0 ^ TMR2 + psra
      +                          nd_seed) & 0x07;
  1494                           
  1495                           ;incstack = 0
  1496                           ; Regs used in _rand_tile: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1497     0331  1283               	bcf	3,5	;RP0=0, select bank0
  1498     0332  0832               	movf	rand_tile@psrand_seed,w
  1499     0333  0711               	addwf	17,w	;volatile
  1500     0334  0601               	xorwf	1,w	;volatile
  1501     0335  3907               	andlw	7
  1502     0336  00D3               	movwf	rand_tile@res
  1503                           
  1504                           ;main.c: 414: psrand_seed = res;
  1505     0337  0853               	movf	rand_tile@res,w
  1506     0338  00B2               	movwf	rand_tile@psrand_seed
  1507                           
  1508                           ;main.c: 416: if (gameB_obstacle_delay) {
  1509     0339  0837               	movf	_gameB_obstacle_delay,w
  1510     033A  1903               	btfsc	3,2
  1511     033B  2B40               	goto	l1515
  1512                           
  1513                           ;main.c: 417: gameB_obstacle_delay--;
  1514     033C  3001               	movlw	1
  1515     033D  02B7               	subwf	_gameB_obstacle_delay,f
  1516                           
  1517                           ;main.c: 418: return ' ';
  1518     033E  3020               	movlw	32
  1519     033F  0008               	return
  1520     0340                     l1515:
  1521                           
  1522                           ;main.c: 419: };main.c: 421: if (res > 1) {
  1523     0340  3002               	movlw	2
  1524     0341  0253               	subwf	rand_tile@res,w
  1525     0342  1C03               	skipc
  1526     0343  2B46               	goto	l1519
  1527                           
  1528                           ;main.c: 422: gameB_obstacle_delay = gameB_difficulty;
  1529     0344  0836               	movf	_gameB_difficulty,w
  1530     0345  00B7               	movwf	_gameB_obstacle_delay
  1531     0346                     l1519:
  1532                           
  1533                           ;main.c: 423: };main.c: 425: return tile_set[res];
  1534     0346  0853               	movf	rand_tile@res,w
  1535     0347  3E41               	addlw	low _tile_set
  1536     0348  23D3               	fcall	___eetoc
  1537     0349  0008               	return
  1538     034A                     __end_of_rand_tile:
  1539                           
  1540                           	psect	text2
  1541     0377                     __ptext2:	
  1542 ;; *************** function _init *****************
  1543 ;; Defined at:
  1544 ;;		line 443 in file "main.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, status,2
  1553 ;; Tracked objects:
  1554 ;;		On entry : B00/0
  1555 ;;		On exit  : B00/0
  1556 ;;		Unchanged: 800/0
  1557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1558 ;;      Params:         0       0       0       0
  1559 ;;      Locals:         0       0       0       0
  1560 ;;      Temps:          0       0       0       0
  1561 ;;      Totals:         0       0       0       0
  1562 ;;Total ram usage:        0 bytes
  1563 ;; Hardware stack levels used: 1
  1564 ;; Hardware stack levels required when called: 2
  1565 ;; This function calls:
  1566 ;;		Nothing
  1567 ;; This function is called by:
  1568 ;;		_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572     0377                     _init:	
  1573                           ;psect for function _init
  1574                           
  1575                           
  1576                           ;main.c: 446: PCONbits.OSCF = 1;
  1577                           
  1578                           ;incstack = 0
  1579                           ; Regs used in _init: [wreg+status,2]
  1580     0377  1683               	bsf	3,5	;RP0=1, select bank1
  1581     0378  158E               	bsf	14,3	;volatile
  1582                           
  1583                           ;main.c: 449: CMCON = 7;
  1584     0379  3007               	movlw	7
  1585     037A  1283               	bcf	3,5	;RP0=0, select bank0
  1586     037B  009F               	movwf	31	;volatile
  1587                           
  1588                           ;main.c: 452: TRISA = 0x0c;
  1589     037C  300C               	movlw	12
  1590     037D  1683               	bsf	3,5	;RP0=1, select bank1
  1591     037E  0085               	movwf	5	;volatile
  1592                           
  1593                           ;main.c: 456: TRISB = 0xf0;
  1594     037F  30F0               	movlw	240
  1595     0380  0086               	movwf	6	;volatile
  1596                           
  1597                           ;main.c: 460: OPTION_REG = 0x85;
  1598     0381  3085               	movlw	133
  1599     0382  0081               	movwf	1	;volatile
  1600                           
  1601                           ;main.c: 465: CCPR1L = 0;
  1602     0383  1283               	bcf	3,5	;RP0=0, select bank0
  1603     0384  0195               	clrf	21	;volatile
  1604                           
  1605                           ;main.c: 466: CCP1CON = 0x0C;
  1606     0385  300C               	movlw	12
  1607     0386  0097               	movwf	23	;volatile
  1608                           
  1609                           ;main.c: 467: T2CON = 0x07;
  1610     0387  3007               	movlw	7
  1611     0388  0092               	movwf	18	;volatile
  1612                           
  1613                           ;main.c: 470: PORTBbits.RB2 = 1;
  1614     0389  1506               	bsf	6,2	;volatile
  1615     038A  0008               	return
  1616     038B                     __end_of_init:
  1617                           
  1618                           	psect	text3
  1619     038B                     __ptext3:	
  1620 ;; *************** function _clearstr *****************
  1621 ;; Defined at:
  1622 ;;		line 433 in file "main.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  str             1    wreg     PTR unsigned char 
  1625 ;;		 -> gameA_line_buf(17), 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  str             1    0[BANK0 ] PTR unsigned char 
  1628 ;;		 -> gameA_line_buf(17), 
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1633 ;; Tracked objects:
  1634 ;;		On entry : 300/0
  1635 ;;		On exit  : B00/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1638 ;;      Params:         0       0       0       0
  1639 ;;      Locals:         0       1       0       0
  1640 ;;      Temps:          0       0       0       0
  1641 ;;      Totals:         0       1       0       0
  1642 ;;Total ram usage:        1 bytes
  1643 ;; Hardware stack levels used: 1
  1644 ;; Hardware stack levels required when called: 2
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_main
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652     038B                     _clearstr:	
  1653                           ;psect for function _clearstr
  1654                           
  1655                           
  1656                           ;incstack = 0
  1657                           ; Regs used in _clearstr: [wreg-fsr0h+status,2+status,0+btemp+1]
  1658                           ;clearstr@str stored from wreg
  1659     038B  00CD               	movwf	clearstr@str
  1660     038C                     l1495:	
  1661                           ;main.c: 434: while (*str) {
  1662                           
  1663     038C  084D               	movf	clearstr@str,w
  1664     038D  0084               	movwf	4
  1665     038E  1383               	bcf	3,7	;select IRP bank0
  1666     038F  0800               	movf	0,w
  1667     0390  1903               	btfsc	3,2
  1668     0391  0008               	return
  1669                           
  1670                           ;main.c: 435: *str = ' ';
  1671     0392  084D               	movf	clearstr@str,w
  1672     0393  0084               	movwf	4
  1673     0394  3020               	movlw	32
  1674     0395  0080               	movwf	0
  1675                           
  1676                           ;main.c: 436: str++;
  1677     0396  3001               	movlw	1
  1678     0397  00FF               	movwf	127
  1679     0398  087F               	movf	127,w
  1680     0399  07CD               	addwf	clearstr@str,f
  1681     039A  2B8C               	goto	l1495
  1682     039B                     __end_of_clearstr:
  1683                           
  1684                           	psect	text4
  1685     03B9                     __ptext4:	
  1686 ;; *************** function __beep *****************
  1687 ;; Defined at:
  1688 ;;		line 392 in file "main.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;  PR2_val         1    wreg     unsigned char 
  1691 ;;  CCPR1L_val      1    0[BANK0 ] unsigned char 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;  PR2_val         1    1[BANK0 ] unsigned char 
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, status,2, status,0
  1698 ;; Tracked objects:
  1699 ;;		On entry : B00/0
  1700 ;;		On exit  : B00/0
  1701 ;;		Unchanged: 800/0
  1702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1703 ;;      Params:         0       1       0       0
  1704 ;;      Locals:         0       1       0       0
  1705 ;;      Temps:          0       0       0       0
  1706 ;;      Totals:         0       2       0       0
  1707 ;;Total ram usage:        2 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; Hardware stack levels required when called: 2
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717     03B9                     __beep:	
  1718                           ;psect for function __beep
  1719                           
  1720                           
  1721                           ;incstack = 0
  1722                           ; Regs used in __beep: [wreg+status,2+status,0]
  1723                           ;__beep@PR2_val stored from wreg
  1724     03B9  00CE               	movwf	__beep@PR2_val
  1725                           
  1726                           ;main.c: 395: if (CCPR1L) return;
  1727     03BA  0815               	movf	21,w	;volatile
  1728     03BB  1D03               	btfss	3,2
  1729     03BC  0008               	return
  1730                           
  1731                           ;main.c: 398: beep_delay = 6;
  1732     03BD  3006               	movlw	6
  1733     03BE  00FD               	movwf	_beep_delay
  1734                           
  1735                           ;main.c: 399: PR2 = PR2_val;
  1736     03BF  084E               	movf	__beep@PR2_val,w
  1737     03C0  1683               	bsf	3,5	;RP0=1, select bank1
  1738     03C1  0092               	movwf	18	;volatile
  1739                           
  1740                           ;main.c: 400: CCPR1L = CCPR1L_val;
  1741     03C2  1283               	bcf	3,5	;RP0=0, select bank0
  1742     03C3  084D               	movf	__beep@CCPR1L_val,w
  1743     03C4  0095               	movwf	21	;volatile
  1744     03C5  0008               	return
  1745     03C6                     __end_of__beep:
  1746                           
  1747                           	psect	text5
  1748     0316                     __ptext5:	
  1749 ;; *************** function _LCD_wr_custom_char *****************
  1750 ;; Defined at:
  1751 ;;		line 109 in file "lcd_hd44780.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;  code            1    wreg     unsigned char 
  1754 ;;  dataarr         1    6[BANK0 ] PTR const unsigned char 
  1755 ;;		 -> eeprom_cgram_data(48), 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  code            1    8[BANK0 ] unsigned char 
  1758 ;;  cnt             1    9[BANK0 ] unsigned char 
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1763 ;; Tracked objects:
  1764 ;;		On entry : 300/0
  1765 ;;		On exit  : 300/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1768 ;;      Params:         0       1       0       0
  1769 ;;      Locals:         0       2       0       0
  1770 ;;      Temps:          0       1       0       0
  1771 ;;      Totals:         0       4       0       0
  1772 ;;Total ram usage:        4 bytes
  1773 ;; Hardware stack levels used: 1
  1774 ;; Hardware stack levels required when called: 5
  1775 ;; This function calls:
  1776 ;;		_LCD_putc
  1777 ;;		_LCD_set_cgram_addr
  1778 ;;		___eetoc
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784     0316                     _LCD_wr_custom_char:	
  1785                           ;psect for function _LCD_wr_custom_char
  1786                           
  1787                           
  1788                           ;incstack = 0
  1789                           ; Regs used in _LCD_wr_custom_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1790                           ;LCD_wr_custom_char@code stored from wreg
  1791     0316  00D5               	movwf	LCD_wr_custom_char@code
  1792                           
  1793                           ;lcd_hd44780.c: 110: LCD_set_cgram_addr(code << 3);
  1794     0317  0855               	movf	LCD_wr_custom_char@code,w
  1795     0318  00D4               	movwf	??_LCD_wr_custom_char
  1796     0319  3002               	movlw	2
  1797     031A                     u525:
  1798     031A  1003               	clrc
  1799     031B  0DD4               	rlf	??_LCD_wr_custom_char,f
  1800     031C  3EFF               	addlw	-1
  1801     031D  1D03               	skipz
  1802     031E  2B1A               	goto	u525
  1803     031F  1003               	clrc
  1804     0320  0D54               	rlf	??_LCD_wr_custom_char,w
  1805     0321  23E4               	fcall	_LCD_set_cgram_addr
  1806                           
  1807                           ;lcd_hd44780.c: 112: uint8_t cnt = 7;
  1808     0322  3007               	movlw	7
  1809     0323  00D6               	movwf	LCD_wr_custom_char@cnt
  1810     0324                     l1471:
  1811                           
  1812                           ;lcd_hd44780.c: 114: LCD_putc(*dataarr++);
  1813     0324  0853               	movf	LCD_wr_custom_char@dataarr,w
  1814     0325  23D3               	fcall	___eetoc
  1815     0326  23EA               	fcall	_LCD_putc
  1816     0327  3001               	movlw	1
  1817     0328  00FF               	movwf	127
  1818     0329  087F               	movf	127,w
  1819     032A  07D3               	addwf	LCD_wr_custom_char@dataarr,f
  1820                           
  1821                           ;lcd_hd44780.c: 115: } while (cnt--);
  1822     032B  3001               	movlw	1
  1823     032C  02D6               	subwf	LCD_wr_custom_char@cnt,f
  1824     032D  0A56               	incf	LCD_wr_custom_char@cnt,w
  1825     032E  1903               	btfsc	3,2
  1826     032F  0008               	return
  1827     0330  2B24               	goto	l1471
  1828     0331                     __end_of_LCD_wr_custom_char:
  1829                           
  1830                           	psect	text6
  1831     03D3                     __ptext6:	
  1832 ;; *************** function ___eetoc *****************
  1833 ;; Defined at:
  1834 ;;		line 104 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\pic\__eeprom.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  addr            1    wreg     PTR eeprom void 
  1837 ;;		 -> tile_set(8), eeprom_cgram_data(48), eeprom_keys(17), 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  addr            1    4[BANK0 ] PTR eeprom void 
  1840 ;;		 -> tile_set(8), eeprom_cgram_data(48), eeprom_keys(17), 
  1841 ;;  data            1    5[BANK0 ] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      unsigned char 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 300/0
  1848 ;;		On exit  : 300/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1851 ;;      Params:         0       0       0       0
  1852 ;;      Locals:         0       2       0       0
  1853 ;;      Temps:          0       0       0       0
  1854 ;;      Totals:         0       2       0       0
  1855 ;;Total ram usage:        2 bytes
  1856 ;; Hardware stack levels used: 1
  1857 ;; Hardware stack levels required when called: 3
  1858 ;; This function calls:
  1859 ;;		___eecpymem
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;;		_rand_tile
  1863 ;;		_LCD_wr_custom_char
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867     03D3                     ___eetoc:	
  1868                           ;psect for function ___eetoc
  1869                           
  1870                           
  1871                           ;incstack = 0
  1872                           ; Regs used in ___eetoc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1873                           ;___eetoc@addr stored from wreg
  1874     03D3  00D1               	movwf	___eetoc@addr
  1875                           
  1876                           ;__eeprom.c: 106: unsigned char data;;__eeprom.c: 107: __eecpymem((unsigned char *) &dat
      +                          a,addr,1);
  1877     03D4  0851               	movf	___eetoc@addr,w
  1878     03D5  00CD               	movwf	___eecpymem@from
  1879     03D6  01CE               	clrf	___eecpymem@size
  1880     03D7  0ACE               	incf	___eecpymem@size,f
  1881     03D8  3052               	movlw	(low (___eetoc@data| 0))& (0+255)
  1882     03D9  22A7               	fcall	___eecpymem
  1883                           
  1884                           ;__eeprom.c: 108: return data;
  1885     03DA  0852               	movf	___eetoc@data,w
  1886     03DB  0008               	return
  1887     03DC                     __end_of___eetoc:
  1888                           
  1889                           	psect	text7
  1890     02A7                     __ptext7:	
  1891 ;; *************** function ___eecpymem *****************
  1892 ;; Defined at:
  1893 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\pic\__eeprom.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;  to              1    wreg     PTR volatile unsigned ch
  1896 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1897 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1898 ;;  from            1    0[BANK0 ] PTR eeprom unsigned char
  1899 ;;		 -> tile_set(8), eeprom_cgram_data(48), eeprom_keys(17), 
  1900 ;;  size            1    1[BANK0 ] unsigned char 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  to              1    3[BANK0 ] PTR volatile unsigned ch
  1903 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1904 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1905 ;;  cp              1    2[BANK0 ] PTR volatile unsigned ch
  1906 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  1907 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1912 ;; Tracked objects:
  1913 ;;		On entry : 300/0
  1914 ;;		On exit  : 300/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1917 ;;      Params:         0       2       0       0
  1918 ;;      Locals:         0       2       0       0
  1919 ;;      Temps:          0       0       0       0
  1920 ;;      Totals:         0       4       0       0
  1921 ;;Total ram usage:        4 bytes
  1922 ;; Hardware stack levels used: 1
  1923 ;; Hardware stack levels required when called: 2
  1924 ;; This function calls:
  1925 ;;		Nothing
  1926 ;; This function is called by:
  1927 ;;		___eetoc
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931     02A7                     ___eecpymem:	
  1932                           ;psect for function ___eecpymem
  1933                           
  1934                           
  1935                           ;incstack = 0
  1936                           ; Regs used in ___eecpymem: [wreg-fsr0h+status,2+status,0+btemp+1]
  1937                           ;___eecpymem@to stored from wreg
  1938     02A7  00D0               	movwf	___eecpymem@to
  1939                           
  1940                           ;__eeprom.c: 8: volatile unsigned char *cp = to;
  1941     02A8  0850               	movf	___eecpymem@to,w
  1942     02A9  00CF               	movwf	___eecpymem@cp
  1943     02AA                     l272:	
  1944                           ;__eeprom.c: 10: while (EECON1bits.WR) continue;
  1945                           
  1946     02AA  1683               	bsf	3,5	;RP0=1, select bank1
  1947     02AB  189C               	btfsc	28,1	;volsfr
  1948     02AC  2AAA               	goto	l272
  1949                           
  1950                           ;__eeprom.c: 11: EEADR = (unsigned char)from;
  1951     02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1952     02AE  084D               	movf	___eecpymem@from,w
  1953     02AF  1683               	bsf	3,5	;RP0=1, select bank1
  1954     02B0  009B               	movwf	27	;volatile
  1955     02B1                     l1387:	
  1956                           ;__eeprom.c: 12: while(size--) {
  1957                           
  1958     02B1  3001               	movlw	1
  1959     02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1960     02B3  02CE               	subwf	___eecpymem@size,f
  1961     02B4  0A4E               	incf	___eecpymem@size,w
  1962     02B5  1903               	btfsc	3,2
  1963     02B6  0008               	return
  1964     02B7                     l277:
  1965     02B7  1683               	bsf	3,5	;RP0=1, select bank1
  1966     02B8  189C               	btfsc	28,1	;volsfr
  1967     02B9  2AB7               	goto	l277
  1968                           
  1969                           ;__eeprom.c: 15: EECON1 &= 0x7F;
  1970     02BA  307F               	movlw	127
  1971     02BB  00FF               	movwf	127
  1972     02BC  087F               	movf	127,w
  1973     02BD  059C               	andwf	28,f	;volsfr
  1974                           
  1975                           ;__eeprom.c: 17: EECON1bits.RD = 1;
  1976     02BE  141C               	bsf	28,0	;volsfr
  1977                           
  1978                           ;__eeprom.c: 18: *cp++ = EEDATA;
  1979     02BF  1283               	bcf	3,5	;RP0=0, select bank0
  1980     02C0  084F               	movf	___eecpymem@cp,w
  1981     02C1  0084               	movwf	4
  1982     02C2  1683               	bsf	3,5	;RP0=1, select bank1
  1983     02C3  081A               	movf	26,w	;volatile
  1984     02C4  1383               	bcf	3,7	;select IRP bank0
  1985     02C5  0080               	movwf	0
  1986     02C6  3001               	movlw	1
  1987     02C7  00FF               	movwf	127
  1988     02C8  087F               	movf	127,w
  1989     02C9  1283               	bcf	3,5	;RP0=0, select bank0
  1990     02CA  07CF               	addwf	___eecpymem@cp,f
  1991                           
  1992                           ;__eeprom.c: 19: ++EEADR;
  1993     02CB  3001               	movlw	1
  1994     02CC  00FF               	movwf	127
  1995     02CD  087F               	movf	127,w
  1996     02CE  1683               	bsf	3,5	;RP0=1, select bank1
  1997     02CF  079B               	addwf	27,f	;volatile
  1998     02D0  2AB1               	goto	l1387
  1999     02D1                     __end_of___eecpymem:
  2000                           
  2001                           	psect	text8
  2002     03E4                     __ptext8:	
  2003 ;; *************** function _LCD_set_cgram_addr *****************
  2004 ;; Defined at:
  2005 ;;		line 90 in file "lcd_hd44780.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  addr            1    wreg     unsigned char 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  addr            1    3[BANK0 ] unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 300/0
  2016 ;;		On exit  : 300/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2019 ;;      Params:         0       0       0       0
  2020 ;;      Locals:         0       1       0       0
  2021 ;;      Temps:          0       0       0       0
  2022 ;;      Totals:         0       1       0       0
  2023 ;;Total ram usage:        1 bytes
  2024 ;; Hardware stack levels used: 1
  2025 ;; Hardware stack levels required when called: 4
  2026 ;; This function calls:
  2027 ;;		_LCD_wrdata
  2028 ;; This function is called by:
  2029 ;;		_LCD_wr_custom_char
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033     03E4                     _LCD_set_cgram_addr:	
  2034                           ;psect for function _LCD_set_cgram_addr
  2035                           
  2036                           
  2037                           ;incstack = 0
  2038                           ; Regs used in _LCD_set_cgram_addr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2039                           ;LCD_set_cgram_addr@addr stored from wreg
  2040     03E4  00D0               	movwf	LCD_set_cgram_addr@addr
  2041                           
  2042                           ;lcd_hd44780.c: 91: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b01000000 | addr);;
  2043     03E5  1205               	bcf	5,4	;volatile
  2044     03E6  0850               	movf	LCD_set_cgram_addr@addr,w
  2045     03E7  3840               	iorlw	64
  2046     03E8  2278               	fcall	_LCD_wrdata
  2047     03E9  0008               	return
  2048     03EA                     __end_of_LCD_set_cgram_addr:
  2049                           
  2050                           	psect	text9
  2051     0362                     __ptext9:	
  2052 ;; *************** function _LCD_puts *****************
  2053 ;; Defined at:
  2054 ;;		line 98 in file "lcd_hd44780.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  str             2    4[BANK0 ] PTR const unsigned char 
  2057 ;;		 -> gameB_track(34), STR_2(7), STR_1(14), gameA_line_buf(17), 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2064 ;; Tracked objects:
  2065 ;;		On entry : 300/0
  2066 ;;		On exit  : 300/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2069 ;;      Params:         0       2       0       0
  2070 ;;      Locals:         0       0       0       0
  2071 ;;      Temps:          0       0       0       0
  2072 ;;      Totals:         0       2       0       0
  2073 ;;Total ram usage:        2 bytes
  2074 ;; Hardware stack levels used: 1
  2075 ;; Hardware stack levels required when called: 5
  2076 ;; This function calls:
  2077 ;;		_LCD_putc
  2078 ;; This function is called by:
  2079 ;;		_main
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083     0362                     _LCD_puts:	
  2084                           ;psect for function _LCD_puts
  2085                           
  2086     0362                     l1487:	
  2087                           ;lcd_hd44780.c: 99: while (*str) {
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _LCD_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2091                           
  2092     0362  0852               	movf	LCD_puts@str+1,w
  2093     0363  00FF               	movwf	127
  2094     0364  0851               	movf	LCD_puts@str,w
  2095     0365  0084               	movwf	4
  2096     0366  22D1               	fcall	stringtab
  2097     0367  3A00               	xorlw	0
  2098     0368  1903               	btfsc	3,2
  2099     0369  0008               	return
  2100                           
  2101                           ;lcd_hd44780.c: 100: LCD_putc(*str++);
  2102     036A  0852               	movf	LCD_puts@str+1,w
  2103     036B  00FF               	movwf	127
  2104     036C  0851               	movf	LCD_puts@str,w
  2105     036D  0084               	movwf	4
  2106     036E  22D1               	fcall	stringtab
  2107     036F  23EA               	fcall	_LCD_putc
  2108     0370  3001               	movlw	1
  2109     0371  07D1               	addwf	LCD_puts@str,f
  2110     0372  1803               	skipnc
  2111     0373  0AD2               	incf	LCD_puts@str+1,f
  2112     0374  3000               	movlw	0
  2113     0375  07D2               	addwf	LCD_puts@str+1,f
  2114     0376  2B62               	goto	l1487
  2115     0377                     __end_of_LCD_puts:
  2116                           
  2117                           	psect	text10
  2118     03EA                     __ptext10:	
  2119 ;; *************** function _LCD_putc *****************
  2120 ;; Defined at:
  2121 ;;		line 104 in file "lcd_hd44780.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;  chr             1    wreg     unsigned char 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  chr             1    3[BANK0 ] unsigned char 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 300/0
  2132 ;;		On exit  : 300/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2135 ;;      Params:         0       0       0       0
  2136 ;;      Locals:         0       1       0       0
  2137 ;;      Temps:          0       0       0       0
  2138 ;;      Totals:         0       1       0       0
  2139 ;;Total ram usage:        1 bytes
  2140 ;; Hardware stack levels used: 1
  2141 ;; Hardware stack levels required when called: 4
  2142 ;; This function calls:
  2143 ;;		_LCD_wrdata
  2144 ;; This function is called by:
  2145 ;;		_main
  2146 ;;		_LCD_puts
  2147 ;;		_LCD_wr_custom_char
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151     03EA                     _LCD_putc:	
  2152                           ;psect for function _LCD_putc
  2153                           
  2154                           
  2155                           ;incstack = 0
  2156                           ; Regs used in _LCD_putc: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2157                           ;LCD_putc@chr stored from wreg
  2158     03EA  00D0               	movwf	LCD_putc@chr
  2159                           
  2160                           ;lcd_hd44780.c: 105: PORTAbits.RA4 = 1;
  2161     03EB  1605               	bsf	5,4	;volatile
  2162                           
  2163                           ;lcd_hd44780.c: 106: LCD_wrdata(chr);
  2164     03EC  0850               	movf	LCD_putc@chr,w
  2165     03ED  2278               	fcall	_LCD_wrdata
  2166     03EE  0008               	return
  2167     03EF                     __end_of_LCD_putc:
  2168                           
  2169                           	psect	text11
  2170     0228                     __ptext11:	
  2171 ;; *************** function _LCD_init *****************
  2172 ;; Defined at:
  2173 ;;		line 118 in file "lcd_hd44780.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  i               1    5[BANK0 ] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : B00/0
  2184 ;;		On exit  : 300/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2187 ;;      Params:         0       0       0       0
  2188 ;;      Locals:         0       1       0       0
  2189 ;;      Temps:          0       2       0       0
  2190 ;;      Totals:         0       3       0       0
  2191 ;;Total ram usage:        3 bytes
  2192 ;; Hardware stack levels used: 1
  2193 ;; Hardware stack levels required when called: 4
  2194 ;; This function calls:
  2195 ;;		_LCD_waitbf
  2196 ;;		_LCD_wrdata
  2197 ;; This function is called by:
  2198 ;;		_main
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202     0228                     _LCD_init:	
  2203                           ;psect for function _LCD_init
  2204                           
  2205                           
  2206                           ;lcd_hd44780.c: 120: LCD.DisplayControl = 0b00001000;
  2207                           
  2208                           ;incstack = 0
  2209                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2210     0228  3008               	movlw	8
  2211     0229  00B1               	movwf	_LCD+1
  2212                           
  2213                           ;lcd_hd44780.c: 122: TRISA &= 0xF0;
  2214     022A  30F0               	movlw	240
  2215     022B  00FF               	movwf	127
  2216     022C  087F               	movf	127,w
  2217     022D  1683               	bsf	3,5	;RP0=1, select bank1
  2218     022E  0585               	andwf	5,f	;volatile
  2219                           
  2220                           ;lcd_hd44780.c: 123: PORTAbits.RA4 = 0;
  2221     022F  1283               	bcf	3,5	;RP0=0, select bank0
  2222     0230  1205               	bcf	5,4	;volatile
  2223                           
  2224                           ;lcd_hd44780.c: 125: uint8_t i = 3;
  2225     0231  3003               	movlw	3
  2226     0232  00D2               	movwf	LCD_init@i
  2227     0233                     l1423:
  2228                           
  2229                           ;lcd_hd44780.c: 127: _delay((unsigned long)((50)*(4000000/4000.0)));
  2230     0233  3041               	movlw	65
  2231     0234  1283               	bcf	3,5	;RP0=0, select bank0
  2232     0235  1303               	bcf	3,6	;RP1=0, select bank0
  2233     0236  00D1               	movwf	??_LCD_init+1
  2234     0237  30EE               	movlw	238
  2235     0238  00D0               	movwf	??_LCD_init
  2236     0239                     u957:
  2237     0239  0BD0               	decfsz	??_LCD_init,f
  2238     023A  2A39               	goto	u957
  2239     023B  0BD1               	decfsz	??_LCD_init+1,f
  2240     023C  2A39               	goto	u957
  2241                           
  2242                           ;lcd_hd44780.c: 129: PORTAbits.RA6 = 1;
  2243     023D  1283               	bcf	3,5	;RP0=0, select bank0
  2244     023E  1303               	bcf	3,6	;RP1=0, select bank0
  2245     023F  1705               	bsf	5,6	;volatile
  2246                           
  2247                           ;lcd_hd44780.c: 130: PORTA = (PORTA & 0xf0) | 0x03;
  2248     0240  0805               	movf	5,w	;volatile
  2249     0241  39F0               	andlw	240
  2250     0242  3803               	iorlw	3
  2251     0243  0085               	movwf	5	;volatile
  2252                           
  2253                           ;lcd_hd44780.c: 131: __nop();
  2254     0244  0000               	nop
  2255                           
  2256                           ;lcd_hd44780.c: 132: __nop();
  2257     0245  0000               	nop
  2258                           
  2259                           ;lcd_hd44780.c: 133: PORTAbits.RA6 = 0;
  2260     0246  1283               	bcf	3,5	;RP0=0, select bank0
  2261     0247  1303               	bcf	3,6	;RP1=0, select bank0
  2262     0248  1305               	bcf	5,6	;volatile
  2263                           
  2264                           ;lcd_hd44780.c: 134: } while (i--);
  2265     0249  3001               	movlw	1
  2266     024A  02D2               	subwf	LCD_init@i,f
  2267     024B  0A52               	incf	LCD_init@i,w
  2268     024C  1D03               	btfss	3,2
  2269     024D  2A33               	goto	l1423
  2270                           
  2271                           ;lcd_hd44780.c: 136: __nop();
  2272     024E  0000               	nop
  2273                           
  2274                           ;lcd_hd44780.c: 137: __nop();
  2275     024F  0000               	nop
  2276                           
  2277                           ;lcd_hd44780.c: 140: PORTAbits.RA6 = 1;
  2278     0250  1283               	bcf	3,5	;RP0=0, select bank0
  2279     0251  1303               	bcf	3,6	;RP1=0, select bank0
  2280     0252  1705               	bsf	5,6	;volatile
  2281                           
  2282                           ;lcd_hd44780.c: 141: PORTA = (PORTA & 0xf0) | 0x02;
  2283     0253  0805               	movf	5,w	;volatile
  2284     0254  39F0               	andlw	240
  2285     0255  3802               	iorlw	2
  2286     0256  0085               	movwf	5	;volatile
  2287                           
  2288                           ;lcd_hd44780.c: 142: __nop();
  2289     0257  0000               	nop
  2290                           
  2291                           ;lcd_hd44780.c: 143: __nop();
  2292     0258  0000               	nop
  2293                           
  2294                           ;lcd_hd44780.c: 144: PORTAbits.RA6 = 0;
  2295     0259  1283               	bcf	3,5	;RP0=0, select bank0
  2296     025A  1303               	bcf	3,6	;RP1=0, select bank0
  2297     025B  1305               	bcf	5,6	;volatile
  2298                           
  2299                           ;lcd_hd44780.c: 147: LCD_waitbf();
  2300     025C  22F6               	fcall	_LCD_waitbf
  2301                           
  2302                           ;lcd_hd44780.c: 151: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00100000 | (uint8_t) 0b00
      +                          001000 | 0b00000000);;
  2303     025D  1205               	bcf	5,4	;volatile
  2304     025E  3028               	movlw	40
  2305     025F  2278               	fcall	_LCD_wrdata
  2306                           
  2307                           ;lcd_hd44780.c: 155: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.DisplayControl);;
  2308     0260  1205               	bcf	5,4	;volatile
  2309     0261  0831               	movf	_LCD+1,w
  2310     0262  2278               	fcall	_LCD_wrdata
  2311                           
  2312                           ;lcd_hd44780.c: 156: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b00000001);; _delay((unsig
      +                          ned long)((50)*(4000000/4000.0)));;
  2313     0263  1205               	bcf	5,4	;volatile
  2314     0264  3001               	movlw	1
  2315     0265  2278               	fcall	_LCD_wrdata
  2316     0266  3041               	movlw	65
  2317     0267  1283               	bcf	3,5	;RP0=0, select bank0
  2318     0268  1303               	bcf	3,6	;RP1=0, select bank0
  2319     0269  00D1               	movwf	??_LCD_init+1
  2320     026A  30EE               	movlw	238
  2321     026B  00D0               	movwf	??_LCD_init
  2322     026C                     u967:
  2323     026C  0BD0               	decfsz	??_LCD_init,f
  2324     026D  2A6C               	goto	u967
  2325     026E  0BD1               	decfsz	??_LCD_init+1,f
  2326     026F  2A6C               	goto	u967
  2327                           
  2328                           ;lcd_hd44780.c: 158: LCD.EntryMode = 0b00000100 | 0b00000010;
  2329     0270  3006               	movlw	6
  2330     0271  1283               	bcf	3,5	;RP0=0, select bank0
  2331     0272  1303               	bcf	3,6	;RP1=0, select bank0
  2332     0273  00B0               	movwf	_LCD
  2333                           
  2334                           ;lcd_hd44780.c: 159: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) LCD.EntryMode);;
  2335     0274  1205               	bcf	5,4	;volatile
  2336     0275  0830               	movf	_LCD,w
  2337     0276  2278               	fcall	_LCD_wrdata
  2338     0277  0008               	return
  2339     0278                     __end_of_LCD_init:
  2340                           
  2341                           	psect	text12
  2342     03AA                     __ptext12:	
  2343 ;; *************** function _LCD_gotoxy *****************
  2344 ;; Defined at:
  2345 ;;		line 94 in file "lcd_hd44780.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  x               1    wreg     unsigned char 
  2348 ;;  y               1    3[BANK0 ] unsigned char 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  x               1    5[BANK0 ] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 300/0
  2357 ;;		On exit  : 300/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2360 ;;      Params:         0       1       0       0
  2361 ;;      Locals:         0       1       0       0
  2362 ;;      Temps:          0       1       0       0
  2363 ;;      Totals:         0       3       0       0
  2364 ;;Total ram usage:        3 bytes
  2365 ;; Hardware stack levels used: 1
  2366 ;; Hardware stack levels required when called: 4
  2367 ;; This function calls:
  2368 ;;		_LCD_wrdata
  2369 ;; This function is called by:
  2370 ;;		_main
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374     03AA                     _LCD_gotoxy:	
  2375                           ;psect for function _LCD_gotoxy
  2376                           
  2377                           
  2378                           ;incstack = 0
  2379                           ; Regs used in _LCD_gotoxy: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2380                           ;LCD_gotoxy@x stored from wreg
  2381     03AA  00D2               	movwf	LCD_gotoxy@x
  2382                           
  2383                           ;lcd_hd44780.c: 95: PORTAbits.RA4 = 0; LCD_wrdata((uint8_t) 0b10000000 | (uint8_t) y * 0
      +                          x40 + x);;
  2384     03AB  1205               	bcf	5,4	;volatile
  2385     03AC  0850               	movf	LCD_gotoxy@y,w
  2386     03AD  00D1               	movwf	??_LCD_gotoxy
  2387     03AE  3006               	movlw	6
  2388     03AF                     u545:
  2389     03AF  1003               	clrc
  2390     03B0  0DD1               	rlf	??_LCD_gotoxy,f
  2391     03B1  3EFF               	addlw	-1
  2392     03B2  1D03               	skipz
  2393     03B3  2BAF               	goto	u545
  2394     03B4  0852               	movf	LCD_gotoxy@x,w
  2395     03B5  0751               	addwf	??_LCD_gotoxy,w
  2396     03B6  3880               	iorlw	128
  2397     03B7  2278               	fcall	_LCD_wrdata
  2398     03B8  0008               	return
  2399     03B9                     __end_of_LCD_gotoxy:
  2400                           
  2401                           	psect	text13
  2402     0278                     __ptext13:	
  2403 ;; *************** function _LCD_wrdata *****************
  2404 ;; Defined at:
  2405 ;;		line 34 in file "lcd_hd44780.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  data            1    wreg     unsigned char 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  data            1    2[BANK0 ] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 300/0
  2416 ;;		On exit  : 300/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2419 ;;      Params:         0       0       0       0
  2420 ;;      Locals:         0       1       0       0
  2421 ;;      Temps:          0       1       0       0
  2422 ;;      Totals:         0       2       0       0
  2423 ;;Total ram usage:        2 bytes
  2424 ;; Hardware stack levels used: 1
  2425 ;; Hardware stack levels required when called: 3
  2426 ;; This function calls:
  2427 ;;		_LCD_waitbf
  2428 ;; This function is called by:
  2429 ;;		_main
  2430 ;;		_LCD_set_cgram_addr
  2431 ;;		_LCD_gotoxy
  2432 ;;		_LCD_putc
  2433 ;;		_LCD_init
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437     0278                     _LCD_wrdata:	
  2438                           ;psect for function _LCD_wrdata
  2439                           
  2440                           
  2441                           ;incstack = 0
  2442                           ; Regs used in _LCD_wrdata: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2443                           ;LCD_wrdata@data stored from wreg
  2444     0278  00CF               	movwf	LCD_wrdata@data
  2445                           
  2446                           ;lcd_hd44780.c: 35: TRISA &= 0xF0;
  2447     0279  30F0               	movlw	240
  2448     027A  00FF               	movwf	127
  2449     027B  087F               	movf	127,w
  2450     027C  1683               	bsf	3,5	;RP0=1, select bank1
  2451     027D  0585               	andwf	5,f	;volatile
  2452                           
  2453                           ;lcd_hd44780.c: 38: PORTAbits.RA6 = 1;
  2454     027E  1283               	bcf	3,5	;RP0=0, select bank0
  2455     027F  1705               	bsf	5,6	;volatile
  2456                           
  2457                           ;lcd_hd44780.c: 39: __nop();
  2458     0280  0000               	nop
  2459                           
  2460                           ;lcd_hd44780.c: 40: PORTA = (PORTA & 0xF0) | data >> 4;
  2461     0281  1283               	bcf	3,5	;RP0=0, select bank0
  2462     0282  1303               	bcf	3,6	;RP1=0, select bank0
  2463     0283  084F               	movf	LCD_wrdata@data,w
  2464     0284  00CE               	movwf	??_LCD_wrdata
  2465     0285  3004               	movlw	4
  2466     0286                     u475:
  2467     0286  1003               	clrc
  2468     0287  0CCE               	rrf	??_LCD_wrdata,f
  2469     0288  3EFF               	addlw	-1
  2470     0289  1D03               	skipz
  2471     028A  2A86               	goto	u475
  2472     028B  0805               	movf	5,w	;volatile
  2473     028C  39F0               	andlw	240
  2474     028D  044E               	iorwf	??_LCD_wrdata,w
  2475     028E  0085               	movwf	5	;volatile
  2476                           
  2477                           ;lcd_hd44780.c: 41: __nop();
  2478     028F  0000               	nop
  2479                           
  2480                           ;lcd_hd44780.c: 42: PORTAbits.RA6 = 0;
  2481     0290  1283               	bcf	3,5	;RP0=0, select bank0
  2482     0291  1303               	bcf	3,6	;RP1=0, select bank0
  2483     0292  1305               	bcf	5,6	;volatile
  2484                           
  2485                           ;lcd_hd44780.c: 44: __nop();
  2486     0293  0000               	nop
  2487                           
  2488                           ;lcd_hd44780.c: 47: PORTAbits.RA6 = 1;
  2489     0294  1283               	bcf	3,5	;RP0=0, select bank0
  2490     0295  1303               	bcf	3,6	;RP1=0, select bank0
  2491     0296  1705               	bsf	5,6	;volatile
  2492                           
  2493                           ;lcd_hd44780.c: 48: __nop();
  2494     0297  0000               	nop
  2495                           
  2496                           ;lcd_hd44780.c: 49: PORTA = (PORTA & 0xF0) | (data & 0x0f);
  2497     0298  300F               	movlw	15
  2498     0299  1283               	bcf	3,5	;RP0=0, select bank0
  2499     029A  1303               	bcf	3,6	;RP1=0, select bank0
  2500     029B  054F               	andwf	LCD_wrdata@data,w
  2501     029C  00CE               	movwf	??_LCD_wrdata
  2502     029D  0805               	movf	5,w	;volatile
  2503     029E  39F0               	andlw	240
  2504     029F  044E               	iorwf	??_LCD_wrdata,w
  2505     02A0  0085               	movwf	5	;volatile
  2506                           
  2507                           ;lcd_hd44780.c: 50: __nop();
  2508     02A1  0000               	nop
  2509                           
  2510                           ;lcd_hd44780.c: 51: PORTAbits.RA6 = 0;
  2511     02A2  1283               	bcf	3,5	;RP0=0, select bank0
  2512     02A3  1303               	bcf	3,6	;RP1=0, select bank0
  2513     02A4  1305               	bcf	5,6	;volatile
  2514                           
  2515                           ;lcd_hd44780.c: 55: LCD_waitbf();
  2516     02A5  22F6               	fcall	_LCD_waitbf
  2517     02A6  0008               	return
  2518     02A7                     __end_of_LCD_wrdata:
  2519                           
  2520                           	psect	text14
  2521     02F6                     __ptext14:	
  2522 ;; *************** function _LCD_waitbf *****************
  2523 ;; Defined at:
  2524 ;;		line 62 in file "lcd_hd44780.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  busy            1    0[BANK0 ] unsigned char 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, btemp+1
  2533 ;; Tracked objects:
  2534 ;;		On entry : 300/0
  2535 ;;		On exit  : 300/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2538 ;;      Params:         0       0       0       0
  2539 ;;      Locals:         0       1       0       0
  2540 ;;      Temps:          0       0       0       0
  2541 ;;      Totals:         0       1       0       0
  2542 ;;Total ram usage:        1 bytes
  2543 ;; Hardware stack levels used: 1
  2544 ;; Hardware stack levels required when called: 2
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_LCD_wrdata
  2549 ;;		_LCD_init
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553     02F6                     _LCD_waitbf:	
  2554                           ;psect for function _LCD_waitbf
  2555                           
  2556                           
  2557                           ;lcd_hd44780.c: 64: bool busy;;lcd_hd44780.c: 66: PORTAbits.RA4 = 0;
  2558                           
  2559                           ;incstack = 0
  2560                           ; Regs used in _LCD_waitbf: [wreg+status,2+status,0+btemp+1]
  2561     02F6  1205               	bcf	5,4	;volatile
  2562                           
  2563                           ;lcd_hd44780.c: 67: PORTAbits.RA7 = 1;
  2564     02F7  1785               	bsf	5,7	;volatile
  2565                           
  2566                           ;lcd_hd44780.c: 69: TRISA |= 0x0f;
  2567     02F8  300F               	movlw	15
  2568     02F9  00FF               	movwf	127
  2569     02FA  087F               	movf	127,w
  2570     02FB  1683               	bsf	3,5	;RP0=1, select bank1
  2571     02FC  0485               	iorwf	5,f	;volatile
  2572     02FD                     l1327:
  2573                           
  2574                           ;lcd_hd44780.c: 72: PORTAbits.RA6 = 1;
  2575     02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2576     02FE  1705               	bsf	5,6	;volatile
  2577                           
  2578                           ;lcd_hd44780.c: 73: __nop();
  2579     02FF  0000               	nop
  2580                           
  2581                           ;lcd_hd44780.c: 75: busy = PORTA & 0x08;
  2582     0300  1283               	bcf	3,5	;RP0=0, select bank0
  2583     0301  1303               	bcf	3,6	;RP1=0, select bank0
  2584     0302  0805               	movf	5,w	;volatile
  2585     0303  3908               	andlw	8
  2586     0304  00CD               	movwf	LCD_waitbf@busy
  2587                           
  2588                           ;lcd_hd44780.c: 77: PORTAbits.RA6 = 0;
  2589     0305  1305               	bcf	5,6	;volatile
  2590                           
  2591                           ;lcd_hd44780.c: 78: __nop();
  2592     0306  0000               	nop
  2593                           
  2594                           ;lcd_hd44780.c: 80: PORTAbits.RA6 = 1;
  2595     0307  1283               	bcf	3,5	;RP0=0, select bank0
  2596     0308  1303               	bcf	3,6	;RP1=0, select bank0
  2597     0309  1705               	bsf	5,6	;volatile
  2598                           
  2599                           ;lcd_hd44780.c: 81: __nop();
  2600     030A  0000               	nop
  2601                           
  2602                           ;lcd_hd44780.c: 82: PORTAbits.RA6 = 0;
  2603     030B  1283               	bcf	3,5	;RP0=0, select bank0
  2604     030C  1303               	bcf	3,6	;RP1=0, select bank0
  2605     030D  1305               	bcf	5,6	;volatile
  2606                           
  2607                           ;lcd_hd44780.c: 83: __nop();
  2608     030E  0000               	nop
  2609                           
  2610                           ;lcd_hd44780.c: 84: } while (busy);
  2611     030F  1283               	bcf	3,5	;RP0=0, select bank0
  2612     0310  1303               	bcf	3,6	;RP1=0, select bank0
  2613     0311  084D               	movf	LCD_waitbf@busy,w
  2614     0312  1D03               	btfss	3,2
  2615     0313  2AFD               	goto	l1327
  2616                           
  2617                           ;lcd_hd44780.c: 86: PORTAbits.RA7 = 0;
  2618     0314  1385               	bcf	5,7	;volatile
  2619     0315  0008               	return
  2620     0316                     __end_of_LCD_waitbf:
  2621                           
  2622                           	psect	text15
  2623     01C7                     __ptext15:	
  2624 ;; *************** function _isr *****************
  2625 ;; Defined at:
  2626 ;;		line 322 in file "main.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;		None
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;  _key            1   10[COMMON] unsigned char 
  2631 ;;  _col            1    8[COMMON] unsigned char 
  2632 ;;  _row            1    9[COMMON] unsigned char 
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  1    wreg      void 
  2635 ;; Registers used:
  2636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2642 ;;      Params:         0       0       0       0
  2643 ;;      Locals:         3       0       0       0
  2644 ;;      Temps:          5       0       0       0
  2645 ;;      Totals:         8       0       0       0
  2646 ;;Total ram usage:        8 bytes
  2647 ;; Hardware stack levels used: 1
  2648 ;; Hardware stack levels required when called: 1
  2649 ;; This function calls:
  2650 ;;		_kbd_eval
  2651 ;;		i1__beep
  2652 ;; This function is called by:
  2653 ;;		Interrupt level 1
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657     01C7                     _isr:	
  2658                           ;psect for function _isr
  2659                           
  2660                           
  2661                           ;main.c: 324: static char prev_key = '\0';;main.c: 325: static uint8_t key_col_select;;m
      +                          ain.c: 326: static uint8_t kbd_skip_t0_cyc = 0;;main.c: 333: if (T0IF) {
  2662     01C7  1D0B               	btfss	11,2	;volatile
  2663     01C8  2A1D               	goto	i1l174
  2664                           
  2665                           ;main.c: 334: T0IF = 0;
  2666     01C9  110B               	bcf	11,2	;volatile
  2667                           
  2668                           ;main.c: 337: uint8_t _row = PORTB;
  2669     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  2670     01CB  1303               	bcf	3,6	;RP1=0, select bank0
  2671     01CC  0806               	movf	6,w	;volatile
  2672     01CD  00F9               	movwf	isr@_row
  2673                           
  2674                           ;main.c: 341: if (kbd_skip_t0_cyc) {
  2675     01CE  087B               	movf	isr@kbd_skip_t0_cyc,w
  2676     01CF  1903               	btfsc	3,2
  2677     01D0  29D3               	goto	i1l1763
  2678                           
  2679                           ;main.c: 342: kbd_skip_t0_cyc--;
  2680     01D1  3001               	movlw	1
  2681     01D2  02FB               	subwf	isr@kbd_skip_t0_cyc,f
  2682     01D3                     i1l1763:
  2683                           
  2684                           ;main.c: 343: };main.c: 345: if (_row & 0xf0 && !key) {
  2685     01D3  0879               	movf	isr@_row,w
  2686     01D4  39F0               	andlw	240
  2687     01D5  1903               	btfsc	3,2
  2688     01D6  29F3               	goto	i1l1779
  2689     01D7  083B               	movf	_key,w
  2690     01D8  1D03               	btfss	3,2
  2691     01D9  29F3               	goto	i1l1779
  2692                           
  2693                           ;main.c: 346: uint8_t _col = key_col_select & 0x03;
  2694     01DA  087C               	movf	isr@key_col_select,w
  2695     01DB  3903               	andlw	3
  2696     01DC  00F8               	movwf	isr@_col
  2697                           
  2698                           ;main.c: 347: uint8_t _key;;main.c: 349: _key = kbd_eval(_row, _col);
  2699     01DD  0878               	movf	isr@_col,w
  2700     01DE  00F0               	movwf	kbd_eval@col
  2701     01DF  0879               	movf	isr@_row,w
  2702     01E0  234A               	fcall	_kbd_eval
  2703     01E1  00FA               	movwf	isr@_key
  2704                           
  2705                           ;main.c: 352: if (_key != prev_key || !kbd_skip_t0_cyc) {
  2706     01E2  087A               	movf	isr@_key,w
  2707     01E3  0633               	xorwf	isr@prev_key,w
  2708     01E4  1D03               	skipz
  2709     01E5  29E9               	goto	i1l1775
  2710     01E6  087B               	movf	isr@kbd_skip_t0_cyc,w
  2711     01E7  1D03               	btfss	3,2
  2712     01E8  29F3               	goto	i1l1779
  2713     01E9                     i1l1775:
  2714                           
  2715                           ;main.c: 353: kbd_skip_t0_cyc = 12;
  2716     01E9  300C               	movlw	12
  2717     01EA  00FB               	movwf	isr@kbd_skip_t0_cyc
  2718                           
  2719                           ;main.c: 354: key = _key;
  2720     01EB  087A               	movf	isr@_key,w
  2721     01EC  00BB               	movwf	_key
  2722                           
  2723                           ;main.c: 355: prev_key = _key;
  2724     01ED  087A               	movf	isr@_key,w
  2725     01EE  00B3               	movwf	isr@prev_key
  2726                           
  2727                           ;main.c: 356: _beep(120, 60);
  2728     01EF  303C               	movlw	60
  2729     01F0  00F0               	movwf	i1__beep@CCPR1L_val
  2730     01F1  3078               	movlw	120
  2731     01F2  23C6               	fcall	i1__beep
  2732     01F3                     i1l1779:
  2733                           
  2734                           ;main.c: 357: };main.c: 358: };main.c: 361: key_col_select++;
  2735     01F3  3001               	movlw	1
  2736     01F4  00FF               	movwf	127
  2737     01F5  087F               	movf	127,w
  2738     01F6  07FC               	addwf	isr@key_col_select,f
  2739                           
  2740                           ;main.c: 362: PORTB = (PORTB & 0xFC) | (key_col_select & 0x03);
  2741     01F7  3003               	movlw	3
  2742     01F8  057C               	andwf	isr@key_col_select,w
  2743     01F9  00F3               	movwf	??_isr
  2744     01FA  0806               	movf	6,w	;volatile
  2745     01FB  39FC               	andlw	252
  2746     01FC  0473               	iorwf	??_isr,w
  2747     01FD  0086               	movwf	6	;volatile
  2748                           
  2749                           ;main.c: 365: if (CCPR1L) {
  2750     01FE  0815               	movf	21,w	;volatile
  2751     01FF  1903               	btfsc	3,2
  2752     0200  2A08               	goto	i1l1791
  2753                           
  2754                           ;main.c: 367: if (beep_delay) {
  2755     0201  087D               	movf	_beep_delay,w
  2756     0202  1903               	btfsc	3,2
  2757     0203  2A07               	goto	i1l1789
  2758                           
  2759                           ;main.c: 368: beep_delay--;
  2760     0204  3001               	movlw	1
  2761     0205  02FD               	subwf	_beep_delay,f
  2762                           
  2763                           ;main.c: 369: } else {
  2764     0206  2A08               	goto	i1l1791
  2765     0207                     i1l1789:
  2766                           
  2767                           ;main.c: 371: CCPR1L = 0;
  2768     0207  0195               	clrf	21	;volatile
  2769     0208                     i1l1791:
  2770                           
  2771                           ;main.c: 372: };main.c: 373: };main.c: 376: if (gameB_spd_cnt && gameB_cnt_ena) {
  2772     0208  0839               	movf	_gameB_spd_cnt,w
  2773     0209  1903               	btfsc	3,2
  2774     020A  2A10               	goto	i1l172
  2775     020B  0834               	movf	_gameB_cnt_ena,w
  2776     020C  1903               	btfsc	3,2
  2777     020D  2A10               	goto	i1l172
  2778                           
  2779                           ;main.c: 377: gameB_spd_cnt--;
  2780     020E  3001               	movlw	1
  2781     020F  02B9               	subwf	_gameB_spd_cnt,f
  2782     0210                     i1l172:
  2783                           
  2784                           ;main.c: 378: };main.c: 380: if (flash_lcd) {
  2785     0210  0835               	movf	_flash_lcd,w
  2786     0211  1903               	btfsc	3,2
  2787     0212  2A1D               	goto	i1l174
  2788                           
  2789                           ;main.c: 381: PORTBbits.RB2 = TMR2 & 0x01;
  2790     0213  0811               	movf	17,w	;volatile
  2791     0214  3901               	andlw	1
  2792     0215  00F3               	movwf	??_isr
  2793     0216  0DF3               	rlf	??_isr,f
  2794     0217  0DF3               	rlf	??_isr,f
  2795     0218  0806               	movf	6,w	;volatile
  2796     0219  0673               	xorwf	??_isr,w
  2797     021A  39FB               	andlw	-5
  2798     021B  0673               	xorwf	??_isr,w
  2799     021C  0086               	movwf	6	;volatile
  2800     021D                     i1l174:
  2801     021D  0877               	movf	??_isr+4,w
  2802     021E  00FF               	movwf	127
  2803     021F  0876               	movf	??_isr+3,w
  2804     0220  008A               	movwf	10
  2805     0221  0875               	movf	??_isr+2,w
  2806     0222  0084               	movwf	4
  2807     0223  0E74               	swapf	??_isr+1,w
  2808     0224  0083               	movwf	3
  2809     0225  0EFE               	swapf	126,f
  2810     0226  0E7E               	swapf	126,w
  2811     0227  0009               	retfie
  2812     0228                     __end_of_isr:
  2813                           
  2814                           	psect	intentry
  2815     0004                     __pintentry:	
  2816                           ;incstack = 0
  2817                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2818                           
  2819     0004                     interrupt_function:
  2820     007E                     saved_w	set	btemp
  2821     0004  00FE               	movwf	btemp
  2822     0005  0E03               	swapf	3,w
  2823     0006  00F4               	movwf	??_isr+1
  2824     0007  0804               	movf	4,w
  2825     0008  00F5               	movwf	??_isr+2
  2826     0009  080A               	movf	10,w
  2827     000A  00F6               	movwf	??_isr+3
  2828     000B  087F               	movf	btemp+1,w
  2829     000C  00F7               	movwf	??_isr+4
  2830     000D  29C7               	ljmp	_isr
  2831                           
  2832                           	psect	text16
  2833     03C6                     __ptext16:	
  2834 ;; *************** function i1__beep *****************
  2835 ;; Defined at:
  2836 ;;		line 392 in file "main.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  PR2_val         1    wreg     unsigned char 
  2839 ;;  CCPR1L_val      1    0[COMMON] unsigned char 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  PR2_val         1    1[COMMON] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0
  2846 ;; Tracked objects:
  2847 ;;		On entry : B00/0
  2848 ;;		On exit  : B00/0
  2849 ;;		Unchanged: 800/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2851 ;;      Params:         1       0       0       0
  2852 ;;      Locals:         1       0       0       0
  2853 ;;      Temps:          0       0       0       0
  2854 ;;      Totals:         2       0       0       0
  2855 ;;Total ram usage:        2 bytes
  2856 ;; Hardware stack levels used: 1
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_isr
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864     03C6                     i1__beep:	
  2865                           ;psect for function i1__beep
  2866                           
  2867                           
  2868                           ;incstack = 0
  2869                           ; Regs used in i1__beep: [wreg+status,2+status,0]
  2870                           ;i1__beep@PR2_val stored from wreg
  2871     03C6  00F1               	movwf	i1__beep@PR2_val
  2872                           
  2873                           ;main.c: 395: if (CCPR1L) return;
  2874     03C7  0815               	movf	21,w	;volatile
  2875     03C8  1D03               	btfss	3,2
  2876     03C9  0008               	return
  2877                           
  2878                           ;main.c: 398: beep_delay = 6;
  2879     03CA  3006               	movlw	6
  2880     03CB  00FD               	movwf	_beep_delay
  2881                           
  2882                           ;main.c: 399: PR2 = PR2_val;
  2883     03CC  0871               	movf	i1__beep@PR2_val,w
  2884     03CD  1683               	bsf	3,5	;RP0=1, select bank1
  2885     03CE  0092               	movwf	18	;volatile
  2886                           
  2887                           ;main.c: 400: CCPR1L = CCPR1L_val;
  2888     03CF  0870               	movf	i1__beep@CCPR1L_val,w
  2889     03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2890     03D1  0095               	movwf	21	;volatile
  2891     03D2  0008               	return
  2892     03D3                     __end_ofi1__beep:
  2893                           
  2894                           	psect	text17
  2895     034A                     __ptext17:	
  2896 ;; *************** function _kbd_eval *****************
  2897 ;; Defined at:
  2898 ;;		line 11 in file "keypad.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  row             1    wreg     unsigned char 
  2901 ;;  col             1    0[COMMON] unsigned char 
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;  row             1    2[COMMON] unsigned char 
  2904 ;;  key_ptr         1    1[COMMON] unsigned char 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      unsigned char 
  2907 ;; Registers used:
  2908 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2909 ;; Tracked objects:
  2910 ;;		On entry : 300/0
  2911 ;;		On exit  : B00/0
  2912 ;;		Unchanged: 300/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2914 ;;      Params:         1       0       0       0
  2915 ;;      Locals:         2       0       0       0
  2916 ;;      Temps:          0       0       0       0
  2917 ;;      Totals:         3       0       0       0
  2918 ;;Total ram usage:        3 bytes
  2919 ;; Hardware stack levels used: 1
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_isr
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927     034A                     _kbd_eval:	
  2928                           ;psect for function _kbd_eval
  2929                           
  2930                           
  2931                           ;incstack = 0
  2932                           ; Regs used in _kbd_eval: [wreg-fsr0h+status,2+status,0+btemp+1]
  2933                           ;kbd_eval@row stored from wreg
  2934     034A  00F2               	movwf	kbd_eval@row
  2935                           
  2936                           ;keypad.c: 13: uint8_t key_ptr = 0x00;
  2937     034B  01F1               	clrf	kbd_eval@key_ptr
  2938                           
  2939                           ;keypad.c: 16: if (row & 0x20) {
  2940     034C  1EF2               	btfss	kbd_eval@row,5
  2941     034D  2B50               	goto	i1l250
  2942                           
  2943                           ;keypad.c: 17: key_ptr = 4;
  2944     034E  3004               	movlw	4
  2945     034F  2B57               	goto	L1
  2946     0350                     i1l250:	
  2947                           ;keypad.c: 18: } else if (row & 0x40) {
  2948                           
  2949     0350  1F72               	btfss	kbd_eval@row,6
  2950     0351  2B54               	goto	i1l252
  2951                           
  2952                           ;keypad.c: 19: key_ptr = 8;
  2953     0352  3008               	movlw	8
  2954     0353  2B57               	goto	L1
  2955     0354                     i1l252:	
  2956                           ;keypad.c: 20: } else if (row & 0x80) {
  2957                           
  2958     0354  1FF2               	btfss	kbd_eval@row,7
  2959     0355  2B58               	goto	i1l1533
  2960                           
  2961                           ;keypad.c: 21: key_ptr = 12;
  2962     0356  300C               	movlw	12
  2963     0357                     L1:
  2964     0357  00F1               	movwf	kbd_eval@key_ptr
  2965     0358                     i1l1533:
  2966                           
  2967                           ;keypad.c: 22: };keypad.c: 26: key_ptr |= col;
  2968     0358  0870               	movf	kbd_eval@col,w
  2969     0359  00FF               	movwf	127
  2970     035A  087F               	movf	127,w
  2971     035B  04F1               	iorwf	kbd_eval@key_ptr,f
  2972                           
  2973                           ;keypad.c: 28: return keys[key_ptr];
  2974     035C  0871               	movf	kbd_eval@key_ptr,w
  2975     035D  3E20               	addlw	(low (_keys| 0))& (0+255)
  2976     035E  0084               	movwf	4
  2977     035F  1383               	bcf	3,7	;select IRP bank0
  2978     0360  0800               	movf	0,w
  2979     0361  0008               	return
  2980     0362                     __end_of_kbd_eval:
  2981     007E                     btemp	set	126	;btemp
  2982     007E                     wtemp0	set	126
  2983                           
  2984                           	psect	idloc
  2985                           
  2986                           ;Config register IDLOC0 @ 0x2000
  2987                           ;	unspecified, using default values
  2988     2000                     	org	8192
  2989     2000  3FFF               	dw	16383
  2990                           
  2991                           ;Config register IDLOC1 @ 0x2001
  2992                           ;	unspecified, using default values
  2993     2001                     	org	8193
  2994     2001  3FFF               	dw	16383
  2995                           
  2996                           ;Config register IDLOC2 @ 0x2002
  2997                           ;	unspecified, using default values
  2998     2002                     	org	8194
  2999     2002  3FFF               	dw	16383
  3000                           
  3001                           ;Config register IDLOC3 @ 0x2003
  3002                           ;	unspecified, using default values
  3003     2003                     	org	8195
  3004     2003  3FFF               	dw	16383
  3005                           
  3006                           	psect	config
  3007                           
  3008                           ;Config register CONFIG @ 0x2007
  3009                           ;	Oscillator Selection bits
  3010                           ;	FOSC = INTOSCIO, INTRC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function o
      +                          n RA7/OSC1/CLKIN
  3011                           ;	Watchdog Timer Enable bit
  3012                           ;	WDTE = OFF, WDT disabled
  3013                           ;	Power-up Timer Enable bit
  3014                           ;	PWRTE = OFF, PWRT disabled
  3015                           ;	RA5/MCLR pin function select
  3016                           ;	MCLRE = OFF, RA5/MCLR pin function is digital input, MCLR internally tied to VDD
  3017                           ;	Brown-out Reset Enable bit
  3018                           ;	BOREN = ON, BOD Reset enabled
  3019                           ;	Low-Voltage Programming Enable bit
  3020                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  3021                           ;	Data Code Protection bit
  3022                           ;	CPD = OFF, Data memory code protection off
  3023                           ;	Code Protection bits
  3024                           ;	CP = OFF, Program memory code protection off
  3025     2007                     	org	8199
  3026     2007  3F58               	dw	16216

Data Sizes:
    Strings     21
    Constant    0
    Data        73
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     18      63
    BANK1            80      0      34
    BANK2            48      0       0

Pointer List with Targets:

    __eetoc@addr	PTR eeprom void  size(1) Largest target is 48
		 -> tile_set(EEDATA[8]), eeprom_cgram_data(EEDATA[48]), eeprom_keys(EEDATA[17]), 

    __eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 48
		 -> tile_set(EEDATA[8]), eeprom_cgram_data(EEDATA[48]), eeprom_keys(EEDATA[17]), 

    __eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(BANK0[1]), 

    __eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(COMMON[2]), __eetoc@data(BANK0[1]), 

    LCD_wr_custom_char@dataarr	PTR const unsigned char  size(1) Largest target is 48
		 -> eeprom_cgram_data(EEDATA[48]), 

    LCD_puts@str	PTR const unsigned char  size(2) Largest target is 34
		 -> gameB_track(BANK1[34]), STR_2(CODE[7]), STR_1(CODE[14]), gameA_line_buf(BANK0[17]), 

    clearstr@str	PTR unsigned char  size(1) Largest target is 17
		 -> gameA_line_buf(BANK0[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_kbd_eval

Critical Paths under _main in BANK0

    _main->_LCD_wr_custom_char
    _rand_tile->___eetoc
    _LCD_wr_custom_char->___eetoc
    ___eetoc->___eecpymem
    _LCD_set_cgram_addr->_LCD_wrdata
    _LCD_puts->_LCD_putc
    _LCD_putc->_LCD_wrdata
    _LCD_init->_LCD_wrdata
    _LCD_gotoxy->_LCD_wrdata
    _LCD_wrdata->_LCD_waitbf

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    7084
                                             10 BANK0      8     8      0
                         _LCD_gotoxy
                           _LCD_init
                           _LCD_putc
                           _LCD_puts
                 _LCD_wr_custom_char
                         _LCD_wrdata
                            ___eetoc
                              __beep
                           _clearstr
                               _init
                          _rand_tile
 ---------------------------------------------------------------------------------
 (1) _rand_tile                                            1     1      0    1383
                                              6 BANK0      1     1      0
                            ___eetoc
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clearstr                                             1     1      0      78
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) __beep                                                2     1      1     246
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCD_wr_custom_char                                   4     3      1    2018
                                              6 BANK0      4     3      1
                           _LCD_putc
                 _LCD_set_cgram_addr
                            ___eetoc
 ---------------------------------------------------------------------------------
 (2) ___eetoc                                              2     2      0    1316
                                              4 BANK0      2     2      0
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (3) ___eecpymem                                           4     2      2    1229
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _LCD_set_cgram_addr                                   1     1      0      89
                                              3 BANK0      1     1      0
                         _LCD_wrdata
 ---------------------------------------------------------------------------------
 (1) _LCD_puts                                             2     0      2     514
                                              4 BANK0      2     0      2
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             1     1      0      89
                                              3 BANK0      1     1      0
                         _LCD_wrdata
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0     113
                                              3 BANK0      3     3      0
                         _LCD_waitbf
                         _LCD_wrdata
 ---------------------------------------------------------------------------------
 (1) _LCD_gotoxy                                           3     2      1     719
                                              3 BANK0      3     2      1
                         _LCD_wrdata
 ---------------------------------------------------------------------------------
 (1) _LCD_wrdata                                           2     2      0      67
                                              1 BANK0      2     2      0
                         _LCD_waitbf
 ---------------------------------------------------------------------------------
 (2) _LCD_waitbf                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  8     8      0     396
                                              3 COMMON     8     8      0
                           _kbd_eval
                            i1__beep
 ---------------------------------------------------------------------------------
 (6) i1__beep                                              2     1      1      70
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (6) _kbd_eval                                             3     2      1     191
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_gotoxy
     _LCD_wrdata
       _LCD_waitbf
   _LCD_init
     _LCD_waitbf
     _LCD_wrdata
   _LCD_putc
     _LCD_wrdata
   _LCD_puts
     _LCD_putc
   _LCD_wr_custom_char
     _LCD_putc
     _LCD_set_cgram_addr
       _LCD_wrdata
     ___eetoc
       ___eecpymem
   _LCD_wrdata
   ___eetoc
   __beep
   _clearstr
   _init
   _rand_tile
     ___eetoc

 _isr (ROOT)
   _kbd_eval
   i1__beep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      22       7       42.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      3F       3       78.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6F      10        0.0%
ABS                  0      0      6F       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0      49       0       57.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Nov 06 23:25:56 2023

                         pc 0002                          fsr 0004                         l101 006C  
                       l110 0093                         l130 0113                         l131 013A  
                       l123 00EA                         l142 0172                         l128 00EF  
                       l137 0169                         l129 00F1                         l272 02AA  
                       l277 02B7                         _LCD 0030                         _PR2 0092  
                       u525 031A                         u545 03AF                         u475 0286  
                       u917 0075                         u927 009C                         u937 0124  
                       u947 01C2                         u957 0239                         u967 026C  
               ?_LCD_gotoxy 0050                         _key 003B                         _isr 01C7  
                       fsr0 0004                         indf 0000                 ?_LCD_waitbf 0070  
      _gameB_obstacle_delay 0037                 ?_LCD_wrdata 0070                        l1327 02FD  
                      l1423 0233                        l1515 0340                        l1605 0081  
                      l1471 0324                        l1519 0346                        l1607 0082  
                      l1713 0170                        l1609 0086                        l1387 02B1  
                      l1643 00D0                        l1635 00C0                        l1627 00B1  
                      l1717 0175                        l1661 00F2                        l1741 01B2  
                      l1637 00C5                        l1549 0020                        l1487 0362  
                      l1495 038C                        l1719 0180                        l1639 00CD  
                      l1729 0186                        l1659 0101                        l1739 01AA  
                      l1587 0067                        l1579 0054                        l1693 014E  
                      l1589 0068                        ?_isr 0070                        STR_1 02E1  
                      STR_2 02EF                        _T0IF 005A                        _TMR0 0001  
                      _TMR2 0011              _gameA_line_buf 003C                        _main 001D  
                      _init 0377                        _keys 0020                        btemp 007E  
           __end_ofi1__beep 03D3                        start 000E                       ??_isr 0073  
          __end_of_LCD_init 0278            __end_of_LCD_putc 03EF            __end_of_LCD_puts 0377  
                     ?_main 0070             __end_of___eetoc 03DC                       ?_init 0070  
                     _EEADR 009B                       _CMCON 001F                       _T2CON 0012  
            _gameB_truckpos 0038                       i1l250 0350                       i1l252 0354  
                     i1l172 0210                       i1l174 021D                       _PORTA 0005  
                     _PORTB 0006                       _TRISA 0085                       _TRISB 0086  
                     __beep 03B9             i1__beep@PR2_val 0071                       main@i 005E  
                     pclath 000A                       status 0003                       wtemp0 007E  
           __initialization 000F                __end_of_main 01C7                __end_of_init 038B  
               LCD_gotoxy@x 0052                 LCD_gotoxy@y 0050                      ??_main 0057  
          _gameB_difficulty 0036                      ??_init 004D                 LCD_putc@chr 0050  
               LCD_puts@str 0051                      ?__beep 004D                      _EEDATA 009A  
        _LCD_set_cgram_addr 03E4                      _CCPR1L 0015                      _EECON1 009C  
        _LCD_wr_custom_char 0316                   ??i1__beep 0071                      i1l1533 0358  
                    i1l1763 01D3                      i1l1791 0208                      i1l1775 01E9  
                    i1l1779 01F3                      i1l1789 0207                      _INTCON 000B  
       ?_LCD_set_cgram_addr 0070         ?_LCD_wr_custom_char 0053            __end_of_clearstr 039B  
          __end_of_kbd_eval 0362              LCD_waitbf@busy 004D                 isr@prev_key 0033  
                 ??___eetoc 0051        ??_LCD_set_cgram_addr 0050                __pdataEEDATA 0000  
      ??_LCD_wr_custom_char 0054                      saved_w 007E                  ___eecpymem 02A7  
   __end_of__initialization 001B                   ?_LCD_init 0070                   ?_LCD_putc 0070  
                 ?_LCD_puts 0051              __pcstackCOMMON 0070               __end_of__beep 03C6  
         _eeprom_cgram_data 0000                   LCD_init@i 0052                ??_LCD_gotoxy 0051  
              ??_LCD_waitbf 004D                ??_LCD_wrdata 004E                  _beep_delay 007D  
                   ??__beep 004E              LCD_wrdata@data 004F                  __pbssBANK0 0020  
                __pbssBANK1 00A0                  ??_LCD_init 0050                  ??_LCD_putc 0050  
                ??_LCD_puts 0053          isr@kbd_skip_t0_cyc 007B                  __pmaintext 001D  
        __end_of_LCD_gotoxy 03B9          __end_of_LCD_waitbf 0316          __end_of_LCD_wrdata 02A7  
                __pintentry 0004                     _CCP1CON 0017                   ?_clearstr 0070  
                 ?_kbd_eval 0070                     i1__beep 03C6                  __stringtab 02D1  
               ?___eecpymem 004D                     ___eetoc 03D3                     __ptext1 0331  
                   __ptext2 0377                     __ptext3 038B                     __ptext4 03B9  
                   __ptext5 0316                     __ptext6 03D3                     __ptext7 02A7  
                   __ptext8 03E4                     __ptext9 0362                  ??_clearstr 004D  
         __end_of_rand_tile 034A                  ??_kbd_eval 0071                     clrloop0 03DD  
      end_of_initialization 001B                     isr@_col 0078                     isr@_key 007A  
                   isr@_row 0079                   _PORTAbits 0005                   _PORTBbits 0006  
          __beep@CCPR1L_val 004D               _gameB_cnt_ena 0034             kbd_eval@key_ptr 0071  
             _gameB_spd_cnt 0039               __pidataEEDATA 0000         start_initialization 000F  
               __end_of_isr 0228                rand_tile@res 0053                  init_fetch0 039B  
               __pbssCOMMON 007B                   ___latbits 0000               __pcstackBANK0 004D  
               _gameB_track 00A0                    ?i1__beep 0070                ??___eecpymem 004F  
                 _gameB_spd 003A   LCD_wr_custom_char@dataarr 0053                    ?___eetoc 0070  
        i1__beep@CCPR1L_val 0070                   _flash_lcd 0035                   __pstrings 02D1  
        __end_of___eecpymem 02D1        rand_tile@psrand_seed 0032                   _rand_tile 0331  
         interrupt_function 0004                    _LCD_init 0228                   clear_ram0 03DC  
                  _LCD_putc 03EA                 _eeprom_keys 0030                    _LCD_puts 0362  
                  _PCONbits 008E                 __stringbase 02E0                  ?_rand_tile 0070  
                _EECON1bits 009C          __end_of__stringtab 02E1                    _clearstr 038B  
                  __ptext10 03EA                    __ptext11 0228                    __ptext12 03AA  
                  __ptext13 0278                    __ptext14 02F6                    __ptext15 01C7  
                  __ptext16 03C6                    __ptext17 034A                    _kbd_eval 034A  
    LCD_set_cgram_addr@addr 0050                    _tile_set 0041                    main@_key 005A  
                  main@hits 005C  __end_of_LCD_set_cgram_addr 03EA  __end_of_LCD_wr_custom_char 0331  
                  main@xpos 005B                    main@ypos 005D      LCD_wr_custom_char@code 0055  
           ___eecpymem@from 004D             ___eecpymem@size 004E                  _LCD_gotoxy 03AA  
                _LCD_waitbf 02F6                  _LCD_wrdata 0278                    init_ram0 039F  
                  intlevel1 0000                 ??_rand_tile 0053                 clearstr@str 004D  
                 stringcode 02DB       LCD_wr_custom_char@cnt 0056                  _OPTION_REG 0081  
             __beep@PR2_val 004E                    stringdir 02DB           isr@key_col_select 007C  
                  stringtab 02D1                 kbd_eval@col 0070                 kbd_eval@row 0072  
             ___eecpymem@cp 004F               ___eecpymem@to 0050                ___eetoc@addr 0051  
              ___eetoc@data 0052  
